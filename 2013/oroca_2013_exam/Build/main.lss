
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039b4  08000000  08000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  20000000  080039b4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001294  20000200  08003c00  00010200  2**9
                  ALLOC
  3 ._usrstack    00000100  20001494  08004e94  00010200  2**0
                  ALLOC
  4 .ARM.attributes 00000035  00000000  00000000  000100e8  2**0
                  CONTENTS, READONLY
  5 .debug_info   0000a611  00000000  00000000  0001011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003544  00000000  00000000  0001a72e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000099dc  00000000  00000000  0001dc72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000c08  00000000  00000000  0002764e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00002320  00000000  00000000  00028256  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000374b  00000000  00000000  0002a576  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000272a  00000000  00000000  0002dcc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000011  00000000  00000000  000303eb  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00001d0c  00000000  00000000  000303fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <g_pfnVectors>:
 8000000:	00 50 00 20 65 08 00 08                             .P. e...

08000008 <LED_Tick>:
static void Main_Init( void );



void LED_Tick( void )
{
 8000008:	b508      	push	{r3, lr}
	Hw_Led_Toggle(0);
 800000a:	f640 4369 	movw	r3, #3177	; 0xc69
 800000e:	2000      	movs	r0, #0
 8000010:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000014:	4798      	blx	r3
 8000016:	bd08      	pop	{r3, pc}

08000018 <main>:
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 8000018:	b500      	push	{lr}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001a:	4b0a      	ldr	r3, [pc, #40]	; (8000044 <main+0x2c>)
     ARG     : 	void
     RET     : 	
     			int
---------------------------------------------------------------------------*/
int main(void)
{
 800001c:	b083      	sub	sp, #12
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
 800001e:	4798      	blx	r3
	Ap_Init();
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000020:	2400      	movs	r4, #0
     RET     : void
---------------------------------------------------------------------------*/
void Main_Init( void )
{
	Hw_Init();
	Ap_Init();
 8000022:	4b09      	ldr	r3, [pc, #36]	; (8000048 <main+0x30>)
 8000024:	4798      	blx	r3
	
	Hw_Timer_Set  ( HW_TIMER_CH_LED, 1000, LOOP_TIME, LED_Tick, NULL );
 8000026:	4d09      	ldr	r5, [pc, #36]	; (800004c <main+0x34>)
 8000028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800002c:	2202      	movs	r2, #2
 800002e:	4b08      	ldr	r3, [pc, #32]	; (8000050 <main+0x38>)
 8000030:	4620      	mov	r0, r4
 8000032:	9400      	str	r4, [sp, #0]
 8000034:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_LED );		
 8000036:	4b07      	ldr	r3, [pc, #28]	; (8000054 <main+0x3c>)
 8000038:	4620      	mov	r0, r4
 800003a:	4798      	blx	r3
	
	Main_Init();

	//-- 명령어 처리
	//  
	Ap_Menu_ExeCmd();    
 800003c:	4b06      	ldr	r3, [pc, #24]	; (8000058 <main+0x40>)
 800003e:	4798      	blx	r3
 8000040:	e7fe      	b.n	8000040 <main+0x28>
 8000042:	bf00      	nop
 8000044:	08000915 	.word	0x08000915
 8000048:	0800005d 	.word	0x0800005d
 800004c:	08000ec1 	.word	0x08000ec1
 8000050:	08000009 	.word	0x08000009
 8000054:	08000ee1 	.word	0x08000ee1
 8000058:	08000161 	.word	0x08000161

0800005c <Ap_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Init( void )
{
 800005c:	4770      	bx	lr
 800005e:	bf00      	nop

08000060 <Exam_LED_Tick>:


u16 Exam_LED_TickDelay = 100;  

void Exam_LED_Tick( void )
{
 8000060:	b508      	push	{r3, lr}
	static u16 Cnt = 0;

	Cnt++;
 8000062:	4b07      	ldr	r3, [pc, #28]	; (8000080 <Exam_LED_Tick+0x20>)

	if( Cnt >= Exam_LED_TickDelay )
 8000064:	4907      	ldr	r1, [pc, #28]	; (8000084 <Exam_LED_Tick+0x24>)

void Exam_LED_Tick( void )
{
	static u16 Cnt = 0;

	Cnt++;
 8000066:	881a      	ldrh	r2, [r3, #0]

	if( Cnt >= Exam_LED_TickDelay )
 8000068:	8809      	ldrh	r1, [r1, #0]

void Exam_LED_Tick( void )
{
	static u16 Cnt = 0;

	Cnt++;
 800006a:	3201      	adds	r2, #1
 800006c:	b292      	uxth	r2, r2

	if( Cnt >= Exam_LED_TickDelay )
 800006e:	4291      	cmp	r1, r2

void Exam_LED_Tick( void )
{
	static u16 Cnt = 0;

	Cnt++;
 8000070:	801a      	strh	r2, [r3, #0]

	if( Cnt >= Exam_LED_TickDelay )
 8000072:	d804      	bhi.n	800007e <Exam_LED_Tick+0x1e>
	{
		Cnt = 0;
 8000074:	2200      	movs	r2, #0
 8000076:	801a      	strh	r2, [r3, #0]

		Hw_Led_Toggle(0);
 8000078:	4610      	mov	r0, r2
 800007a:	4b03      	ldr	r3, [pc, #12]	; (8000088 <Exam_LED_Tick+0x28>)
 800007c:	4798      	blx	r3
 800007e:	bd08      	pop	{r3, pc}
 8000080:	20000200 	.word	0x20000200
 8000084:	20000000 	.word	0x20000000
 8000088:	08000c69 	.word	0x08000c69

0800008c <Ap_Menu_ShowMenu>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Ap_Menu_ShowMenu(void)
{
 800008c:	b538      	push	{r3, r4, r5, lr}
	u8 key;

	Lb_printf("\n\n");
 800008e:	f243 50ac 	movw	r0, #13740	; 0x35ac
 8000092:	f240 7471 	movw	r4, #1905	; 0x771
	Lb_printf("*******************************************************\n");
 8000096:	f243 55b0 	movw	r5, #13744	; 0x35b0
---------------------------------------------------------------------------*/
void Ap_Menu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 800009a:	f6c0 0400 	movt	r4, #2048	; 0x800
	Lb_printf("*******************************************************\n");
 800009e:	f6c0 0500 	movt	r5, #2048	; 0x800
---------------------------------------------------------------------------*/
void Ap_Menu_ShowMenu(void)
{
	u8 key;

	Lb_printf("\n\n");
 80000a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000a6:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000a8:	4628      	mov	r0, r5
 80000aa:	47a0      	blx	r4
	Lb_printf("                      MENU                             \n");
 80000ac:	f243 50ec 	movw	r0, #13804	; 0x35ec
 80000b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000b4:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 80000b6:	4628      	mov	r0, r5
 80000b8:	47a0      	blx	r4
	Lb_printf("* 1. LED +                                            *\n");
 80000ba:	f243 6028 	movw	r0, #13864	; 0x3628
 80000be:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000c2:	47a0      	blx	r4
	Lb_printf("* 2. LED -                                            *\n");
 80000c4:	f243 6064 	movw	r0, #13924	; 0x3664
 80000c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000cc:	47a0      	blx	r4
	Lb_printf("* 3. PWM                                              *\n");
 80000ce:	f243 60a0 	movw	r0, #13984	; 0x36a0
 80000d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000d6:	47a0      	blx	r4
	Lb_printf("* 4. DHT11                                            *\n");
 80000d8:	f243 60dc 	movw	r0, #14044	; 0x36dc
 80000dc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000e0:	47a0      	blx	r4
	Lb_printf("* 5.                                                  *\n");
 80000e2:	f243 7018 	movw	r0, #14104	; 0x3718
 80000e6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000ea:	47a0      	blx	r4
	Lb_printf("* 6.                                                  *\n");
 80000ec:	f243 7054 	movw	r0, #14164	; 0x3754
 80000f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000f4:	47a0      	blx	r4
	Lb_printf("* 7.                                                  *\n");
 80000f6:	f243 7090 	movw	r0, #14224	; 0x3790
 80000fa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80000fe:	47a0      	blx	r4
	Lb_printf("* 8.                                                  *\n");
 8000100:	f243 70cc 	movw	r0, #14284	; 0x37cc
 8000104:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000108:	47a0      	blx	r4
	Lb_printf("* 9.                                                  *\n");
 800010a:	f643 0008 	movw	r0, #14344	; 0x3808
 800010e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000112:	47a0      	blx	r4
	Lb_printf("* m.  Menu                                            *\n");
 8000114:	f643 0044 	movw	r0, #14404	; 0x3844
 8000118:	f6c0 0000 	movt	r0, #2048	; 0x800
 800011c:	47a0      	blx	r4
	Lb_printf("*******************************************************\n");
 800011e:	4628      	mov	r0, r5
 8000120:	47a0      	blx	r4
	Lb_printf("\n");
 8000122:	f643 00a4 	movw	r0, #14500	; 0x38a4
 8000126:	f6c0 0000 	movt	r0, #2048	; 0x800
 800012a:	47a0      	blx	r4
 800012c:	bd38      	pop	{r3, r4, r5, pc}
 800012e:	bf00      	nop

08000130 <Ap_Menu_GetCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_Menu_GetCmd(void)
{
 8000130:	b538      	push	{r3, r4, r5, lr}
	u8  key;
	

	Lb_printf(">> ");
 8000132:	f643 0080 	movw	r0, #14464	; 0x3880
 8000136:	f240 7471 	movw	r4, #1905	; 0x771
 800013a:	f6c0 0400 	movt	r4, #2048	; 0x800
 800013e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000142:	47a0      	blx	r4

    key=get_byte();
 8000144:	f640 3381 	movw	r3, #2945	; 0xb81
 8000148:	f6c0 0300 	movt	r3, #2048	; 0x800
 800014c:	4798      	blx	r3
 800014e:	4605      	mov	r5, r0
	
	Lb_printf("\n");
 8000150:	f643 00a4 	movw	r0, #14500	; 0x38a4
 8000154:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000158:	47a0      	blx	r4
	
    return key;
}
 800015a:	4628      	mov	r0, r5
 800015c:	bd38      	pop	{r3, r4, r5, pc}
 800015e:	bf00      	nop

08000160 <Ap_Menu_ExeCmd>:
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_Menu_ExeCmd(void)
{
 8000160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if( ExeFirst == TRUE )
	{
		Ap_Menu_ShowMenu();		

    	Hw_Timer_Set  ( HW_TIMER_CH_LED, 10, LOOP_TIME, Exam_LED_Tick, NULL );
 8000164:	2400      	movs	r4, #0
     ARG     : void
     RET     : 
				u8 : 눌려진 메뉴키 데이터 
---------------------------------------------------------------------------*/
u8 Ap_Menu_ExeCmd(void)
{
 8000166:	b082      	sub	sp, #8
    HW_MPU6050_DATA_OBJ MPU6050_Data;


	if( ExeFirst == TRUE )
	{
		Ap_Menu_ShowMenu();		
 8000168:	4f6c      	ldr	r7, [pc, #432]	; (800031c <Ap_Menu_ExeCmd+0x1bc>)
 800016a:	47b8      	blx	r7

    	Hw_Timer_Set  ( HW_TIMER_CH_LED, 10, LOOP_TIME, Exam_LED_Tick, NULL );
 800016c:	4d6c      	ldr	r5, [pc, #432]	; (8000320 <Ap_Menu_ExeCmd+0x1c0>)
 800016e:	4620      	mov	r0, r4
 8000170:	210a      	movs	r1, #10
 8000172:	2202      	movs	r2, #2
 8000174:	4b6b      	ldr	r3, [pc, #428]	; (8000324 <Ap_Menu_ExeCmd+0x1c4>)
 8000176:	9400      	str	r4, [sp, #0]
 8000178:	47a8      	blx	r5
    	Hw_Timer_Start( HW_TIMER_CH_LED );            
 800017a:	4620      	mov	r0, r4
 800017c:	4b6a      	ldr	r3, [pc, #424]	; (8000328 <Ap_Menu_ExeCmd+0x1c8>)
 800017e:	4798      	blx	r3
 8000180:	4c6a      	ldr	r4, [pc, #424]	; (800032c <Ap_Menu_ExeCmd+0x1cc>)
          		Hw_Pwm_SetPercent(0, Exam_Pwm_Value);

               break; 

           case '4':
           		Lb_printf("H : %d, T : %d \n", Hw_DHT11_GetHumidity(), Hw_DHT11_GetTemperature() );
 8000182:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800034c <Ap_Menu_ExeCmd+0x1ec>
 8000186:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8000350 <Ap_Menu_ExeCmd+0x1f0>
 800018a:	4d69      	ldr	r5, [pc, #420]	; (8000330 <Ap_Menu_ExeCmd+0x1d0>)
           		
          		Lb_printf("LED Delay %d ms \n", Exam_LED_TickDelay*10);
				break;

           case '3':    
           		Exam_Pwm_Value += 5;
 800018c:	4e69      	ldr	r6, [pc, #420]	; (8000334 <Ap_Menu_ExeCmd+0x1d4>)

    	Hw_Timer_Set  ( HW_TIMER_CH_LED, 10, LOOP_TIME, Exam_LED_Tick, NULL );
    	Hw_Timer_Start( HW_TIMER_CH_LED );            
	}

    while( (key = Ap_Menu_GetCmd()) != 0 )
 800018e:	47a0      	blx	r4
 8000190:	4603      	mov	r3, r0
 8000192:	2800      	cmp	r0, #0
 8000194:	f000 808e 	beq.w	80002b4 <Ap_Menu_ExeCmd+0x154>
    {
        switch(key)
 8000198:	f1a3 0031 	sub.w	r0, r3, #49	; 0x31
 800019c:	283c      	cmp	r0, #60	; 0x3c
 800019e:	d8f6      	bhi.n	800018e <Ap_Menu_ExeCmd+0x2e>
 80001a0:	a301      	add	r3, pc, #4	; (adr r3, 80001a8 <Ap_Menu_ExeCmd+0x48>)
 80001a2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80001a6:	bf00      	nop
 80001a8:	080002f3 	.word	0x080002f3
 80001ac:	080002d9 	.word	0x080002d9
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	0800029d 	.word	0x0800029d
 80001b8:	0800018f 	.word	0x0800018f
 80001bc:	0800018f 	.word	0x0800018f
 80001c0:	0800018f 	.word	0x0800018f
 80001c4:	0800018f 	.word	0x0800018f
 80001c8:	0800018f 	.word	0x0800018f
 80001cc:	0800018f 	.word	0x0800018f
 80001d0:	0800018f 	.word	0x0800018f
 80001d4:	0800018f 	.word	0x0800018f
 80001d8:	0800018f 	.word	0x0800018f
 80001dc:	0800018f 	.word	0x0800018f
 80001e0:	0800018f 	.word	0x0800018f
 80001e4:	0800018f 	.word	0x0800018f
 80001e8:	0800018f 	.word	0x0800018f
 80001ec:	0800018f 	.word	0x0800018f
 80001f0:	0800018f 	.word	0x0800018f
 80001f4:	0800018f 	.word	0x0800018f
 80001f8:	0800018f 	.word	0x0800018f
 80001fc:	0800018f 	.word	0x0800018f
 8000200:	0800018f 	.word	0x0800018f
 8000204:	0800018f 	.word	0x0800018f
 8000208:	0800018f 	.word	0x0800018f
 800020c:	0800018f 	.word	0x0800018f
 8000210:	0800018f 	.word	0x0800018f
 8000214:	0800018f 	.word	0x0800018f
 8000218:	0800030d 	.word	0x0800030d
 800021c:	0800018f 	.word	0x0800018f
 8000220:	0800018f 	.word	0x0800018f
 8000224:	0800018f 	.word	0x0800018f
 8000228:	0800018f 	.word	0x0800018f
 800022c:	0800018f 	.word	0x0800018f
 8000230:	0800018f 	.word	0x0800018f
 8000234:	0800018f 	.word	0x0800018f
 8000238:	0800018f 	.word	0x0800018f
 800023c:	0800018f 	.word	0x0800018f
 8000240:	0800018f 	.word	0x0800018f
 8000244:	0800018f 	.word	0x0800018f
 8000248:	0800018f 	.word	0x0800018f
 800024c:	0800018f 	.word	0x0800018f
 8000250:	0800018f 	.word	0x0800018f
 8000254:	0800018f 	.word	0x0800018f
 8000258:	0800018f 	.word	0x0800018f
 800025c:	0800018f 	.word	0x0800018f
 8000260:	0800018f 	.word	0x0800018f
 8000264:	0800018f 	.word	0x0800018f
 8000268:	0800018f 	.word	0x0800018f
 800026c:	0800018f 	.word	0x0800018f
 8000270:	0800018f 	.word	0x0800018f
 8000274:	0800018f 	.word	0x0800018f
 8000278:	0800018f 	.word	0x0800018f
 800027c:	0800018f 	.word	0x0800018f
 8000280:	0800018f 	.word	0x0800018f
 8000284:	0800018f 	.word	0x0800018f
 8000288:	0800018f 	.word	0x0800018f
 800028c:	0800018f 	.word	0x0800018f
 8000290:	0800018f 	.word	0x0800018f
 8000294:	0800018f 	.word	0x0800018f
 8000298:	0800030d 	.word	0x0800030d
          		Hw_Pwm_SetPercent(0, Exam_Pwm_Value);

               break; 

           case '4':
           		Lb_printf("H : %d, T : %d \n", Hw_DHT11_GetHumidity(), Hw_DHT11_GetTemperature() );
 800029c:	47c8      	blx	r9
 800029e:	4682      	mov	sl, r0
 80002a0:	47c0      	blx	r8
 80002a2:	4651      	mov	r1, sl
 80002a4:	4602      	mov	r2, r0
 80002a6:	4824      	ldr	r0, [pc, #144]	; (8000338 <Ap_Menu_ExeCmd+0x1d8>)
 80002a8:	47a8      	blx	r5

    	Hw_Timer_Set  ( HW_TIMER_CH_LED, 10, LOOP_TIME, Exam_LED_Tick, NULL );
    	Hw_Timer_Start( HW_TIMER_CH_LED );            
	}

    while( (key = Ap_Menu_GetCmd()) != 0 )
 80002aa:	47a0      	blx	r4
 80002ac:	4603      	mov	r3, r0
 80002ae:	2800      	cmp	r0, #0
 80002b0:	f47f af72 	bne.w	8000198 <Ap_Menu_ExeCmd+0x38>
               break;
        }
    }
    
    return key;
}
 80002b4:	b002      	add	sp, #8
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
           		
          		Lb_printf("LED Delay %d ms \n", Exam_LED_TickDelay*10);
				break;

           case '3':    
           		Exam_Pwm_Value += 5;
 80002ba:	8831      	ldrh	r1, [r6, #0]
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <Ap_Menu_ExeCmd+0x1d4>)
 80002be:	3105      	adds	r1, #5
 80002c0:	b289      	uxth	r1, r1

           		if( Exam_Pwm_Value > 100 ) Exam_Pwm_Value = 0;
 80002c2:	2964      	cmp	r1, #100	; 0x64
 80002c4:	bf88      	it	hi
 80002c6:	2100      	movhi	r1, #0

          		Lb_printf("PWM Duty %d \n", Exam_Pwm_Value); 
 80002c8:	481c      	ldr	r0, [pc, #112]	; (800033c <Ap_Menu_ExeCmd+0x1dc>)
				break;

           case '3':    
           		Exam_Pwm_Value += 5;

           		if( Exam_Pwm_Value > 100 ) Exam_Pwm_Value = 0;
 80002ca:	8019      	strh	r1, [r3, #0]

          		Lb_printf("PWM Duty %d \n", Exam_Pwm_Value); 
 80002cc:	47a8      	blx	r5
          		Hw_Pwm_SetPercent(0, Exam_Pwm_Value);
 80002ce:	2000      	movs	r0, #0
 80002d0:	8831      	ldrh	r1, [r6, #0]
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <Ap_Menu_ExeCmd+0x1e0>)
 80002d4:	4798      	blx	r3

               break; 
 80002d6:	e75a      	b.n	800018e <Ap_Menu_ExeCmd+0x2e>
          		Lb_printf("LED Delay %d ms \n", Exam_LED_TickDelay*10);

               	break;

           case '2':
           		if( Exam_LED_TickDelay >= 10 ) Exam_LED_TickDelay -= 10;
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <Ap_Menu_ExeCmd+0x1e4>)
 80002da:	8819      	ldrh	r1, [r3, #0]
 80002dc:	2909      	cmp	r1, #9
 80002de:	d902      	bls.n	80002e6 <Ap_Menu_ExeCmd+0x186>
 80002e0:	390a      	subs	r1, #10
 80002e2:	b289      	uxth	r1, r1
 80002e4:	8019      	strh	r1, [r3, #0]
           		
          		Lb_printf("LED Delay %d ms \n", Exam_LED_TickDelay*10);
 80002e6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80002ea:	4817      	ldr	r0, [pc, #92]	; (8000348 <Ap_Menu_ExeCmd+0x1e8>)
 80002ec:	0049      	lsls	r1, r1, #1
 80002ee:	47a8      	blx	r5
				break;
 80002f0:	e74d      	b.n	800018e <Ap_Menu_ExeCmd+0x2e>
    while( (key = Ap_Menu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Exam_LED_TickDelay += 10;
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <Ap_Menu_ExeCmd+0x1e4>)
 80002f4:	8813      	ldrh	r3, [r2, #0]
 80002f6:	330a      	adds	r3, #10
 80002f8:	b29b      	uxth	r3, r3

           		if( Exam_LED_TickDelay > 100 ) Exam_LED_TickDelay = 100;
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	d808      	bhi.n	8000310 <Ap_Menu_ExeCmd+0x1b0>
 80002fe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    while( (key = Ap_Menu_GetCmd()) != 0 )
    {
        switch(key)
        {
           case '1':
           		Exam_LED_TickDelay += 10;
 8000302:	8013      	strh	r3, [r2, #0]
 8000304:	0049      	lsls	r1, r1, #1

           		if( Exam_LED_TickDelay > 100 ) Exam_LED_TickDelay = 100;

          		Lb_printf("LED Delay %d ms \n", Exam_LED_TickDelay*10);
 8000306:	4810      	ldr	r0, [pc, #64]	; (8000348 <Ap_Menu_ExeCmd+0x1e8>)
 8000308:	47a8      	blx	r5

               	break;
 800030a:	e740      	b.n	800018e <Ap_Menu_ExeCmd+0x2e>
           case '0':
               break;

			case 'm':
			case 'M':
				Ap_Menu_ShowMenu();
 800030c:	47b8      	blx	r7
				break;
 800030e:	e73e      	b.n	800018e <Ap_Menu_ExeCmd+0x2e>
        switch(key)
        {
           case '1':
           		Exam_LED_TickDelay += 10;

           		if( Exam_LED_TickDelay > 100 ) Exam_LED_TickDelay = 100;
 8000310:	2364      	movs	r3, #100	; 0x64
 8000312:	8013      	strh	r3, [r2, #0]
 8000314:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000318:	e7f5      	b.n	8000306 <Ap_Menu_ExeCmd+0x1a6>
 800031a:	bf00      	nop
 800031c:	0800008d 	.word	0x0800008d
 8000320:	08000ec1 	.word	0x08000ec1
 8000324:	08000061 	.word	0x08000061
 8000328:	08000ee1 	.word	0x08000ee1
 800032c:	08000131 	.word	0x08000131
 8000330:	08000771 	.word	0x08000771
 8000334:	20000202 	.word	0x20000202
 8000338:	080038a8 	.word	0x080038a8
 800033c:	08003898 	.word	0x08003898
 8000340:	080019c5 	.word	0x080019c5
 8000344:	20000000 	.word	0x20000000
 8000348:	08003884 	.word	0x08003884
 800034c:	08001bb5 	.word	0x08001bb5
 8000350:	08001bc5 	.word	0x08001bc5

08000354 <print_byte_out>:




void print_byte_out(unsigned int c)
{
 8000354:	b538      	push	{r3, r4, r5, lr}
	if( StrPrintMode == LB_PRINT_OUT_UART )
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <print_byte_out+0x28>)




void print_byte_out(unsigned int c)
{
 8000358:	4605      	mov	r5, r0
	if( StrPrintMode == LB_PRINT_OUT_UART )
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b153      	cbz	r3, 8000374 <print_byte_out+0x20>
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800035e:	4a08      	ldr	r2, [pc, #32]	; (8000380 <print_byte_out+0x2c>)
 8000360:	4908      	ldr	r1, [pc, #32]	; (8000384 <print_byte_out+0x30>)
 8000362:	6814      	ldr	r4, [r2, #0]
 8000364:	6808      	ldr	r0, [r1, #0]
 8000366:	1c63      	adds	r3, r4, #1
 8000368:	5505      	strb	r5, [r0, r4]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800036a:	6809      	ldr	r1, [r1, #0]
	{
		print_byte(c);
	}
	else
	{
		pStrPrintBuf[ StrPrintBufIndex++ ] = c; 
 800036c:	6013      	str	r3, [r2, #0]
		pStrPrintBuf[ StrPrintBufIndex   ] = 0; 
 800036e:	2200      	movs	r2, #0
 8000370:	54ca      	strb	r2, [r1, r3]
 8000372:	bd38      	pop	{r3, r4, r5, pc}

void print_byte_out(unsigned int c)
{
	if( StrPrintMode == LB_PRINT_OUT_UART )
	{
		print_byte(c);
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <print_byte_out+0x34>)
 8000376:	4798      	blx	r3
 8000378:	bd38      	pop	{r3, r4, r5, pc}
 800037a:	bf00      	nop
 800037c:	20000208 	.word	0x20000208
 8000380:	20000204 	.word	0x20000204
 8000384:	200002d0 	.word	0x200002d0
 8000388:	08000b45 	.word	0x08000b45

0800038c <PrintString.part.0>:
                }
        }
        return;
}

void PrintString(char *fmt, char *s)
 800038c:	b538      	push	{r3, r4, r5, lr}
 800038e:	4604      	mov	r4, r0
{
        if (!fmt || !s) return;
        while (*s) print_byte_out(*s++);
 8000390:	7800      	ldrb	r0, [r0, #0]
 8000392:	b128      	cbz	r0, 80003a0 <PrintString.part.0+0x14>
 8000394:	4d03      	ldr	r5, [pc, #12]	; (80003a4 <PrintString.part.0+0x18>)
 8000396:	47a8      	blx	r5
 8000398:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800039c:	2800      	cmp	r0, #0
 800039e:	d1fa      	bne.n	8000396 <PrintString.part.0+0xa>
 80003a0:	bd38      	pop	{r3, r4, r5, pc}
 80003a2:	bf00      	nop
 80003a4:	08000355 	.word	0x08000355

080003a8 <DecToLong>:
// 역할 : 10진수 문자열 s에서 정수를 만들어 retval이 가리키는 위치에 기록.
// 매개 : s      : 변환할 문자열의 주소.
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
 80003a8:	b430      	push	{r4, r5}
        long remainder;
        if (!s || !s[0]) return false;
 80003aa:	b1d0      	cbz	r0, 80003e2 <DecToLong+0x3a>
 80003ac:	7803      	ldrb	r3, [r0, #0]
 80003ae:	b1d3      	cbz	r3, 80003e6 <DecToLong+0x3e>


        for (*retval=0; *s; s++){
 80003b0:	2300      	movs	r3, #0
 80003b2:	600b      	str	r3, [r1, #0]
 80003b4:	7802      	ldrb	r2, [r0, #0]
 80003b6:	b19a      	cbz	r2, 80003e0 <DecToLong+0x38>
                if (*s < '0' || *s > '9') return false;
 80003b8:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80003bc:	b2e2      	uxtb	r2, r4
 80003be:	2a09      	cmp	r2, #9
 80003c0:	d902      	bls.n	80003c8 <DecToLong+0x20>
 80003c2:	e012      	b.n	80003ea <DecToLong+0x42>
 80003c4:	2d09      	cmp	r5, #9
 80003c6:	d810      	bhi.n	80003ea <DecToLong+0x42>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
 80003c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80003cc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80003d0:	600b      	str	r3, [r1, #0]
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80003d2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
                if (*s < '0' || *s > '9') return false;
 80003d6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 80003da:	b2e5      	uxtb	r5, r4
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;


        for (*retval=0; *s; s++){
 80003dc:	2a00      	cmp	r2, #0
 80003de:	d1f1      	bne.n	80003c4 <DecToLong+0x1c>
                remainder = *s - '0';
                *retval = *retval * 10 + remainder;
        }


        return true;
 80003e0:	2001      	movs	r0, #1
}        // DecToLong.
 80003e2:	bc30      	pop	{r4, r5}
 80003e4:	4770      	bx	lr
//        retval : 변환된 값이 기록될 주소.
// 반환 : return : 1 : success                0 : failure.
// 주의 :
int DecToLong(char *s, long *retval){
        long remainder;
        if (!s || !s[0]) return false;
 80003e6:	4618      	mov	r0, r3
 80003e8:	e7fb      	b.n	80003e2 <DecToLong+0x3a>


        for (*retval=0; *s; s++){
                if (*s < '0' || *s > '9') return false;
 80003ea:	2000      	movs	r0, #0
 80003ec:	e7f9      	b.n	80003e2 <DecToLong+0x3a>
 80003ee:	bf00      	nop

080003f0 <PrintDec>:
        return;
}


void PrintDec(char *fmt, int l)
{
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003f4:	2300      	movs	r3, #0
        return;
}


void PrintDec(char *fmt, int l)
{
 80003f6:	b084      	sub	sp, #16
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
 80003f8:	f1b1 0800 	subs.w	r8, r1, #0
void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
	long        flagcnt=0;              	// "%08lx"에서 "8"을 찾아서 long형으로.
 80003fc:	9300      	str	r3, [sp, #0]
	bool        leading_zero=true;			// long형의 data를 출력하기 위한 변수.
	long        divisor, result, remainder;
	char        sign = 0;
 80003fe:	bfa8      	it	ge
 8000400:	4699      	movge	r9, r3
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000402:	7803      	ldrb	r3, [r0, #0]
        return;
}


void PrintDec(char *fmt, int l)
{
 8000404:	4682      	mov	sl, r0
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
		l = -l;	
 8000406:	bfbc      	itt	lt
 8000408:	f1c8 0800 	rsblt	r8, r8, #0
	long        divisor, result, remainder;
	char        sign = 0;

	if( l < 0 )
	{
		sign = 1;
 800040c:	f04f 0901 	movlt.w	r9, #1
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000410:	2b00      	cmp	r3, #0
 8000412:	f000 80b9 	beq.w	8000588 <PrintDec+0x198>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8000416:	2500      	movs	r5, #0


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 8000418:	2b64      	cmp	r3, #100	; 0x64
 800041a:	d028      	beq.n	800046e <PrintDec+0x7e>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
 800041c:	4e5b      	ldr	r6, [pc, #364]	; (800058c <PrintDec+0x19c>)


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
 800041e:	462c      	mov	r4, r5
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000420:	462f      	mov	r7, r5

	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
 8000422:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000426:	2a08      	cmp	r2, #8
 8000428:	d877      	bhi.n	800051a <PrintDec+0x12a>
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 800042a:	f81a 2004 	ldrb.w	r2, [sl, r4]
 800042e:	eb0a 0104 	add.w	r1, sl, r4
 8000432:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8000436:	2b09      	cmp	r3, #9
 8000438:	a801      	add	r0, sp, #4
 800043a:	f04f 0300 	mov.w	r3, #0
 800043e:	d809      	bhi.n	8000454 <PrintDec+0x64>
			{
				tol[j] = s[i++];
 8000440:	54c2      	strb	r2, [r0, r3]
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000442:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			{
				tol[j] = s[i++];
 8000446:	3401      	adds	r4, #1
	for (i=0; (c=s[i]) != 0; i++)
	{
		if (c=='d') break;
		else if (c>='1' && c<='9')
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
 8000448:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800044c:	3301      	adds	r3, #1
 800044e:	f1be 0f09 	cmp.w	lr, #9
 8000452:	d9f5      	bls.n	8000440 <PrintDec+0x50>
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 8000454:	aa04      	add	r2, sp, #16
 8000456:	18d3      	adds	r3, r2, r3
			i--;
			DecToLong(tol, &flagcnt);
 8000458:	4669      	mov	r1, sp
		{
			for (j=0; s[i]>='0' && s[i]<='9'; j++)
			{
				tol[j] = s[i++];
			}
			tol[j] = '\0';
 800045a:	f803 7c0c 	strb.w	r7, [r3, #-12]
			i--;
 800045e:	3c01      	subs	r4, #1
			DecToLong(tol, &flagcnt);
 8000460:	47b0      	blx	r6
		l = -l;	
	}


	// fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
	for (i=0; (c=s[i]) != 0; i++)
 8000462:	3401      	adds	r4, #1
 8000464:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8000468:	b10b      	cbz	r3, 800046e <PrintDec+0x7e>
	{
		if (c=='d') break;
 800046a:	2b64      	cmp	r3, #100	; 0x64
 800046c:	d1d9      	bne.n	8000422 <PrintDec+0x32>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 800046e:	f1b9 0f00 	cmp.w	r9, #0
 8000472:	f040 8085 	bne.w	8000580 <PrintDec+0x190>


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000476:	9800      	ldr	r0, [sp, #0]
 8000478:	2800      	cmp	r0, #0
 800047a:	d052      	beq.n	8000522 <PrintDec+0x132>
	{
                if (flagcnt>9) flagcnt=9;
 800047c:	2809      	cmp	r0, #9
 800047e:	dd78      	ble.n	8000572 <PrintDec+0x182>
 8000480:	2009      	movs	r0, #9
 8000482:	9000      	str	r0, [sp, #0]
 8000484:	2206      	movs	r2, #6
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000486:	2107      	movs	r1, #7
 8000488:	230a      	movs	r3, #10
                retval *= num;
 800048a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 800048e:	3901      	subs	r1, #1
                retval *= num;
 8000490:	005b      	lsls	r3, r3, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 8000492:	1c4c      	adds	r4, r1, #1
 8000494:	d1f9      	bne.n	800048a <PrintDec+0x9a>

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 8000496:	fb98 f1f3 	sdiv	r1, r8, r3
{
        long retval=num;
        cnt--;


        while (cnt--){
 800049a:	240a      	movs	r4, #10
 800049c:	2802      	cmp	r0, #2

	// 위의 flag에 따라 출력.
	if (flagcnt)
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.
 800049e:	fb03 8811 	mls	r8, r3, r1, r8
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004a2:	d005      	beq.n	80004b0 <PrintDec+0xc0>
                retval *= num;
 80004a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004a8:	3a01      	subs	r2, #1
                retval *= num;
 80004aa:	0064      	lsls	r4, r4, #1
{
        long retval=num;
        cnt--;


        while (cnt--){
 80004ac:	1c53      	adds	r3, r2, #1
 80004ae:	d1f9      	bne.n	80004a4 <PrintDec+0xb4>
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004b0:	f246 6767 	movw	r7, #26215	; 0x6667
 80004b4:	4e36      	ldr	r6, [pc, #216]	; (8000590 <PrintDec+0x1a0>)
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 80004b6:	f04f 0901 	mov.w	r9, #1
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004ba:	f2c6 6766 	movt	r7, #26214	; 0x6666
 80004be:	e00d      	b.n	80004dc <PrintDec+0xec>


                        if (result!=0 || divisor==1) leading_zero = false;


                        if (leading_zero==true){
 80004c0:	f1b9 0f00 	cmp.w	r9, #0
 80004c4:	d01c      	beq.n	8000500 <PrintDec+0x110>
                                if (flag0)        print_byte_out('0');
 80004c6:	2030      	movs	r0, #48	; 0x30
 80004c8:	b905      	cbnz	r5, 80004cc <PrintDec+0xdc>
                                else                print_byte_out(' ');
 80004ca:	2020      	movs	r0, #32
 80004cc:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 80004ce:	fb87 2304 	smull	r2, r3, r7, r4
 80004d2:	17e4      	asrs	r4, r4, #31
 80004d4:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80004d8:	2c00      	cmp	r4, #0
 80004da:	dd1b      	ble.n	8000514 <PrintDec+0x124>
                        result = remainder/divisor;
 80004dc:	fb98 f3f4 	sdiv	r3, r8, r4

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 80004e0:	b2d8      	uxtb	r0, r3
 80004e2:	3030      	adds	r0, #48	; 0x30
                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 80004e4:	f1b4 0e01 	subs.w	lr, r4, #1
 80004e8:	f1de 0200 	rsbs	r2, lr, #0
 80004ec:	eb52 020e 	adcs.w	r2, r2, lr
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	bf18      	it	ne
 80004f4:	f042 0201 	orrne.w	r2, r2, #1
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 80004f8:	fb04 8813 	mls	r8, r4, r3, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 80004fc:	2a00      	cmp	r2, #0
 80004fe:	d0df      	beq.n	80004c0 <PrintDec+0xd0>

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 8000500:	47b0      	blx	r6
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000502:	fb87 2304 	smull	r2, r3, r7, r4
 8000506:	17e4      	asrs	r4, r4, #31
 8000508:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800050c:	2c00      	cmp	r4, #0

                        if (leading_zero==true){
                                if (flag0)        print_byte_out('0');
                                else                print_byte_out(' ');
                        }
                        else print_byte_out((char)(result)+'0');
 800050e:	f04f 0900 	mov.w	r9, #0
	{
                if (flagcnt>9) flagcnt=9;
                remainder = l%(Power(10, flagcnt));        // flagcnt보다 윗자리의 수는 걸러냄. 199에 flagcnt==2이면, 99만.


                for (divisor=Power(10, flagcnt-1); divisor>0; divisor/=10){
 8000512:	dce3      	bgt.n	80004dc <PrintDec+0xec>
                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
                }
        }
        return;
}
 8000514:	b004      	add	sp, #16
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			}
			tol[j] = '\0';
			i--;
			DecToLong(tol, &flagcnt);
		}
		else if (c=='0') flag0=true;
 800051a:	2b30      	cmp	r3, #48	; 0x30
 800051c:	bf08      	it	eq
 800051e:	2501      	moveq	r5, #1
 8000520:	e79f      	b.n	8000462 <PrintDec+0x72>

	if( sign == 1 ) print_byte_out('-');


	// 위의 flag에 따라 출력.
	if (flagcnt)
 8000522:	f44f 444a 	mov.w	r4, #51712	; 0xca00
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000526:	f246 6767 	movw	r7, #26215	; 0x6667
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800052a:	4e19      	ldr	r6, [pc, #100]	; (8000590 <PrintDec+0x1a0>)

	if( sign == 1 ) print_byte_out('-');


	// 위의 flag에 따라 출력.
	if (flagcnt)
 800052c:	250a      	movs	r5, #10
 800052e:	f6c3 349a 	movt	r4, #15258	; 0x3b9a
 8000532:	2101      	movs	r1, #1
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 8000534:	f2c6 6766 	movt	r7, #26214	; 0x6666
 8000538:	e008      	b.n	800054c <PrintDec+0x15c>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800053a:	47b0      	blx	r6
 800053c:	2100      	movs	r1, #0
                }
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
 800053e:	fb87 2304 	smull	r2, r3, r7, r4
 8000542:	17e4      	asrs	r4, r4, #31
 8000544:	3d01      	subs	r5, #1
 8000546:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800054a:	d0e3      	beq.n	8000514 <PrintDec+0x124>
                        result = remainder/divisor;
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 800054c:	1e60      	subs	r0, r4, #1
 800054e:	4242      	negs	r2, r0
        } else {
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
 8000550:	fb98 f3f4 	sdiv	r3, r8, r4
                        remainder %= divisor;


                        if (result!=0 || divisor==1) leading_zero = false;
 8000554:	4142      	adcs	r2, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	bf18      	it	ne
 800055a:	f042 0201 	orrne.w	r2, r2, #1
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800055e:	b2d8      	uxtb	r0, r3
 8000560:	3030      	adds	r0, #48	; 0x30
                remainder = l;


                for (divisor=1000000000; divisor>0; divisor/=10){
                        result = remainder/divisor;
                        remainder %= divisor;
 8000562:	fb04 8813 	mls	r8, r4, r3, r8


                        if (result!=0 || divisor==1) leading_zero = false;
 8000566:	2a00      	cmp	r2, #0
 8000568:	d1e7      	bne.n	800053a <PrintDec+0x14a>
                        if (leading_zero==false) print_byte_out((char)(result)+'0');
 800056a:	2900      	cmp	r1, #0
 800056c:	d0e5      	beq.n	800053a <PrintDec+0x14a>
 800056e:	2101      	movs	r1, #1
 8000570:	e7e5      	b.n	800053e <PrintDec+0x14e>
}

int Power(int num, int cnt)
{
        long retval=num;
        cnt--;
 8000572:	1e43      	subs	r3, r0, #1


        while (cnt--){
 8000574:	1e81      	subs	r1, r0, #2
 8000576:	1ec2      	subs	r2, r0, #3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d185      	bne.n	8000488 <PrintDec+0x98>
        return;
}

int Power(int num, int cnt)
{
        long retval=num;
 800057c:	230a      	movs	r3, #10
 800057e:	e78a      	b.n	8000496 <PrintDec+0xa6>
		else if (c=='0') flag0=true;
		else if (c=='l') flagl=true;
		else continue;
	}

	if( sign == 1 ) print_byte_out('-');
 8000580:	202d      	movs	r0, #45	; 0x2d
 8000582:	4e03      	ldr	r6, [pc, #12]	; (8000590 <PrintDec+0x1a0>)
 8000584:	47b0      	blx	r6
 8000586:	e776      	b.n	8000476 <PrintDec+0x86>

void PrintDec(char *fmt, int l)
{
	int        i, j;
	char        c, *s=fmt, tol[10];
	bool        flag0=false, flagl=false;	// "%08lx"에서 '0', 'l'의 존재 여부.
 8000588:	461d      	mov	r5, r3
 800058a:	e770      	b.n	800046e <PrintDec+0x7e>
 800058c:	080003a9 	.word	0x080003a9
 8000590:	08000355 	.word	0x08000355

08000594 <PrintHex>:
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 8000598:	7803      	ldrb	r3, [r0, #0]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800059a:	b087      	sub	sp, #28
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 800059c:	2600      	movs	r6, #0
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 800059e:	4681      	mov	r9, r0
 80005a0:	9101      	str	r1, [sp, #4]
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
 80005a2:	9602      	str	r6, [sp, #8]
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 8085 	beq.w	80006b4 <PrintHex+0x120>
                if (c=='x') break;
 80005aa:	2b78      	cmp	r3, #120	; 0x78
 80005ac:	f000 8082 	beq.w	80006b4 <PrintHex+0x120>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
 80005b0:	4f6d      	ldr	r7, [pc, #436]	; (8000768 <PrintHex+0x1d4>)
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
 80005b2:	4634      	mov	r4, r6
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80005b4:	46b0      	mov	r8, r6


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
 80005b6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80005ba:	2a08      	cmp	r2, #8
 80005bc:	d876      	bhi.n	80006ac <PrintHex+0x118>
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80005be:	f819 2004 	ldrb.w	r2, [r9, r4]
 80005c2:	eb09 0104 	add.w	r1, r9, r4
 80005c6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	a803      	add	r0, sp, #12
 80005ce:	f04f 0300 	mov.w	r3, #0
 80005d2:	d808      	bhi.n	80005e6 <PrintHex+0x52>
                                tol[j] = s[i++];
 80005d4:	54c2      	strb	r2, [r0, r3]

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80005d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
                                tol[j] = s[i++];
 80005da:	3401      	adds	r4, #1

        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
 80005dc:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80005e0:	3301      	adds	r3, #1
 80005e2:	2d09      	cmp	r5, #9
 80005e4:	d9f6      	bls.n	80005d4 <PrintHex+0x40>
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80005e6:	aa06      	add	r2, sp, #24
 80005e8:	18d3      	adds	r3, r2, r3
                        i--;
                        DecToLong(tol, &flagcnt);
 80005ea:	a902      	add	r1, sp, #8
                if (c=='x') break;
                else if (c>='1' && c<='9'){
                        for (j=0; s[i]>='0' && s[i]<='9'; j++){
                                tol[j] = s[i++];
                        }
                        tol[j] = '\0';
 80005ec:	f803 8c0c 	strb.w	r8, [r3, #-12]
                        i--;
 80005f0:	3c01      	subs	r4, #1
                        DecToLong(tol, &flagcnt);
 80005f2:	47b8      	blx	r7
        char        uHex, lHex;
        int                cnt;                                                // "%5x"의 경우 5개만 출력하도록 출력한 개수.


        // fmt의 "%08lx"에서 '0', '8', 'l'을 해석.
        for (i=0; (c=s[i]) != 0; i++){
 80005f4:	3401      	adds	r4, #1
 80005f6:	f819 3004 	ldrb.w	r3, [r9, r4]
 80005fa:	b10b      	cbz	r3, 8000600 <PrintHex+0x6c>
                if (c=='x') break;
 80005fc:	2b78      	cmp	r3, #120	; 0x78
 80005fe:	d1da      	bne.n	80005b6 <PrintHex+0x22>
 8000600:	9a01      	ldr	r2, [sp, #4]
 8000602:	9b02      	ldr	r3, [sp, #8]
 8000604:	ba12      	rev	r2, r2
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 8000606:	9201      	str	r2, [sp, #4]
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
 8000608:	2b00      	cmp	r3, #0
 800060a:	d056      	beq.n	80006ba <PrintHex+0x126>
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 800060c:	07da      	lsls	r2, r3, #31
void PrintHex(char *fmt, int l){
        int                i, j;
        char        c, *s=fmt, tol[10];
        bool        flag0=false, flagl=false;        // flags.
        long        flagcnt=0;
        bool        leading_zero=true;
 800060e:	bf58      	it	pl
 8000610:	f04f 0801 	movpl.w	r8, #1
        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
        
        // 위의 flag에 따라 출력.
        if (flagcnt){
                if (flagcnt&0x01){        // flagcnt가 홀수 일때, upper를 무시, lower만 출력.
 8000614:	d521      	bpl.n	800065a <PrintHex+0xc6>
                        c = s[(8-(flagcnt+1))/2]; // 홀수 일때 그 위치를 포함하는 곳의 값을 가져 옵니다.
 8000616:	43db      	mvns	r3, r3
 8000618:	3308      	adds	r3, #8
 800061a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800061e:	aa06      	add	r2, sp, #24
 8000620:	eb02 0363 	add.w	r3, r2, r3, asr #1
                        
                        // lower 4 bits를 가져와서 ascii code로.
                        lHex = ((c>>0)&0x0f);
 8000624:	f813 3c14 	ldrb.w	r3, [r3, #-20]
                        if (lHex!=0) leading_zero=false;
 8000628:	f013 030f 	ands.w	r3, r3, #15
 800062c:	d00b      	beq.n	8000646 <PrintHex+0xb2>
                        if (lHex<10) lHex+='0';
 800062e:	2b09      	cmp	r3, #9
 8000630:	bf98      	it	ls
 8000632:	f103 0030 	addls.w	r0, r3, #48	; 0x30
 8000636:	d901      	bls.n	800063c <PrintHex+0xa8>
                        else         lHex+='A'-10;
 8000638:	f103 0037 	add.w	r0, r3, #55	; 0x37
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800063c:	4f4b      	ldr	r7, [pc, #300]	; (800076c <PrintHex+0x1d8>)
 800063e:	47b8      	blx	r7
 8000640:	f04f 0800 	mov.w	r8, #0
 8000644:	e006      	b.n	8000654 <PrintHex+0xc0>
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
 8000646:	2e00      	cmp	r6, #0
 8000648:	d07c      	beq.n	8000744 <PrintHex+0x1b0>
 800064a:	2030      	movs	r0, #48	; 0x30
 800064c:	4f47      	ldr	r7, [pc, #284]	; (800076c <PrintHex+0x1d8>)
 800064e:	47b8      	blx	r7
 8000650:	f04f 0801 	mov.w	r8, #1
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
                        
                        flagcnt--;
 8000654:	9b02      	ldr	r3, [sp, #8]
 8000656:	3b01      	subs	r3, #1
 8000658:	9302      	str	r3, [sp, #8]
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 800065a:	f1c3 0308 	rsb	r3, r3, #8
 800065e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8000662:	105c      	asrs	r4, r3, #1
 8000664:	2c03      	cmp	r4, #3
 8000666:	dc1e      	bgt.n	80006a6 <PrintHex+0x112>
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 8000668:	ab01      	add	r3, sp, #4
 800066a:	4f40      	ldr	r7, [pc, #256]	; (800076c <PrintHex+0x1d8>)
 800066c:	191c      	adds	r4, r3, r4
 800066e:	f10d 0908 	add.w	r9, sp, #8
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
                        c = s[i];
 8000672:	f814 3b01 	ldrb.w	r3, [r4], #1
                                
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000676:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
 800067a:	091b      	lsrs	r3, r3, #4
 800067c:	d04d      	beq.n	800071a <PrintHex+0x186>
                        if (uHex<10) uHex+='0';
 800067e:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 8000680:	bf88      	it	hi
 8000682:	f103 0037 	addhi.w	r0, r3, #55	; 0x37


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000686:	d969      	bls.n	800075c <PrintHex+0x1c8>
                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
 8000688:	47b8      	blx	r7
 800068a:	f04f 0800 	mov.w	r8, #0
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 800068e:	2d00      	cmp	r5, #0
 8000690:	d04b      	beq.n	800072a <PrintHex+0x196>
                        if (lHex<10) lHex+='0';
 8000692:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 8000694:	bf88      	it	hi
 8000696:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 800069a:	d959      	bls.n	8000750 <PrintHex+0x1bc>
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 800069c:	47b8      	blx	r7
 800069e:	f04f 0800 	mov.w	r8, #0
                        flagcnt--;
                }


                // byte단위의 data를 Hex로 출력.
                for (cnt=0, i=(8-flagcnt)/2; i<4; i++){
 80006a2:	454c      	cmp	r4, r9
 80006a4:	d1e5      	bne.n	8000672 <PrintHex+0xde>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
                }
        }
        return;
}
 80006a6:	b007      	add	sp, #28
 80006a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                        }
                        tol[j] = '\0';
                        i--;
                        DecToLong(tol, &flagcnt);
                }
                else if (c=='0') flag0=true;
 80006ac:	2b30      	cmp	r3, #48	; 0x30
 80006ae:	bf08      	it	eq
 80006b0:	2601      	moveq	r6, #1
 80006b2:	e79f      	b.n	80005f4 <PrintHex+0x60>
 80006b4:	9b01      	ldr	r3, [sp, #4]
 80006b6:	ba1b      	rev	r3, r3
                else continue;
        }


        s = (char *)(&l);
        l = SWAP32(l);                // little, big endian에 따라서.(big이 출력하기 쉬워 순서를 바꿈)
 80006b8:	9301      	str	r3, [sp, #4]
                }
        }
        return;
}

void PrintHex(char *fmt, int l){
 80006ba:	f10d 0603 	add.w	r6, sp, #3
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
                        c = s[i];
 80006be:	f816 3f01 	ldrb.w	r3, [r6, #1]!
                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(lHex);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2400      	movs	r4, #0
                for (i=0; i<4; i++){
                        c = s[i];
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 80006c6:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80006ca:	091b      	lsrs	r3, r3, #4
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80006cc:	4f27      	ldr	r7, [pc, #156]	; (800076c <PrintHex+0x1d8>)
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 80006ce:	d01e      	beq.n	800070e <PrintHex+0x17a>
                        if (uHex<10) uHex+='0';
 80006d0:	2b09      	cmp	r3, #9
                        else         uHex+='A'-10;
 80006d2:	bf88      	it	hi
 80006d4:	f103 0037 	addhi.w	r0, r3, #55	; 0x37
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 80006d8:	d93d      	bls.n	8000756 <PrintHex+0x1c2>
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 80006da:	47b8      	blx	r7
 80006dc:	2200      	movs	r2, #0
                        
                        if (lHex!=0 || i==3) leading_zero = false;
 80006de:	1c2b      	adds	r3, r5, #0
 80006e0:	bf18      	it	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2c03      	cmp	r4, #3
 80006e6:	bf08      	it	eq
 80006e8:	f043 0301 	orreq.w	r3, r3, #1
 80006ec:	b193      	cbz	r3, 8000714 <PrintHex+0x180>
                        if (lHex<10) lHex+='0';
 80006ee:	2d09      	cmp	r5, #9
                        else         lHex+='A'-10;
 80006f0:	bf88      	it	hi
 80006f2:	f105 0037 	addhi.w	r0, r5, #55	; 0x37
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 80006f6:	d934      	bls.n	8000762 <PrintHex+0x1ce>
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 80006f8:	47b8      	blx	r7
 80006fa:	2200      	movs	r2, #0
                        }
                        else print_byte_out(lHex);
                }
        }
        else {
                for (i=0; i<4; i++){
 80006fc:	3401      	adds	r4, #1
 80006fe:	2c04      	cmp	r4, #4
 8000700:	d0d1      	beq.n	80006a6 <PrintHex+0x112>
                        c = s[i];
 8000702:	f816 3f01 	ldrb.w	r3, [r6, #1]!
        
                        // get upper 4 bits and lower 4 bits.
                        uHex = ((c>>4)&0x0f);
                        lHex = ((c>>0)&0x0f);
 8000706:	f003 050f 	and.w	r5, r3, #15


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	d1e0      	bne.n	80006d0 <PrintHex+0x13c>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
 800070e:	b312      	cbz	r2, 8000756 <PrintHex+0x1c2>
 8000710:	2201      	movs	r2, #1
 8000712:	e7e4      	b.n	80006de <PrintHex+0x14a>
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;
                        if (!leading_zero) print_byte_out(lHex);
 8000714:	b32a      	cbz	r2, 8000762 <PrintHex+0x1ce>
 8000716:	2201      	movs	r2, #1
 8000718:	e7f0      	b.n	80006fc <PrintHex+0x168>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;


                        // upper 4 bits 출력.
                        if (leading_zero){
 800071a:	f1b8 0f00 	cmp.w	r8, #0
 800071e:	d01d      	beq.n	800075c <PrintHex+0x1c8>
                                if (flag0) print_byte_out('0');
 8000720:	b156      	cbz	r6, 8000738 <PrintHex+0x1a4>
 8000722:	2030      	movs	r0, #48	; 0x30
 8000724:	47b8      	blx	r7
                                else       print_byte_out(' ');
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
 8000726:	2d00      	cmp	r5, #0
 8000728:	d1b3      	bne.n	8000692 <PrintHex+0xfe>
                        if (lHex<10) lHex+='0';
                        else         lHex+='A'-10;


                        // lower 4 bits 출력.
                        if (leading_zero){
 800072a:	f1b8 0f00 	cmp.w	r8, #0
 800072e:	d00f      	beq.n	8000750 <PrintHex+0x1bc>
                                if (flag0) print_byte_out('0');
 8000730:	b12e      	cbz	r6, 800073e <PrintHex+0x1aa>
 8000732:	2030      	movs	r0, #48	; 0x30
 8000734:	47b8      	blx	r7
 8000736:	e7b4      	b.n	80006a2 <PrintHex+0x10e>


                        // upper 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000738:	2020      	movs	r0, #32
 800073a:	47b8      	blx	r7
 800073c:	e7a7      	b.n	800068e <PrintHex+0xfa>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 800073e:	2020      	movs	r0, #32
 8000740:	47b8      	blx	r7
 8000742:	e7ae      	b.n	80006a2 <PrintHex+0x10e>


                        // lower 4 bits 출력.
                        if (leading_zero){
                                if (flag0) print_byte_out('0');
                                else       print_byte_out(' ');
 8000744:	2020      	movs	r0, #32
 8000746:	4f09      	ldr	r7, [pc, #36]	; (800076c <PrintHex+0x1d8>)
 8000748:	47b8      	blx	r7
 800074a:	f04f 0801 	mov.w	r8, #1
 800074e:	e781      	b.n	8000654 <PrintHex+0xc0>
                        }
                        else print_byte_out(uHex);
                        
                        // lower 4 bits를 ascii code로.
                        if (lHex!=0) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000750:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000754:	e7a2      	b.n	800069c <PrintHex+0x108>
                        lHex = ((c>>0)&0x0f);


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 8000756:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800075a:	e7be      	b.n	80006da <PrintHex+0x146>


                        // upper 4 bits and lower 4 bits to '0'~'9', 'A'~'F'.
                        // upper 4 bits를 ascii code로.
                        if (uHex!=0) leading_zero = false;
                        if (uHex<10) uHex+='0';
 800075c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8000760:	e792      	b.n	8000688 <PrintHex+0xf4>
                        if (uHex<10) uHex+='0';
                        else         uHex+='A'-10;
                        if (!leading_zero) print_byte_out(uHex);
                        
                        if (lHex!=0 || i==3) leading_zero = false;
                        if (lHex<10) lHex+='0';
 8000762:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000766:	e7c7      	b.n	80006f8 <PrintHex+0x164>
 8000768:	080003a9 	.word	0x080003a9
 800076c:	08000355 	.word	0x08000355

08000770 <Lb_printf>:
// 매개 : fmt : printf()와 동일하나 "%s", "%c", "%d", "%x" 사용 가능.
//              %d, %x의 경우에는 "%08x", "%8x"와 같이 나타낼 길이와 빈 공간을 0으로 채울지 선택 가능.
// 반환 : 없음.
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
 8000770:	b40f      	push	{r0, r1, r2, r3}
 8000772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000776:	b084      	sub	sp, #16
	int		i;
	va_list args;
	char	*s=fmt;
 8000778:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800077c:	4b34      	ldr	r3, [pc, #208]	; (8000850 <Lb_printf+0xe0>)
 800077e:	2200      	movs	r2, #0
// 주의 : 없음.
void Lb_printf(char *fmt, ...)
{
	int		i;
	va_list args;
	char	*s=fmt;
 8000780:	f85a 4b04 	ldr.w	r4, [sl], #4



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000784:	4d33      	ldr	r5, [pc, #204]	; (8000854 <Lb_printf+0xe4>)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000786:	4f34      	ldr	r7, [pc, #208]	; (8000858 <Lb_printf+0xe8>)
 8000788:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000860 <Lb_printf+0xf0>
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800078c:	4e33      	ldr	r6, [pc, #204]	; (800085c <Lb_printf+0xec>)
	char	*s=fmt;
	char	format[10];        // fmt의 인자가 "%08lx"라면, "08l"를 임시로 기록.
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
 800078e:	701a      	strb	r2, [r3, #0]
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000790:	f10d 0904 	add.w	r9, sp, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 8000794:	7820      	ldrb	r0, [r4, #0]
 8000796:	b350      	cbz	r0, 80007ee <Lb_printf+0x7e>
	{
		if (*s=='%')
 8000798:	2825      	cmp	r0, #37	; 0x25
 800079a:	d12d      	bne.n	80007f8 <Lb_printf+0x88>
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
 800079c:	f88d 0004 	strb.w	r0, [sp, #4]
	
	while (*s)
	{
		if (*s=='%')
		{
			s++;
 80007a0:	1c62      	adds	r2, r4, #1
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80007a2:	2101      	movs	r1, #1
 80007a4:	4694      	mov	ip, r2
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80007a6:	f812 3b01 	ldrb.w	r3, [r2], #1
 80007aa:	f1a3 0463 	sub.w	r4, r3, #99	; 0x63
 80007ae:	2b78      	cmp	r3, #120	; 0x78
 80007b0:	bf18      	it	ne
 80007b2:	2c01      	cmpne	r4, #1
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80007b4:	4610      	mov	r0, r2
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
 80007b6:	d922      	bls.n	80007fe <Lb_printf+0x8e>
 80007b8:	2b73      	cmp	r3, #115	; 0x73
 80007ba:	d020      	beq.n	80007fe <Lb_printf+0x8e>
 80007bc:	2b25      	cmp	r3, #37	; 0x25
 80007be:	d01e      	beq.n	80007fe <Lb_printf+0x8e>
					format[i] = '\0';
                	break;
				}
				else 
				{
					format[i++] = *s++;
 80007c0:	f801 3009 	strb.w	r3, [r1, r9]
 80007c4:	3101      	adds	r1, #1
		{
			s++;
			// s에서 "%08lx"형식을 가져와 format에 기록. 나중에 출력함수에 넘겨줌.
			format[0] = '%';
			
			for (i=1; i<10;)
 80007c6:	290a      	cmp	r1, #10
 80007c8:	d1ec      	bne.n	80007a4 <Lb_printf+0x34>
 80007ca:	f89c 3001 	ldrb.w	r3, [ip, #1]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 80007ce:	1c44      	adds	r4, r0, #1
 80007d0:	2b64      	cmp	r3, #100	; 0x64
 80007d2:	d01f      	beq.n	8000814 <Lb_printf+0xa4>
 80007d4:	d825      	bhi.n	8000822 <Lb_printf+0xb2>
 80007d6:	2b25      	cmp	r3, #37	; 0x25
 80007d8:	d036      	beq.n	8000848 <Lb_printf+0xd8>
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	d1da      	bne.n	8000794 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007de:	f89a 0000 	ldrb.w	r0, [sl]
 80007e2:	47a8      	blx	r5
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80007e4:	7820      	ldrb	r0, [r4, #0]
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
 80007e6:	f10a 0a04 	add.w	sl, sl, #4
        
	va_start(args, fmt);
	
	StrPrintMode = LB_PRINT_OUT_UART;
	
	while (*s)
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d1d4      	bne.n	8000798 <Lb_printf+0x28>
			s++;
		}
	}
	va_end(args);
	return;
}
 80007ee:	b004      	add	sp, #16
 80007f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 80007f8:	47a8      	blx	r5
            }
		}
		else 
		{
			PrintChar("%c", *s);
			s++;
 80007fa:	3401      	adds	r4, #1
 80007fc:	e7ca      	b.n	8000794 <Lb_printf+0x24>
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 80007fe:	aa04      	add	r2, sp, #16
					format[i] = '\0';
                	break;
 8000800:	4660      	mov	r0, ip
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 8000802:	1851      	adds	r1, r2, r1
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000804:	1c44      	adds	r4, r0, #1
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
					format[i] = '\0';
 8000806:	2200      	movs	r2, #0
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000808:	2b64      	cmp	r3, #100	; 0x64
			
			for (i=1; i<10;)
			{
				if (*s=='c' || *s=='d' || *s=='x' || *s=='s' || *s=='%')
				{
					format[i++] = *s;
 800080a:	f801 3c0c 	strb.w	r3, [r1, #-12]
					format[i] = '\0';
 800080e:	f801 2c0b 	strb.w	r2, [r1, #-11]
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000812:	d1df      	bne.n	80007d4 <Lb_printf+0x64>
			{
				case 'c' :
					PrintChar(format, va_arg(args, int));
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
 8000814:	f8da 1000 	ldr.w	r1, [sl]
 8000818:	4648      	mov	r0, r9
 800081a:	f10a 0a04 	add.w	sl, sl, #4
 800081e:	47b8      	blx	r7
					break;
 8000820:	e7b8      	b.n	8000794 <Lb_printf+0x24>
					format[i++] = *s++;
				}
			}
			
			// "%s", "%c", "%d", "%x"를 찾아 출력할 함수 호출.
			switch (*s++)
 8000822:	2b73      	cmp	r3, #115	; 0x73
 8000824:	d008      	beq.n	8000838 <Lb_printf+0xc8>
 8000826:	2b78      	cmp	r3, #120	; 0x78
 8000828:	d1b4      	bne.n	8000794 <Lb_printf+0x24>
					break;
				case 'd' :
					PrintDec(format, va_arg(args, int));
					break;
				case 'x' :
					PrintHex(format, va_arg(args, int));
 800082a:	f8da 1000 	ldr.w	r1, [sl]
 800082e:	4648      	mov	r0, r9
 8000830:	f10a 0a04 	add.w	sl, sl, #4
 8000834:	47b0      	blx	r6
					break;
 8000836:	e7ad      	b.n	8000794 <Lb_printf+0x24>
				case 's' :
					PrintString(format, va_arg(args, char *));
 8000838:	f8da 0000 	ldr.w	r0, [sl]
 800083c:	f10a 0a04 	add.w	sl, sl, #4
        return;
}

void PrintString(char *fmt, char *s)
{
        if (!fmt || !s) return;
 8000840:	2800      	cmp	r0, #0
 8000842:	d0a7      	beq.n	8000794 <Lb_printf+0x24>
 8000844:	47c0      	blx	r8
 8000846:	e7a5      	b.n	8000794 <Lb_printf+0x24>



void PrintChar(char *fmt, char c)
{
        print_byte_out(c);
 8000848:	4618      	mov	r0, r3
 800084a:	47a8      	blx	r5
 800084c:	e7a2      	b.n	8000794 <Lb_printf+0x24>
 800084e:	bf00      	nop
 8000850:	20000208 	.word	0x20000208
 8000854:	08000355 	.word	0x08000355
 8000858:	080003f1 	.word	0x080003f1
 800085c:	08000595 	.word	0x08000595
 8000860:	0800038d 	.word	0x0800038d

08000864 <Hw_StartUp_Init>:
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
 8000864:	4668      	mov	r0, sp
 8000866:	f020 0107 	bic.w	r1, r0, #7
 800086a:	468d      	mov	sp, r1
 800086c:	b519      	push	{r0, r3, r4, lr}
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800086e:	4923      	ldr	r1, [pc, #140]	; (80008fc <zero_loop+0x66>)
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <zero_loop+0x6a>)
 8000872:	4299      	cmp	r1, r3
 8000874:	d20b      	bcs.n	800088e <Hw_StartUp_Init+0x2a>
     WORK    :	 
     			보드 리셋시에 처음 실행되는 함수
     ARG     : 	void
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
 8000876:	43c8      	mvns	r0, r1
 8000878:	18c0      	adds	r0, r0, r3
 800087a:	f020 0003 	bic.w	r0, r0, #3
 800087e:	4c21      	ldr	r4, [pc, #132]	; (8000904 <zero_loop+0x6e>)
 8000880:	3004      	adds	r0, #4
 8000882:	2300      	movs	r3, #0
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
	{
		*(pulDest++) = *(pulSrc++);
 8000884:	591a      	ldr	r2, [r3, r4]
 8000886:	505a      	str	r2, [r3, r1]
 8000888:	3304      	adds	r3, #4
	//  
	
	// Copy the data segment initializers from flash to SRAM
	pulSrc = &_sidata;

	for(pulDest = &_sdata; pulDest < &_edata; )
 800088a:	4283      	cmp	r3, r0
 800088c:	d1fa      	bne.n	8000884 <Hw_StartUp_Init+0x20>
		*(pulDest++) = *(pulSrc++);
	}
  
	/* Zero fill the bss segment.  This is done with inline assembly since this
	   will clear the value of pulDest if it is not kept in a register. */
	__asm("  ldr     r0, =_sbss\n"
 800088e:	481f      	ldr	r0, [pc, #124]	; (800090c <zero_loop+0x76>)
 8000890:	491f      	ldr	r1, [pc, #124]	; (8000910 <zero_loop+0x7a>)
 8000892:	f04f 0200 	mov.w	r2, #0

08000896 <zero_loop>:
 8000896:	4288      	cmp	r0, r1
 8000898:	bfb8      	it	lt
 800089a:	f840 2b04 	strlt.w	r2, [r0], #4
 800089e:	f6ff affa 	blt.w	8000896 <zero_loop>
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008a2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80008a6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80008aa:	6822      	ldr	r2, [r4, #0]
     RET     : 	void
---------------------------------------------------------------------------*/
void Hw_StartUp_Init(void)
{
	
	u32 TimeOutCnt  = 0;
 80008ac:	2300      	movs	r3, #0
	
    // HSI or HSE 선택
            
    //-- CR_HSEON_Set
    //
	REG_RCC_CR |= (1<<16);	
 80008ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008b2:	6022      	str	r2, [r4, #0]
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
		TimeOutCnt++;		
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008b4:	f240 40ff 	movw	r0, #1279	; 0x4ff
		
	//-- 설정된 clock 이 설정 되었는지 확인
	//
	do
	{	
		HSEStatus = REG_RCC_CR & (1<<17);	// HSE 인경우
 80008b8:	6821      	ldr	r1, [r4, #0]
		TimeOutCnt++;		
 80008ba:	3301      	adds	r3, #1
	} while( (HSEStatus == 0) && (TimeOutCnt < 1280) );
 80008bc:	4283      	cmp	r3, r0
 80008be:	f481 3100 	eor.w	r1, r1, #131072	; 0x20000
 80008c2:	bf8c      	ite	hi
 80008c4:	2200      	movhi	r2, #0
 80008c6:	2201      	movls	r2, #1
 80008c8:	ea12 4251 	ands.w	r2, r2, r1, lsr #17
 80008cc:	d1f4      	bne.n	80008b8 <zero_loop+0x22>
  

	//-- FLASH Access 타이밍 설정
	//
	REG_FLASH_ACR |=  (1<<4);	// Prefetch buffer enable
 80008ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	f042 0210 	orr.w	r2, r2, #16
 80008dc:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR &= ~(3<<0);	// LATENCY Clear
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	f022 0203 	bic.w	r2, r2, #3
 80008e4:	601a      	str	r2, [r3, #0]
	REG_FLASH_ACR |=  (2<<0);	// LATENCY = two wait
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	f042 0202 	orr.w	r2, r2, #2
 80008ec:	601a      	str	r2, [r3, #0]


    main();
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <zero_loop+0x72>)
 80008f0:	4798      	blx	r3

}
 80008f2:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
 80008f6:	4685      	mov	sp, r0
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000
 8000900:	200000e8 	.word	0x200000e8
 8000904:	080039b4 	.word	0x080039b4
 8000908:	08000019 	.word	0x08000019
 800090c:	20000200 	.word	0x20000200
 8000910:	20001494 	.word	0x20001494

08000914 <Hw_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Init( void )
{
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//-- PLL 설정
	//
	Hw_PLL_Init();
 8000916:	f640 3391 	movw	r3, #2961	; 0xb91
 800091a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800091e:	4798      	blx	r3
	
	
	//-- 인터럽트 관련 초기화
	//
	Hw_ISR_Init();
 8000920:	f640 5379 	movw	r3, #3449	; 0xd79
 8000924:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000928:	4798      	blx	r3
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 800092a:	f640 0604 	movw	r6, #2052	; 0x804
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800092e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000932:	f243 47b3 	movw	r7, #13491	; 0x34b3
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000936:	f44f 6540 	mov.w	r5, #3072	; 0xc00
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 800093a:	f640 4404 	movw	r4, #3076	; 0xc04
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800093e:	f241 0104 	movw	r1, #4100	; 0x1004
 8000942:	f244 4044 	movw	r0, #17476	; 0x4444
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 8000946:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800094a:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 800094e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000952:	f2c3 3044 	movt	r0, #13124	; 0x3344
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000956:	f2c4 0601 	movt	r6, #16385	; 0x4001
 800095a:	f2c3 3733 	movt	r7, #13107	; 0x3333
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 800095e:	f2c4 0501 	movt	r5, #16385	; 0x4001
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000962:	f2c4 0401 	movt	r4, #16385	; 0x4001
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 8000966:	f241 3339 	movw	r3, #4921	; 0x1339
	Hw_ISR_Init();
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
 800096a:	f8ce 2000 	str.w	r2, [lr]
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
	
	Hw_DMA_Init();
 800096e:	f6c0 0300 	movt	r3, #2048	; 0x800
	
		
	//-- GPIO 기본값 설정
	//
	REG_GPIOA_CRL = 0x33333333;	// PA0 - 7
	REG_GPIOA_CRH = 0x333334B3;	// PA8 - 15    //PA9,10,11,12는 가각 UART, USB에 할당됨
 8000972:	6037      	str	r7, [r6, #0]
	REG_GPIOB_CRL = 0x33333333;	// PB0 - 7
 8000974:	602a      	str	r2, [r5, #0]
	REG_GPIOB_CRH = 0x33333333;	// PB8 - 15
 8000976:	6022      	str	r2, [r4, #0]
	REG_GPIOC_CRH = 0x33444444;	// PC14, 15
 8000978:	6008      	str	r0, [r1, #0]
	
	Hw_DMA_Init();
 800097a:	4798      	blx	r3
	Hw_Uart_Init();
 800097c:	f640 23d9 	movw	r3, #2777	; 0xad9
 8000980:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000984:	4798      	blx	r3
	Hw_Led_Init();
 8000986:	f640 4325 	movw	r3, #3109	; 0xc25
 800098a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800098e:	4798      	blx	r3
	Hw_Timer_Init();
 8000990:	f640 53c9 	movw	r3, #3529	; 0xdc9
 8000994:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000998:	4798      	blx	r3
	Hw_Si47xx_Init();
 800099a:	f241 0341 	movw	r3, #4161	; 0x1041
 800099e:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009a2:	4798      	blx	r3
	Hw_N5110G_Init();
 80009a4:	f241 2359 	movw	r3, #4697	; 0x1259
 80009a8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009ac:	4798      	blx	r3
	Hw_I2C_Init();
 80009ae:	f640 7335 	movw	r3, #3893	; 0xf35
 80009b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009b6:	4798      	blx	r3
	
	Hw_VCom_Init();
 80009b8:	f640 7309 	movw	r3, #3849	; 0xf09
 80009bc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009c0:	4798      	blx	r3

	Hw_MPU6050_Init();
 80009c2:	f641 0375 	movw	r3, #6261	; 0x1875
 80009c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009ca:	4798      	blx	r3
	Hw_Pwm_Init();
 80009cc:	f641 13ad 	movw	r3, #6573	; 0x19ad
 80009d0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009d4:	4798      	blx	r3
	Hw_DHT11_Init();
 80009d6:	f641 4321 	movw	r3, #7201	; 0x1c21
 80009da:	f6c0 0300 	movt	r3, #2048	; 0x800
 80009de:	4798      	blx	r3
 80009e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e2:	bf00      	nop

080009e4 <Hw_Wait>:
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009e4:	2300      	movs	r3, #0
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
 80009e6:	b082      	sub	sp, #8
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	9b01      	ldr	r3, [sp, #4]
 80009ec:	4298      	cmp	r0, r3
 80009ee:	d905      	bls.n	80009fc <Hw_Wait+0x18>
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	3301      	adds	r3, #1
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	9b01      	ldr	r3, [sp, #4]
 80009f8:	4283      	cmp	r3, r0
 80009fa:	d3f9      	bcc.n	80009f0 <Hw_Wait+0xc>
}
 80009fc:	b002      	add	sp, #8
 80009fe:	4770      	bx	lr

08000a00 <Hw_Wait_ms>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8000a00:	f241 7370 	movw	r3, #6000	; 0x1770
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
 8000a04:	b082      	sub	sp, #8
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_Usec( u32 usec )
{
    Hw_Wait( usec * 6 );
 8000a06:	fb03 f000 	mul.w	r0, r3, r0
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait( u32 delay )
{
    volatile u32 i;
    for ( i = 0 ; i < delay ; i++ ){ };
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	9b01      	ldr	r3, [sp, #4]
 8000a10:	4298      	cmp	r0, r3
 8000a12:	d905      	bls.n	8000a20 <Hw_Wait_ms+0x20>
 8000a14:	9b01      	ldr	r3, [sp, #4]
 8000a16:	3301      	adds	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	9b01      	ldr	r3, [sp, #4]
 8000a1c:	4298      	cmp	r0, r3
 8000a1e:	d8f9      	bhi.n	8000a14 <Hw_Wait_ms+0x14>
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Wait_ms( u32 msec )
{
    Hw_Wait_Usec( msec*1000 );
}
 8000a20:	b002      	add	sp, #8
 8000a22:	4770      	bx	lr

08000a24 <Hw_ISR_UART1_Handler>:


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a24:	b500      	push	{lr}
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a26:	f643 0304 	movw	r3, #14340	; 0x3804
 8000a2a:	f2c4 0301 	movt	r3, #16385	; 0x4001


//-- UART1 ISR
//
void Hw_ISR_UART1_Handler(void)
{
 8000a2e:	b083      	sub	sp, #12
	u8 UartData;
				
	UartData = REG_USART1_DR;
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	a902      	add	r1, sp, #8
 8000a34:	f801 3d01 	strb.w	r3, [r1, #-1]!
	
	Hw_Uart_Q_Push( 0, &UartData );
 8000a38:	f640 43c5 	movw	r3, #3269	; 0xcc5
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a42:	4798      	blx	r3
}
 8000a44:	b003      	add	sp, #12
 8000a46:	bd00      	pop	{pc}

08000a48 <Hw_Uart_Open_COM1>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
 8000a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a4c:	f241 0618 	movw	r6, #4120	; 0x1018
 8000a50:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000a54:	6835      	ldr	r5, [r6, #0]
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a56:	f240 23d4 	movw	r3, #724	; 0x2d4
 8000a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a5e:	f643 040c 	movw	r4, #14348	; 0x380c
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Open_COM1( u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	

	Hw_Uart_Ch[HW_UART_COM1].Baud 		 = BaudData;
 8000a62:	6058      	str	r0, [r3, #4]
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
 8000a64:	6099      	str	r1, [r3, #8]
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a66:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a6a:	f445 4880 	orr.w	r8, r5, #16384	; 0x4000
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a6e:	230c      	movs	r3, #12
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a70:	f643 0c10 	movw	ip, #14352	; 0x3810
	REG_USART1_CR3  = 0;
 8000a74:	f643 0e14 	movw	lr, #14356	; 0x3814
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a78:	f643 0708 	movw	r7, #14344	; 0x3808
	Hw_Uart_Ch[HW_UART_COM1].ISR_FuncPtr = ISR_FuncPtr;
	
	
	//-- Clock Enable
	//
	SET_BIT( REG_RCC_APB2ENR, 14 );		// USART1 Clock Enable
 8000a7c:	f8c6 8000 	str.w	r8, [r6]
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a80:	2200      	movs	r2, #0
	//
	
	
	//-- USART1 설정
	//	
	REG_USART1_CR1  = 0 
 8000a82:	6023      	str	r3, [r4, #0]
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a84:	f2c4 0c01 	movt	ip, #16385	; 0x4001
	REG_USART1_CR3  = 0;
 8000a88:	f2c4 0e01 	movt	lr, #16385	; 0x4001
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000a8c:	f240 2371 	movw	r3, #625	; 0x271
 8000a90:	f2c4 0701 	movt	r7, #16385	; 0x4001
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a94:	f24e 1504 	movw	r5, #57604	; 0xe104
	REG_USART1_CR1  = 0 
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
 8000a98:	f8cc 2000 	str.w	r2, [ip]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000a9c:	f2ce 0500 	movt	r5, #57344	; 0xe000
					| ( 0 << 12 )		// 1 Start bit, 8 Data bits, n Stop bit
					| ( 0 << 10 )		// Parity control disabled
					| ( 1 <<  3 )		// Transmitter Enable
					| ( 1 <<  2 );		// Receiver Enable					
	REG_USART1_CR2  = ( 0 << 12 );		// 1 stop bit	
	REG_USART1_CR3  = 0;
 8000aa0:	f8ce 2000 	str.w	r2, [lr]
	
	
	//-- 115200bps로 통신 속도 설정
	//
	REG_USART1_BRR  = 0
 8000aa4:	603b      	str	r3, [r7, #0]
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000aa6:	682b      	ldr	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000aa8:	2025      	movs	r0, #37	; 0x25
					| (  1 << 0 );		// DIV Fraction
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	602b      	str	r3, [r5, #0]
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000ab0:	6821      	ldr	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000ab2:	f640 538d 	movw	r3, #3469	; 0xd8d
	

	//-- 인터럽트 설정
	//
	SET_BIT( REG_NVIC_ISER( 37/32 ), 37%32 );	// NVIC 37번 USART1 인터럽트 활성화
	SET_BIT( REG_USART1_CR1, 5 );				// RX 인터럽트 활성화
 8000ab6:	f041 0120 	orr.w	r1, r1, #32
 8000aba:	6021      	str	r1, [r4, #0]
	
	Hw_ISR_SetIRQFunc( 37, (u32)Hw_ISR_UART1_Handler, 0 );
 8000abc:	f640 2125 	movw	r1, #2597	; 0xa25
 8000ac0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ac4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000ac8:	4798      	blx	r3
	
	REG_USART1_CR1 |= ( 1 << 13 );	    // USART Enable
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ad6:	bf00      	nop

08000ad8 <Hw_Uart_Init>:
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
	u32 i;
	
	Hw_Uart_Q_Init();
 8000ad8:	f640 437d 	movw	r3, #3197	; 0xc7d
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Init( void )
{
 8000adc:	b510      	push	{r4, lr}
	u32 i;
	
	Hw_Uart_Q_Init();
 8000ade:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000ae2:	4798      	blx	r3
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000ae4:	f240 23d4 	movw	r3, #724	; 0x2d4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000aee:	f640 2449 	movw	r4, #2633	; 0xa49
 8000af2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000af6:	4611      	mov	r1, r2
 8000af8:	f6c0 0400 	movt	r4, #2048	; 0x800
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000afc:	605a      	str	r2, [r3, #4]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000afe:	609a      	str	r2, [r3, #8]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b00:	611a      	str	r2, [r3, #16]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b02:	615a      	str	r2, [r3, #20]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b04:	61da      	str	r2, [r3, #28]
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b06:	621a      	str	r2, [r3, #32]
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b08:	629a      	str	r2, [r3, #40]	; 0x28
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	Hw_Uart_Q_Init();
	
	
	for( i=0; i<HW_UART_MAX_CH; i++ )
	{
		Hw_Uart_Ch[i].Baud 		  = 0;
 8000b0c:	635a      	str	r2, [r3, #52]	; 0x34
		Hw_Uart_Ch[i].ISR_FuncPtr = NULL;
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38
void Hw_Uart_Open( u8 Ch, u32 BaudData, void (*ISR_FuncPtr)(char Ch) )
{	
	switch( Ch )
	{
		case HW_UART_COM1:
			Hw_Uart_Open_COM1( BaudData, ISR_FuncPtr );
 8000b10:	47a0      	blx	r4
 8000b12:	bd10      	pop	{r4, pc}

08000b14 <Hw_Uart_Getch>:
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000b14:	b530      	push	{r4, r5, lr}
	u8 Uart_GetData = 0;
 8000b16:	2300      	movs	r3, #0
			: 시리얼 포트에서 문자 1바이트 읽는다.
     ARG
     RET
---------------------------------------------------------------------------*/
u8 Hw_Uart_Getch( u8 Ch )
{
 8000b18:	b083      	sub	sp, #12
 8000b1a:	4d08      	ldr	r5, [pc, #32]	; (8000b3c <Hw_Uart_Getch+0x28>)
 8000b1c:	4604      	mov	r4, r0
	u8 Uart_GetData = 0;
 8000b1e:	f88d 3007 	strb.w	r3, [sp, #7]

	while( 1 )
	{
		// 버퍼에 데이터 들어올때까지 기다린다.
		if( HW_UART_Q_VAILD(Ch) > 0 ) break;
 8000b22:	4620      	mov	r0, r4
 8000b24:	47a8      	blx	r5
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d0fb      	beq.n	8000b22 <Hw_Uart_Getch+0xe>
	}

	Hw_Uart_Q_Pop( Ch, &Uart_GetData );
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f10d 0107 	add.w	r1, sp, #7
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <Hw_Uart_Getch+0x2c>)
 8000b32:	4798      	blx	r3

	return Uart_GetData;
}
 8000b34:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	08000c99 	.word	0x08000c99
 8000b40:	08000d21 	.word	0x08000d21

08000b44 <print_byte>:
#if HW_USE_USB_VCOM == 1
	if (c == '\n') Hw_VCom_Putch('\r');
    
    Hw_VCom_Putch(c);
#else	
	if (c == '\n') Hw_Uart_Putch(HW_UART_COM1, '\r');
 8000b44:	280a      	cmp	r0, #10
 8000b46:	d00d      	beq.n	8000b64 <print_byte+0x20>
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b48:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b4c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b50:	6813      	ldr	r3, [r2, #0]
 8000b52:	0619      	lsls	r1, r3, #24
 8000b54:	d5fc      	bpl.n	8000b50 <print_byte+0xc>
    
    REG_USART1_DR = Uart_PutData;
 8000b56:	f643 0304 	movw	r3, #14340	; 0x3804
 8000b5a:	b2c0      	uxtb	r0, r0
 8000b5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b60:	6018      	str	r0, [r3, #0]
 8000b62:	4770      	bx	lr
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Uart_Putch( u8 Ch,  char Uart_PutData )
{
    while( !(REG_USART1_SR & 0x80) );
 8000b64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b68:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	061b      	lsls	r3, r3, #24
 8000b70:	d5fc      	bpl.n	8000b6c <print_byte+0x28>
    
    REG_USART1_DR = Uart_PutData;
 8000b72:	f643 0304 	movw	r3, #14340	; 0x3804
 8000b76:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b7a:	220d      	movs	r2, #13
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e7e3      	b.n	8000b48 <print_byte+0x4>

08000b80 <get_byte>:
#endif    
}


char get_byte(void)
{
 8000b80:	b508      	push	{r3, lr}
	char Ch;
	
#if HW_USE_USB_VCOM == 1	
	Ch = Hw_VCom_Getch();
#else	
	Ch = Hw_Uart_Getch(HW_UART_COM1);
 8000b82:	f640 3315 	movw	r3, #2837	; 0xb15
 8000b86:	2000      	movs	r0, #0
 8000b88:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000b8c:	4798      	blx	r3
#endif
	
	return Ch;
}
 8000b8e:	bd08      	pop	{r3, pc}

08000b90 <Hw_PLL_Init>:
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b90:	f241 0304 	movw	r3, #4100	; 0x1004
 8000b94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b98:	681a      	ldr	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
{
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
 8000b9e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8000ba2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ba6:	601a      	str	r2, [r3, #0]
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000ba8:	681a      	ldr	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000baa:	f2c4 0102 	movt	r1, #16386	; 0x4002
	
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
 8000bae:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 8000bb2:	601a      	str	r2, [r3, #0]
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bb4:	680b      	ldr	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000bb6:	460a      	mov	r2, r1
#if	CLOCK_EXT == 1
	//-- PLL 설정 72Mhz로 설정함
	//
	REG_RCC_CFGR &= ~(0xF<<18 | 0x1<<17 | 0x1<<16 | 0xF<<4);
	REG_RCC_CFGR |=  (0x7<<18 | 0x1<<16);			// 8MHz
    REG_RCC_CR   |=  0x01 << 24;                    // PLLON
 8000bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bbc:	600b      	str	r3, [r1, #0]

	while( (REG_RCC_CR & (1<<25)) == 0 );			// PLLRDY
 8000bbe:	6813      	ldr	r3, [r2, #0]
 8000bc0:	019b      	lsls	r3, r3, #6
 8000bc2:	d5fc      	bpl.n	8000bbe <Hw_PLL_Init+0x2e>
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000bc4:	f241 0304 	movw	r3, #4100	; 0x1004
 8000bc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000bcc:	6819      	ldr	r1, [r3, #0]
	//
	REG_RCC_CFGR &= ~(0x7<<11);
	REG_RCC_CFGR |=  (0x0<<11);

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000bce:	461a      	mov	r2, r3
    /////Bits 1:0 SW : System clock switch
    //00: HSI selected as system clock
    //01: HSE selected as system clock
    //10: PLL selected as system clock   <----------------- 선택됨
    //11: not allowed
	REG_RCC_CFGR &= ~0x3;
 8000bd0:	f021 0103 	bic.w	r1, r1, #3
 8000bd4:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  0x2;
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	f041 0102 	orr.w	r1, r1, #2
 8000bdc:	6019      	str	r1, [r3, #0]

	// USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );
 8000bde:	6819      	ldr	r1, [r3, #0]
 8000be0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8000be4:	6019      	str	r1, [r3, #0]

	// APB1 - PCLK1 36Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<8);
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8000bec:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x4<<8);
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000bf4:	6019      	str	r1, [r3, #0]
	
	// APB2 - PCLK2 72Mhz
	//
	REG_RCC_CFGR &= ~(0x7<<11);
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	f421 5160 	bic.w	r1, r1, #14336	; 0x3800
 8000bfc:	6019      	str	r1, [r3, #0]
	REG_RCC_CFGR |=  (0x0<<11);
 8000bfe:	6819      	ldr	r1, [r3, #0]
 8000c00:	6019      	str	r1, [r3, #0]

    
    while( (REG_RCC_CFGR & 0xC) != 0x08 );
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	d1fa      	bne.n	8000c02 <Hw_PLL_Init+0x72>
    
    //APB2에 있는 UART 등 주변장치에 Clock 소스 동작제어
    //UART가 동작되기 위해서는 GPIO와 Alternation Function IO가 동작상태에 있어야 함
	REG_RCC_APB2ENR |= 0  |
 8000c0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8000c10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c1a:	f042 021d 	orr.w	r2, r2, #29
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <Hw_Led_Init>:
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000c24:	2204      	movs	r2, #4
 8000c26:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000c2a:	6811      	ldr	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
{
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
 8000c30:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8000c34:	6011      	str	r1, [r2, #0]
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000c36:	6811      	ldr	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c38:	f2c4 0301 	movt	r3, #16385	; 0x4001
	u32 PinNum;

	//-- JTAG 핀을 Disable하고 PB3,4를 GPIO로 사용한다.(핀구성에 따라 사용하지 않을수 있음)
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
 8000c3c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000c40:	6011      	str	r1, [r2, #0]
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c42:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c44:	f640 420c 	movw	r2, #3084	; 0xc0c
	//
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
 8000c48:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8000c4c:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000c4e:	6819      	ldr	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c50:	f2c4 0201 	movt	r2, #16385	; 0x4001
	REG_AFIO_MAPR &= ~(0x07 << 24);
	REG_AFIO_MAPR |=  (0x04 << 24);
	
	PinNum = 3;
	REG_GPIOB_CRL &= ~(0x0F << (PinNum*4+0));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (PinNum*4+0));	// MODE, PB.3 Output mode, max speed 50Mhz
 8000c54:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
 8000c58:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (PinNum*4+2));	// CNF,  PB.3 General purpose output push-pul
 8000c5a:	6819      	ldr	r1, [r3, #0]
 8000c5c:	6019      	str	r1, [r3, #0]
void Hw_Led_Off( u8 Ch )
{
	switch( Ch )
	{
		case 0:
			SET_BIT( REG_GPIOB_ODR, 3 );
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4770      	bx	lr

08000c68 <Hw_Led_Toggle>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Led_Toggle( u8 Ch )
{
	switch( Ch )
 8000c68:	b938      	cbnz	r0, 8000c7a <Hw_Led_Toggle+0x12>
	{
		case 0:
			TGL_BIT( REG_GPIOB_ODR, 3 );
 8000c6a:	f640 430c 	movw	r3, #3084	; 0xc0c
 8000c6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f082 0208 	eor.w	r2, r2, #8
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	4770      	bx	lr

08000c7c <Hw_Uart_Q_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	4804      	ldr	r0, [pc, #16]	; (8000c90 <Hw_Uart_Q_Init+0x14>)
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <Hw_Uart_Q_Init+0x18>)
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
 8000c82:	461a      	mov	r2, r3
 8000c84:	521a      	strh	r2, [r3, r0]
 8000c86:	525a      	strh	r2, [r3, r1]
 8000c88:	3302      	adds	r3, #2
---------------------------------------------------------------------------*/
void Hw_Uart_Q_Init( void )
{
	u8 i;

	for( i=0; i<HW_UART_Q_CH_MAX; i++ )
 8000c8a:	2b0e      	cmp	r3, #14
 8000c8c:	d1fa      	bne.n	8000c84 <Hw_Uart_Q_Init+0x8>
	{
		Hw_Uart_Q_Start[i] = Hw_Uart_Q_End[i] = 0;
	}
}
 8000c8e:	4770      	bx	lr
 8000c90:	20000408 	.word	0x20000408
 8000c94:	20000418 	.word	0x20000418

08000c98 <HW_UART_Q_VAILD>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000c98:	f240 4218 	movw	r2, #1048	; 0x418
 8000c9c:	f240 4308 	movw	r3, #1032	; 0x408
 8000ca0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ca8:	f933 3010 	ldrsh.w	r3, [r3, r0, lsl #1]
 8000cac:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
 8000cb0:	1ad2      	subs	r2, r2, r3
 8000cb2:	3220      	adds	r2, #32
 8000cb4:	17d3      	asrs	r3, r2, #31
 8000cb6:	0edb      	lsrs	r3, r3, #27
 8000cb8:	18d2      	adds	r2, r2, r3
 8000cba:	f002 001f 	and.w	r0, r2, #31
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_VAILD( u8 Ch )
{
	return HW_UART_Q_SIZE(Ch);
}
 8000cbe:	1ac0      	subs	r0, r0, r3
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <Hw_Uart_Q_Push>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{
 8000cc4:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000cc6:	4c13      	ldr	r4, [pc, #76]	; (8000d14 <Hw_Uart_Q_Push+0x50>)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <Hw_Uart_Q_Push+0x54>)
 8000cca:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
 8000cce:	f933 2010 	ldrsh.w	r2, [r3, r0, lsl #1]
 8000cd2:	b235      	sxth	r5, r6
 8000cd4:	1aaa      	subs	r2, r5, r2
 8000cd6:	3220      	adds	r2, #32
 8000cd8:	17d3      	asrs	r3, r2, #31
 8000cda:	0edb      	lsrs	r3, r3, #27
 8000cdc:	18d2      	adds	r2, r2, r3
 8000cde:	f002 021f 	and.w	r2, r2, #31
 8000ce2:	1ad3      	subs	r3, r2, r3
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000ce4:	2b1f      	cmp	r3, #31
 8000ce6:	d012      	beq.n	8000d0e <Hw_Uart_Q_Push+0x4a>

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000ce8:	3601      	adds	r6, #1
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cea:	b236      	sxth	r6, r6
 8000cec:	17f3      	asrs	r3, r6, #31
 8000cee:	0edb      	lsrs	r3, r3, #27
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cf0:	eb00 1240 	add.w	r2, r0, r0, lsl #5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cf4:	18f6      	adds	r6, r6, r3
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cf6:	7809      	ldrb	r1, [r1, #0]
 8000cf8:	1955      	adds	r5, r2, r5
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000cfa:	f006 061f 	and.w	r6, r6, #31
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <Hw_Uart_Q_Push+0x58>)
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;
 8000d00:	1af3      	subs	r3, r6, r3
 8000d02:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;

	Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_Start[Ch]++]  = *PushData;
 8000d06:	5551      	strb	r1, [r2, r5]
	Hw_Uart_Q_Start[Ch] 						%= HW_UART_Q_BUFFER_MAX;

	return TRUE;
 8000d08:	2001      	movs	r0, #1
}
 8000d0a:	bc70      	pop	{r4, r5, r6}
 8000d0c:	4770      	bx	lr
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Push( u8 Ch, u8  *PushData )
{

	if (HW_UART_Q_SIZE(Ch) == (HW_UART_Q_BUFFER_MAX-1)) return FALSE;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e7fb      	b.n	8000d0a <Hw_Uart_Q_Push+0x46>
 8000d12:	bf00      	nop
 8000d14:	20000418 	.word	0x20000418
 8000d18:	20000408 	.word	0x20000408
 8000d1c:	20000310 	.word	0x20000310

08000d20 <Hw_Uart_Q_Pop>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d20:	b470      	push	{r4, r5, r6}
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d22:	4c12      	ldr	r4, [pc, #72]	; (8000d6c <Hw_Uart_Q_Pop+0x4c>)
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <Hw_Uart_Q_Pop+0x50>)
 8000d26:	f834 6010 	ldrh.w	r6, [r4, r0, lsl #1]
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
 8000d2a:	4603      	mov	r3, r0
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u32 HW_UART_Q_SIZE( u8 Ch )
{
	return (Hw_Uart_Q_Start[Ch] - Hw_Uart_Q_End[Ch] + HW_UART_Q_BUFFER_MAX) % HW_UART_Q_BUFFER_MAX;
 8000d2c:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8000d30:	b235      	sxth	r5, r6
 8000d32:	1b40      	subs	r0, r0, r5
 8000d34:	3020      	adds	r0, #32
 8000d36:	17c2      	asrs	r2, r0, #31
 8000d38:	0ed2      	lsrs	r2, r2, #27
 8000d3a:	1880      	adds	r0, r0, r2
 8000d3c:	f000 001f 	and.w	r0, r0, #31
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;
 8000d40:	1a80      	subs	r0, r0, r2
 8000d42:	d010      	beq.n	8000d66 <Hw_Uart_Q_Pop+0x46>

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d44:	3601      	adds	r6, #1

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d46:	b236      	sxth	r6, r6
 8000d48:	17f2      	asrs	r2, r6, #31
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d4a:	eb03 1043 	add.w	r0, r3, r3, lsl #5

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d4e:	0ed2      	lsrs	r2, r2, #27
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d50:	1945      	adds	r5, r0, r5
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <Hw_Uart_Q_Pop+0x54>)

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d54:	18b6      	adds	r6, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d56:	5d40      	ldrb	r0, [r0, r5]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d58:	f006 061f 	and.w	r6, r6, #31
 8000d5c:	1ab2      	subs	r2, r6, r2
---------------------------------------------------------------------------*/
u8 Hw_Uart_Q_Pop( u8 Ch, u8 *pData )
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];
 8000d5e:	7008      	strb	r0, [r1, #0]

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;

    return TRUE;
 8000d60:	2001      	movs	r0, #1
{
	if (HW_UART_Q_SIZE(Ch) == 0) return FALSE;

	*pData = Hw_Uart_Q_Buffer[Ch][Hw_Uart_Q_End[Ch]++];

	Hw_Uart_Q_End[Ch] %= HW_UART_Q_BUFFER_MAX;
 8000d62:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]

    return TRUE;
}
 8000d66:	bc70      	pop	{r4, r5, r6}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000408 	.word	0x20000408
 8000d70:	20000418 	.word	0x20000418
 8000d74:	20000310 	.word	0x20000310

08000d78 <Hw_ISR_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_Init( void )
{
	REG_SCB_VTOR = (u32)Hw_ISR_VectorTable;
 8000d78:	f240 6300 	movw	r3, #1536	; 0x600
 8000d7c:	f64e 5208 	movw	r2, #60680	; 0xed08
 8000d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d84:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4770      	bx	lr

08000d8c <Hw_ISR_SetIRQFunc>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFunc( u8 ISR_Num, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = 16;
	
	Hw_ISR_VectorTable[ ISR_StartOffset + ISR_Num ] = FuncAddress;	
 8000d8c:	f240 6300 	movw	r3, #1536	; 0x600
 8000d90:	3010      	adds	r0, #16
 8000d92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d96:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000d9a:	4770      	bx	lr

08000d9c <Hw_ISR_SetIRQFuncByAddr>:
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000d9c:	f240 6300 	movw	r3, #1536	; 0x600
     			u8  ISR_Priority : 인터럽트 우선순위(작은값이 우선순위 높음)
     RET     : void
---------------------------------------------------------------------------*/
void Hw_ISR_SetIRQFuncByAddr( u32 ISR_Addr, u32 FuncAddress, u8 ISR_Priority )
{	
	u32 ISR_StartOffset = ISR_Addr/4;
 8000da0:	0880      	lsrs	r0, r0, #2
	
	Hw_ISR_VectorTable[ ISR_StartOffset ] = FuncAddress;	
 8000da2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000da6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8000daa:	4770      	bx	lr

08000dac <Hw_Timer_SetupISR>:
     	 	 	 타이머 H/W 기능을 초기화 한다.
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_SetupISR( void )
{	
 8000dac:	b508      	push	{r3, lr}
	Hw_ISR_SetIRQFuncByAddr( 0x003C, (u32)Hw_Timer_ISR, 0 );	
 8000dae:	f640 61b1 	movw	r1, #3761	; 0xeb1
 8000db2:	f640 539d 	movw	r3, #3485	; 0xd9d
 8000db6:	203c      	movs	r0, #60	; 0x3c
 8000db8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dc2:	4798      	blx	r3
 8000dc4:	bd08      	pop	{r3, pc}
 8000dc6:	bf00      	nop

08000dc8 <Hw_Timer_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
{
 8000dc8:	b510      	push	{r4, lr}
	u8 i;
	static u8 Excute = 0;

	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
 8000dca:	4c1b      	ldr	r4, [pc, #108]	; (8000e38 <Hw_Timer_Init+0x70>)
 8000dcc:	7823      	ldrb	r3, [r4, #0]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d030      	beq.n	8000e34 <Hw_Timer_Init+0x6c>
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <Hw_Timer_Init+0x74>)
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dd4:	2200      	movs	r2, #0
     TITLE   : Hw_Timer_Init
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Init( void )
 8000dd6:	f103 0170 	add.w	r1, r3, #112	; 0x70
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
	{
		Timer_Tbl[i].Timer_En   = OFF;
 8000dda:	f803 2c08 	strb.w	r2, [r3, #-8]
		Timer_Tbl[i].Timer_Ctn  = 0;
 8000dde:	f823 2c06 	strh.w	r2, [r3, #-6]
		Timer_Tbl[i].Timer_Init = 0;
 8000de2:	f823 2c04 	strh.w	r2, [r3, #-4]
		Timer_Tbl[i].TmrFnct    = NULL;
 8000de6:	f843 2b10 	str.w	r2, [r3], #16
	
	if( Excute == 1 ) return;  // 이미 한번 실행했다면 정지.
	
	
	// 구조체 초기화
	for(i=0; i<TIMER_MAX; i++)
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d1f5      	bne.n	8000dda <Hw_Timer_Init+0x12>
		Timer_Tbl[i].Timer_Init = 0;
		Timer_Tbl[i].TmrFnct    = NULL;
	}	                   
	
	
	Hw_Timer_SetupISR();
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <Hw_Timer_Init+0x78>)
 8000df0:	4798      	blx	r3
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000df2:	f24e 0114 	movw	r1, #57364	; 0xe014
 8000df6:	f641 103f 	movw	r0, #6463	; 0x193f
 8000dfa:	f2ce 0100 	movt	r1, #57344	; 0xe000
	
	REG_STK_VAL  = 0;	
 8000dfe:	f24e 0218 	movw	r2, #57368	; 0xe018
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
 8000e02:	f2c0 0001 	movt	r0, #1
 8000e06:	6008      	str	r0, [r1, #0]
	
	REG_STK_VAL  = 0;	
 8000e08:	f2ce 0200 	movt	r2, #57344	; 0xe000
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e0c:	f24e 0310 	movw	r3, #57360	; 0xe010
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000e10:	2100      	movs	r1, #0
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e12:	f2ce 0300 	movt	r3, #57344	; 0xe000
void Hw_Timer_Setup( void )
{

	REG_STK_LOAD = 72000 - 1;	// 72000000 / 72000 = 1000us = 1ms
	
	REG_STK_VAL  = 0;	
 8000e16:	6011      	str	r1, [r2, #0]
	
	SET_BIT( REG_STK_CTRL, 2 );	// CLKSOURCE = Processor Clock 72Mhz		
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f042 0204 	orr.w	r2, r2, #4
 8000e1e:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 1 );	// 인터럽트 활성화		
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	f042 0202 	orr.w	r2, r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
	SET_BIT( REG_STK_CTRL, 0 );	// Counter Enable
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
	
	
	Hw_Timer_SetupISR();
	Hw_Timer_Setup();	

	Excute = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	7023      	strb	r3, [r4, #0]
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	bf00      	nop
 8000e38:	2000027c 	.word	0x2000027c
 8000e3c:	20000214 	.word	0x20000214
 8000e40:	08000dad 	.word	0x08000dad

08000e44 <Hw_Timer_Tick>:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
{
 8000e44:	b538      	push	{r3, r4, r5, lr}
	u8 i;

	
	Hw_Timer_Counter++;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <Hw_Timer_Tick+0x60>)


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e48:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <Hw_Timer_Tick+0x64>)
void Hw_Timer_Tick(void)
{
	u8 i;

	
	Hw_Timer_Counter++;
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	3101      	adds	r1, #1
 8000e4e:	6019      	str	r1, [r3, #0]


	if( Tmr_Ctn ) Tmr_Ctn--;
 8000e50:	8813      	ldrh	r3, [r2, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b11b      	cbz	r3, 8000e5e <Hw_Timer_Tick+0x1a>
 8000e56:	8813      	ldrh	r3, [r2, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	8013      	strh	r3, [r2, #0]
 8000e5e:	4c13      	ldr	r4, [pc, #76]	; (8000eac <Hw_Timer_Tick+0x68>)
     WORK	:
			타이머인터럽트 발생시에 실행되는 함수(1ms 혹은 10ms 단위로 실행)
     ARG	: void
     RET	: void
---------------------------------------------------------------------------*/
void Hw_Timer_Tick(void)
 8000e60:	f104 0570 	add.w	r5, r4, #112	; 0x70
 8000e64:	e002      	b.n	8000e6c <Hw_Timer_Tick+0x28>
 8000e66:	3410      	adds	r4, #16

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e68:	42ac      	cmp	r4, r5
 8000e6a:	d01a      	beq.n	8000ea2 <Hw_Timer_Tick+0x5e>
	{
		if( Timer_Tbl[i].Timer_En == ON)   					// 타이머가 활성화 됬니?
 8000e6c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d1f8      	bne.n	8000e66 <Hw_Timer_Tick+0x22>
		{
			Timer_Tbl[i].Timer_Ctn--;  						// 타이머값 감소
 8000e74:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f824 3c06 	strh.w	r3, [r4, #-6]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <Hw_Timer_Tick+0x22>
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면
 8000e84:	f814 2c07 	ldrb.w	r2, [r4, #-7]
 8000e88:	2a01      	cmp	r2, #1

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e8a:	f834 2c04 	ldrh.w	r2, [r4, #-4]

			if(Timer_Tbl[i].Timer_Ctn == 0) 				// 타이머 오버플로어
			{
				if(Timer_Tbl[i].Timer_Mode == ONE_TIME)  	// 한번만 실행하는거면

				Timer_Tbl[i].Timer_En = OFF;     			// 타이머 OFF 한다.
 8000e8e:	bf08      	it	eq
 8000e90:	f804 3c08 	strbeq.w	r3, [r4, #-8]

				Timer_Tbl[i].Timer_Ctn = Timer_Tbl[i].Timer_Init; // 타이머 초기화
 8000e94:	f824 2c06 	strh.w	r2, [r4, #-6]

				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	3410      	adds	r4, #16
 8000e9c:	4798      	blx	r3

	if( Tmr_Ctn ) Tmr_Ctn--;
	
	
			   
	for(i=0; i<TIMER_MAX; i++)								// 타이머 갯수만큼
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	d1e4      	bne.n	8000e6c <Hw_Timer_Tick+0x28>
				(*Timer_Tbl[i].TmrFnct)();  				// 전달변수 없이 함수 실행
			}
		}
	}
	
}
 8000ea2:	bd38      	pop	{r3, r4, r5, pc}
 8000ea4:	20000280 	.word	0x20000280
 8000ea8:	20000284 	.word	0x20000284
 8000eac:	20000214 	.word	0x20000214

08000eb0 <Hw_Timer_ISR>:
void Hw_Timer_Setup( void );



void Hw_Timer_ISR(void)
{
 8000eb0:	b508      	push	{r3, lr}

	Hw_Timer_Tick();  
 8000eb2:	f640 6345 	movw	r3, #3653	; 0xe45
 8000eb6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000eba:	4798      	blx	r3
 8000ebc:	bd08      	pop	{r3, pc}
 8000ebe:	bf00      	nop

08000ec0 <Hw_Timer_Set>:
			void (*Fnct)(void),void *arg : 실행할 타이머 함수.
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
 8000ec0:	b410      	push	{r4}
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000ec2:	f240 240c 	movw	r4, #524	; 0x20c
 8000ec6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000eca:	eb04 1000 	add.w	r0, r4, r0, lsl #4
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 8000ece:	6083      	str	r3, [r0, #8]
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000ed0:	9b01      	ldr	r3, [sp, #4]
     RET
     	 	void
---------------------------------------------------------------------------*/
void Hw_Timer_Set(u8 TmrNum, u16 TmrData, u8 TmrMode, void (*Fnct)(void),void *arg)
{
	Timer_Tbl[TmrNum].Timer_Mode = TmrMode;    // 모트설정
 8000ed2:	7042      	strb	r2, [r0, #1]
	Timer_Tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
	Timer_Tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 8000ed4:	60c3      	str	r3, [r0, #12]
	Timer_Tbl[TmrNum].Timer_Ctn  = TmrData;
 8000ed6:	8041      	strh	r1, [r0, #2]
	Timer_Tbl[TmrNum].Timer_Init = TmrData;
 8000ed8:	8081      	strh	r1, [r0, #4]
}
 8000eda:	bc10      	pop	{r4}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Hw_Timer_Start>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Start(u8 TmrNum)
{
	if(TmrNum < TIMER_MAX)
 8000ee0:	2806      	cmp	r0, #6
 8000ee2:	d803      	bhi.n	8000eec <Hw_Timer_Start+0xc>
		Timer_Tbl[TmrNum].Timer_En = ON;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <Hw_Timer_Start+0x10>)
 8000ee6:	0100      	lsls	r0, r0, #4
 8000ee8:	2201      	movs	r2, #1
 8000eea:	541a      	strb	r2, [r3, r0]
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000020c 	.word	0x2000020c

08000ef4 <Hw_Timer_Delay_ms>:
     ARG
     RET
---------------------------------------------------------------------------*/
void Hw_Timer_Delay_ms( u16 DelayData )
{
	Tmr_Ctn = DelayData;
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <Hw_Timer_Delay_ms+0x10>)
 8000ef6:	8010      	strh	r0, [r2, #0]
	
	while( Tmr_Ctn );
 8000ef8:	8813      	ldrh	r3, [r2, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1fb      	bne.n	8000ef8 <Hw_Timer_Delay_ms+0x4>
}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000284 	.word	0x20000284

08000f08 <Hw_VCom_Init>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_VCom_Init( void )
{
 8000f08:	b508      	push	{r3, lr}
	Set_System();
 8000f0a:	f242 43b1 	movw	r3, #9393	; 0x24b1
 8000f0e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f12:	4798      	blx	r3
	Set_USBClock();
 8000f14:	f242 43d1 	movw	r3, #9425	; 0x24d1
 8000f18:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f1c:	4798      	blx	r3
	USB_Interrupts_Config();
 8000f1e:	f242 5315 	movw	r3, #9493	; 0x2515
 8000f22:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f26:	4798      	blx	r3
	USB_Init();	
 8000f28:	f243 0375 	movw	r3, #12405	; 0x3075
 8000f2c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f30:	4798      	blx	r3
 8000f32:	bd08      	pop	{r3, pc}

08000f34 <Hw_I2C_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_Init( void )
{
 8000f34:	b508      	push	{r3, lr}
	//-- I/O 초기화
	//
	#if HW_I2C_USE_SW_I2C == 1
	Hw_I2C_SW_Init();	
	#else
	Hw_I2C_HW_Init();		
 8000f36:	f640 738d 	movw	r3, #3981	; 0xf8d
 8000f3a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f3e:	4798      	blx	r3
 8000f40:	bd08      	pop	{r3, pc}
 8000f42:	bf00      	nop

08000f44 <Hw_I2C_HW_IO_Setup>:
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8000f44:	2204      	movs	r2, #4
 8000f46:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000f4a:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8000f4c:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_HW_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8000f50:	f041 0102 	orr.w	r1, r1, #2
 8000f54:	6011      	str	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8000f56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f022 020f 	bic.w	r2, r2, #15
 8000f60:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	f042 0203 	orr.w	r2, r2, #3
 8000f68:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	f042 020c 	orr.w	r2, r2, #12
 8000f70:	601a      	str	r2, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f78:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000f80:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	4770      	bx	lr

08000f8c <Hw_I2C_HW_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_HW_Init( void )
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
	u32 SR;


	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	
 8000f8e:	f640 7345 	movw	r3, #3909	; 0xf45
 8000f92:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000f96:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8000f98:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8000f9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000fa0:	2500      	movs	r5, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000fa2:	f245 4404 	movw	r4, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_HW_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8000fa6:	601d      	str	r5, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000fa8:	f2c4 0400 	movt	r4, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000fac:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8000fb0:	2524      	movs	r5, #36	; 0x24
 8000fb2:	6025      	str	r5, [r4, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000fb4:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000fb8:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8000fbc:	f248 041e 	movw	r4, #32798	; 0x801e
 8000fc0:	6004      	str	r4, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000fc2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000fc6:	2004      	movs	r0, #4


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000fc8:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 
 8000fcc:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000fce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000fd2:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8000fd4:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 4;				// 300ns / 100ns + 1 = 4 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8000fd8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8000fdc:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8000fde:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8000fe0:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8000fe4:	f020 0002 	bic.w	r0, r0, #2
 8000fe8:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8000fea:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 8000fec:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 8000ff0:	f040 0001 	orr.w	r0, r0, #1
 8000ff4:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 8000ff6:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 8000ffa:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 8000ffc:	6813      	ldr	r3, [r2, #0]
 8000ffe:	bd38      	pop	{r3, r4, r5, pc}

08001000 <Hw_Si47xx_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
 8001000:	b538      	push	{r3, r4, r5, lr}
	Hw_Wait(100);
 8001002:	f640 15e5 	movw	r5, #2533	; 0x9e5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001006:	f640 440c 	movw	r4, #3084	; 0xc0c
 800100a:	f2c4 0401 	movt	r4, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
 800100e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 8001016:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8001018:	2064      	movs	r0, #100	; 0x64
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 8001020:	47a8      	blx	r5
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001022:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(500);	
 8001024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
void Hw_Si47xx_Reset( void )
{
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
 8001028:	f023 0320 	bic.w	r3, r3, #32
 800102c:	6023      	str	r3, [r4, #0]
	Hw_Wait(500);	
 800102e:	47a8      	blx	r5
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001030:	6823      	ldr	r3, [r4, #0]
	Hw_Wait(100);
 8001032:	2064      	movs	r0, #100	; 0x64
	Hw_Wait(100);
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1	
	Hw_Wait(100);
	CLR_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 0	
	Hw_Wait(500);	
	SET_BIT( REG_GPIOB_ODR, 5 );		// RSTB = 1		
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6023      	str	r3, [r4, #0]
	Hw_Wait(100);
 800103a:	47a8      	blx	r5
 800103c:	bd38      	pop	{r3, r4, r5, pc}
 800103e:	bf00      	nop

08001040 <Hw_Si47xx_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Si47xx_Init( void )
{
 8001040:	b508      	push	{r3, lr}
	Hw_I2C_Init();
 8001042:	f640 7335 	movw	r3, #3893	; 0xf35
 8001046:	f6c0 0300 	movt	r3, #2048	; 0x800
 800104a:	4798      	blx	r3

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800104c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001050:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001054:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001056:	f241 0201 	movw	r2, #4097	; 0x1001

	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
 800105a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800105e:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001060:	6819      	ldr	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
	

	Hw_Si47xx_Reset();
 8001062:	f6c0 0200 	movt	r2, #2048	; 0x800
	//-- Reset 핀 GPIO 초기화 PB.5
	//
	//-- RSTB PB.5
	//
	REG_GPIOB_CRL &= ~(0x0F << (20));	// Clear
	REG_GPIOB_CRL |=  (0x03 << (20));	// MODE, PB.5 Output mode, max speed 50Mhz
 8001066:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800106a:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRL |=  (0x00 << (22));	// CNF,  PB.5 General purpose output push-pul	
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	6019      	str	r1, [r3, #0]
	

	Hw_Si47xx_Reset();
 8001070:	4790      	blx	r2
 8001072:	bd08      	pop	{r3, pc}

08001074 <Hw_SPI_Ch2_Init>:

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001074:	f640 4304 	movw	r3, #3076	; 0xc04
 8001078:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800107c:	6819      	ldr	r1, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800107e:	f44f 5260 	mov.w	r2, #14336	; 0x3800

	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
 8001082:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8001086:	6019      	str	r1, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 8001088:	6818      	ldr	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 800108a:	f2c4 0200 	movt	r2, #16384	; 0x4000
	// 1. GPIO Setup
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
 800108e:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8001092:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 8001094:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 8001096:	f643 0104 	movw	r1, #14340	; 0x3804
	//
	
	// PB12 - SPI2_NSS
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
 800109a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800109e:	6018      	str	r0, [r3, #0]
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80010a0:	6818      	ldr	r0, [r3, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80010a2:	f2c4 0100 	movt	r1, #16384	; 0x4000
	REG_GPIOB_CRH &= ~(0x0F << (16));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (16));	// MODE   - Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x02 << (18));	// CNF    - Alternate function output Push-pull
										     	    	
	// PB13 - SPI2_SCK
	REG_GPIOB_CRH &= ~(0x0F << (20));	// Clear
 80010a6:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 80010aa:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (20));	// MODE   - Output mode, max speed 50Mhz
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 80010b2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (22));	// CNF    - Alternate function output Push-pull
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80010ba:	6018      	str	r0, [r3, #0]

	// PB15 - SPI2_MOSI
	REG_GPIOB_CRH &= ~(0x0F << (28));	// Clear
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80010c2:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (28));	// MODE   - Output mode, max speed 50Mhz
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 80010ca:	6018      	str	r0, [r3, #0]
	REG_GPIOB_CRH |=  (0x02 << (30));	// CNF    - Alternate function output Push-pull
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	6018      	str	r0, [r3, #0]



	// 2. SPI 레지스터 설정 - 8bit, transmit-only mode, 2Mhz
	//
	REG_SPI2_CR1 = 0
 80010d4:	f244 031c 	movw	r3, #16412	; 0x401c
 80010d8:	6013      	str	r3, [r2, #0]
        | ( 0 <<  0 );  // CPHA      - Clock phase
        				//             0 : the first clock transition is the first data capture edge
        				//             1 : the second clock transition is the first data capture edge


	REG_SPI2_CR2 = 0
 80010da:	2304      	movs	r3, #4
 80010dc:	600b      	str	r3, [r1, #0]
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR1, 6 );
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4770      	bx	lr

080010e8 <Hw_SPI_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_Init(void)
{
 80010e8:	b510      	push	{r4, lr}
	static u8 Called = 0;


	if( Called == 1 ) return;
 80010ea:	4c08      	ldr	r4, [pc, #32]	; (800110c <Hw_SPI_Init+0x24>)
 80010ec:	7823      	ldrb	r3, [r4, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d00b      	beq.n	800110a <Hw_SPI_Init+0x22>


	// 1. Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<14);		// SPI2 Clock enable	APB1 : 36Mhz
 80010f2:	f241 031c 	movw	r3, #4124	; 0x101c
 80010f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001100:	601a      	str	r2, [r3, #0]
	
	Hw_SPI_Ch1_Init();
	Hw_SPI_Ch2_Init();
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <Hw_SPI_Init+0x28>)
 8001104:	4798      	blx	r3

	Called = 1;	
 8001106:	2301      	movs	r3, #1
 8001108:	7023      	strb	r3, [r4, #0]
 800110a:	bd10      	pop	{r4, pc}
 800110c:	20000286 	.word	0x20000286
 8001110:	08001075 	.word	0x08001075

08001114 <Hw_SPI_StartDMA>:
              
     RET     : void
---------------------------------------------------------------------------*/
void Hw_SPI_StartDMA( u8 Ch )
{
	switch( Ch )
 8001114:	2801      	cmp	r0, #1
 8001116:	d10b      	bne.n	8001130 <Hw_SPI_StartDMA+0x1c>
	{
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			SET_BIT( REG_SPI2_CR2, 1 );	// TX DMA Enable
 8001118:	f643 0304 	movw	r3, #14340	; 0x3804
 800111c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f042 0202 	orr.w	r2, r2, #2
 8001126:	601a      	str	r2, [r3, #0]
			SET_BIT( REG_SPI2_CR2, 0 );	// RX DMA Enable
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <Hw_SPI_Write8Bit>:
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001134:	2801      	cmp	r0, #1
 8001136:	d001      	beq.n	800113c <Hw_SPI_Write8Bit+0x8>
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 8001138:	2000      	movs	r0, #0
}
 800113a:	4770      	bx	lr
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 800113c:	f643 0008 	movw	r0, #14344	; 0x3808
u16 Hw_SPI_Write8Bit( u8 Ch, u8 WriteData )
{
	u32 TimeOut;
	u32 ReadData;

	switch( Ch )
 8001140:	f242 730f 	movw	r3, #9999	; 0x270f
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001144:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001148:	e002      	b.n	8001150 <Hw_SPI_Write8Bit+0x1c>
		case HW_SPI_CH1:
			break;
			
		case HW_SPI_CH2:
			TimeOut = 10000;	
			while( TimeOut-- )
 800114a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800114e:	d305      	bcc.n	800115c <Hw_SPI_Write8Bit+0x28>
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
 8001150:	6802      	ldr	r2, [r0, #0]
 8001152:	0792      	lsls	r2, r2, #30
 8001154:	d5f9      	bpl.n	800114a <Hw_SPI_Write8Bit+0x16>
			}
			if( TimeOut == 0 ) return 1;
 8001156:	b90b      	cbnz	r3, 800115c <Hw_SPI_Write8Bit+0x28>
 8001158:	2001      	movs	r0, #1
 800115a:	4770      	bx	lr
			REG_SPI2_DR = WriteData;
 800115c:	f643 030c 	movw	r3, #14348	; 0x380c
 8001160:	f2c4 0300 	movt	r3, #16384	; 0x4000

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 8001164:	f643 0008 	movw	r0, #14344	; 0x3808
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<1)) ) break;
			}
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;
 8001168:	6019      	str	r1, [r3, #0]

			
			TimeOut = 10000;	
			while( TimeOut-- )
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800116a:	f2c4 0000 	movt	r0, #16384	; 0x4000
			if( TimeOut == 0 ) return 1;
			REG_SPI2_DR = WriteData;

			
			TimeOut = 10000;	
			while( TimeOut-- )
 800116e:	f242 730f 	movw	r3, #9999	; 0x270f
 8001172:	e002      	b.n	800117a <Hw_SPI_Write8Bit+0x46>
 8001174:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001178:	d304      	bcc.n	8001184 <Hw_SPI_Write8Bit+0x50>
			{
				if( (REG_SPI2_SR & (1<<0)) ) break;
 800117a:	6802      	ldr	r2, [r0, #0]
 800117c:	07d2      	lsls	r2, r2, #31
 800117e:	d5f9      	bpl.n	8001174 <Hw_SPI_Write8Bit+0x40>
			}
			if( TimeOut == 0 ) return 1;
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0e9      	beq.n	8001158 <Hw_SPI_Write8Bit+0x24>
		
			ReadData = REG_SPI2_DR;
 8001184:	f643 030c 	movw	r3, #14348	; 0x380c
 8001188:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800118c:	681b      	ldr	r3, [r3, #0]
		case HW_SPI_CH3:
			break;
	}
	

    return 0;
 800118e:	2000      	movs	r0, #0
			}
			if( TimeOut == 0 ) return 1;
		
			ReadData = REG_SPI2_DR;
			
			break;
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <Hw_N5100G_FrameTick>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5100G_FrameTick( void )
{
 8001194:	b508      	push	{r3, lr}
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <Hw_N5100G_FrameTick+0x38>)
 8001198:	4798      	blx	r3
 800119a:	2801      	cmp	r0, #1
 800119c:	d00d      	beq.n	80011ba <Hw_N5100G_FrameTick+0x26>
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <Hw_N5100G_FrameTick+0x3c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
		{
			Hw_N5110G_Frame_DrawReq--;
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80011a2:	b903      	cbnz	r3, 80011a6 <Hw_N5100G_FrameTick+0x12>
 80011a4:	bd08      	pop	{r3, pc}
	{
		Hw_DMA_SPI2_Setup( (u32)Hw_N5110G_TxFrameBuf, (u32)Hw_N5110G_RxFrameBuf, HW_N5110G_BUF_WIDTH * HW_N5110G_BUF_HEIGHT );				
 80011a6:	480b      	ldr	r0, [pc, #44]	; (80011d4 <Hw_N5100G_FrameTick+0x40>)
 80011a8:	490b      	ldr	r1, [pc, #44]	; (80011d8 <Hw_N5100G_FrameTick+0x44>)
 80011aa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <Hw_N5100G_FrameTick+0x48>)
 80011b0:	4798      	blx	r3
		Hw_SPI_StartDMA( HW_SPI_CH2 );			
 80011b2:	2001      	movs	r0, #1
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <Hw_N5100G_FrameTick+0x4c>)
 80011b6:	4798      	blx	r3
 80011b8:	bd08      	pop	{r3, pc}
{
	static u8 Index = 0;
	
	if( Hw_DMA_SPI2_IsTransFinished() == 1 ) 
	{
		if( Hw_N5110G_Frame_DrawReq > 0 )
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <Hw_N5100G_FrameTick+0x3c>)
 80011bc:	6813      	ldr	r3, [r2, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <Hw_N5100G_FrameTick+0x10>
		{
			Hw_N5110G_Frame_DrawReq--;
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6013      	str	r3, [r2, #0]
		}
	}
	
	if( Hw_N5110G_Frame_DrawReq > 0 )
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0ec      	beq.n	80011a4 <Hw_N5100G_FrameTick+0x10>
 80011ca:	e7ec      	b.n	80011a6 <Hw_N5100G_FrameTick+0x12>
 80011cc:	080013d5 	.word	0x080013d5
 80011d0:	2000098c 	.word	0x2000098c
 80011d4:	20000790 	.word	0x20000790
 80011d8:	20000990 	.word	0x20000990
 80011dc:	0800135d 	.word	0x0800135d
 80011e0:	08001115 	.word	0x08001115

080011e4 <Hw_N5110G_Reset>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
 80011e4:	b510      	push	{r4, lr}
	HW_N5110G_RESET_ON();
 80011e6:	f640 440c 	movw	r4, #3084	; 0xc0c
 80011ea:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80011ee:	6822      	ldr	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80011f0:	f640 63f5 	movw	r3, #3829	; 0xef5
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80011f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
	Hw_Timer_Delay_ms(10);
 80011f8:	f6c0 0300 	movt	r3, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Reset(void)
{
	HW_N5110G_RESET_ON();
 80011fc:	6022      	str	r2, [r4, #0]
	Hw_Timer_Delay_ms(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	4798      	blx	r3
	HW_N5110G_RESET_OFF();
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001208:	6023      	str	r3, [r4, #0]
 800120a:	bd10      	pop	{r4, pc}

0800120c <Hw_N5110G_WriteCmd>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 800120c:	b510      	push	{r4, lr}
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800120e:	f640 440c 	movw	r4, #3084	; 0xc0c
 8001212:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001216:	6823      	ldr	r3, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
 8001218:	4601      	mov	r1, r0
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 800121a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 800121e:	f241 1335 	movw	r3, #4405	; 0x1135
---------------------------------------------------------------------------*/
u16 Hw_N5110G_WriteCmd( u8 CmdData )
{
	u16 Ret;
	
	HW_N5110G_SEL_CMD();
 8001222:	6022      	str	r2, [r4, #0]
	Ret = Hw_SPI_Write8Bit( HW_SPI_CH2, CmdData );
 8001224:	2001      	movs	r0, #1
 8001226:	f6c0 0300 	movt	r3, #2048	; 0x800
 800122a:	4798      	blx	r3
	HW_N5110G_SEL_DATA();
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001232:	6023      	str	r3, [r4, #0]
	
	return Ret;
}
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop

08001238 <Hw_N5110G_Goto>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 8001238:	b570      	push	{r4, r5, r6, lr}
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 800123a:	f241 240d 	movw	r4, #4621	; 0x120d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_N5110G_Goto( u8 x, u8 y )
{
 800123e:	4605      	mov	r5, r0
	u16 Ret = ERR_NONE;
	
	Ret |= Hw_N5110G_WriteCmd( 0x40|y );
 8001240:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001244:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8001248:	47a0      	blx	r4
 800124a:	4606      	mov	r6, r0
	Ret |= Hw_N5110G_WriteCmd( 0x80|x );
 800124c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
 8001250:	47a0      	blx	r4
 8001252:	4330      	orrs	r0, r6

	return Ret;
}
 8001254:	b280      	uxth	r0, r0
 8001256:	bd70      	pop	{r4, r5, r6, pc}

08001258 <Hw_N5110G_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <Hw_N5110G_Init+0xb8>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
{
 800125c:	b083      	sub	sp, #12
	u16 i;
	char Str[100];
	
	Hw_SPI_Init();	
 800125e:	4798      	blx	r3
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 8001260:	f640 4304 	movw	r3, #3076	; 0xc04
 8001264:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001268:	681a      	ldr	r2, [r3, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 800126a:	f640 440c 	movw	r4, #3084	; 0xc0c
	
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
 800126e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001272:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 8001274:	681a      	ldr	r2, [r3, #0]
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	


	HW_N5110G_RESET_OFF();
 8001276:	f2c4 0401 	movt	r4, #16385	; 0x4001
	Hw_SPI_Init();	
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
 800127a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800127e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001280:	681a      	ldr	r2, [r3, #0]
	HW_N5110G_RESET_OFF();
	HW_N5110G_SEL_CMD();
	
	Hw_N5110G_Reset();
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 8001282:	4d24      	ldr	r5, [pc, #144]	; (8001314 <Hw_N5110G_Init+0xbc>)
	
	//-- RESET PB.10
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 8));	// Clear
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	
 8001284:	601a      	str	r2, [r3, #0]

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 8001286:	681a      	ldr	r2, [r3, #0]
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 8001288:	2600      	movs	r6, #0
	REG_GPIOB_CRH |=  (0x03 << ( 8));	// MODE, PB.10 Output mode, max speed 50Mhz
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
 800128a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800128e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001290:	681a      	ldr	r2, [r3, #0]
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
 8001292:	4f21      	ldr	r7, [pc, #132]	; (8001318 <Hw_N5110G_Init+0xc0>)
	REG_GPIOB_CRH |=  (0x00 << (10));	// CNF,  PB.10 General purpose output push-pul	

	//-- DNC PB.11
	//
	REG_GPIOB_CRH &= ~(0x0F << (12));	// Clear
	REG_GPIOB_CRH |=  (0x03 << (12));	// MODE, PB.11 Output mode, max speed 50Mhz
 8001294:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001298:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x00 << (14));	// CNF,  PB.11 General purpose output push-pul	
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	601a      	str	r2, [r3, #0]


	HW_N5110G_RESET_OFF();
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a4:	6023      	str	r3, [r4, #0]
	HW_N5110G_SEL_CMD();
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012ac:	6023      	str	r3, [r4, #0]
	
	Hw_N5110G_Reset();
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <Hw_N5110G_Init+0xc4>)
 80012b0:	4798      	blx	r3
	
	Hw_N5110G_WriteCmd(0x21);	// H = 1
 80012b2:	2021      	movs	r0, #33	; 0x21
 80012b4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0xC6);	// Write Vop
 80012b6:	20c6      	movs	r0, #198	; 0xc6
 80012b8:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x06);	// Set Temperature Coefficient
 80012ba:	2006      	movs	r0, #6
 80012bc:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x13);	// Set Bias System
 80012be:	2013      	movs	r0, #19
 80012c0:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x20);	// H = 0
 80012c2:	2020      	movs	r0, #32
 80012c4:	47a8      	blx	r5
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
 80012c6:	200c      	movs	r0, #12
 80012c8:	47a8      	blx	r5
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
 80012ca:	4631      	mov	r1, r6
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <Hw_N5110G_Init+0xc8>)
 80012ce:	4630      	mov	r0, r6
 80012d0:	4798      	blx	r3
	
	
	HW_N5110G_SEL_DATA();
 80012d2:	6823      	ldr	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80012d4:	2121      	movs	r1, #33	; 0x21
	Hw_N5110G_WriteCmd(0x0C);	// Set display configuration
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
 80012d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012da:	6023      	str	r3, [r4, #0]
	Hw_N5110G_Frame_Index    = 0;	
 80012dc:	4c11      	ldr	r4, [pc, #68]	; (8001324 <Hw_N5110G_Init+0xcc>)
	Hw_N5110G_Frame_DrawReq	= 0;						
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80012de:	2202      	movs	r2, #2
 80012e0:	9600      	str	r6, [sp, #0]
 80012e2:	2003      	movs	r0, #3
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <Hw_N5110G_Init+0xd0>)
								//  - normal mode							
	Hw_N5110G_Goto(0,0);
	
	
	HW_N5110G_SEL_DATA();
	Hw_N5110G_Frame_Index    = 0;	
 80012e6:	8026      	strh	r6, [r4, #0]
	Hw_N5110G_Frame_DrawReq	= 0;						
 80012e8:	603e      	str	r6, [r7, #0]
	
	
	Hw_Timer_Set  ( HW_TIMER_CH_GLCD, 33, LOOP_TIME, Hw_N5100G_FrameTick, NULL );
 80012ea:	4c10      	ldr	r4, [pc, #64]	; (800132c <Hw_N5110G_Init+0xd4>)
 80012ec:	47a0      	blx	r4
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <Hw_N5110G_Init+0xd8>)
 80012f0:	2003      	movs	r0, #3
 80012f2:	4798      	blx	r3
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <Hw_N5110G_Init+0xdc>)
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 80012f6:	4631      	mov	r1, r6
     TITLE   : Hw_5110G_Init
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_Init(void)
 80012f8:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
	{
		Hw_N5110G_TxFrameBuf[i] = 0;
 80012fc:	f803 1f01 	strb.w	r1, [r3, #1]!
u16 Hw_N5110G_Clear( void )
{
	u16 Ret;
	u16 i;
	
	for( i=0; i<6*84; i++ )
 8001300:	4293      	cmp	r3, r2
 8001302:	d1fb      	bne.n	80012fc <Hw_N5110G_Init+0xa4>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_N5110G_DrawRequest(void)
{		
	Hw_N5110G_Frame_DrawReq++;	
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3302      	adds	r3, #2
 8001308:	603b      	str	r3, [r7, #0]
	Hw_Timer_Start( HW_TIMER_CH_GLCD );		
	
	
	Hw_N5110G_Clear();	
	Hw_N5110G_DrawRequest();
}
 800130a:	b003      	add	sp, #12
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	bf00      	nop
 8001310:	080010e9 	.word	0x080010e9
 8001314:	0800120d 	.word	0x0800120d
 8001318:	2000098c 	.word	0x2000098c
 800131c:	080011e5 	.word	0x080011e5
 8001320:	08001239 	.word	0x08001239
 8001324:	20000988 	.word	0x20000988
 8001328:	08001195 	.word	0x08001195
 800132c:	08000ec1 	.word	0x08000ec1
 8001330:	08000ee1 	.word	0x08000ee1
 8001334:	2000078f 	.word	0x2000078f

08001338 <Hw_DMA_Init>:
void Hw_DMA_Init(void)
{
	static u8 Called = 0;


	if( Called == 1 ) return;
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <Hw_DMA_Init+0x20>)
 800133a:	7813      	ldrb	r3, [r2, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d009      	beq.n	8001354 <Hw_DMA_Init+0x1c>


	// 1. Clock Enable
	//
	REG_RCC_AHBENR |= (1<<0);		// DMA1 Clock enable
 8001340:	f241 0314 	movw	r3, #4116	; 0x1014
 8001344:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	f041 0101 	orr.w	r1, r1, #1
 800134e:	6019      	str	r1, [r3, #0]
	

	Called = 1;	
 8001350:	2301      	movs	r3, #1
 8001352:	7013      	strb	r3, [r2, #0]
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000287 	.word	0x20000287

0800135c <Hw_DMA_SPI2_Setup>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
 800135c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8001360:	2344      	movs	r3, #68	; 0x44
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8001362:	274c      	movs	r7, #76	; 0x4c
 8001364:	f643 040c 	movw	r4, #14348	; 0x380c
	REG_DMA1_CMAR(4)  = ReadAddress;
 8001368:	2650      	movs	r6, #80	; 0x50
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 800136a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800136e:	f04f 0c00 	mov.w	ip, #0
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8001372:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001376:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(4)  = ReadAddress;
 800137a:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(4) = BufSize;
 800137e:	2548      	movs	r5, #72	; 0x48
void Hw_DMA_SPI2_Setup( u32 WriteAddress, u32 ReadAddress, u32 BufSize )
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
 8001380:	f8c3 c000 	str.w	ip, [r3]
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8001384:	f2c4 0502 	movt	r5, #16386	; 0x4002
{
	
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
 8001388:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(4)  = ReadAddress;
 800138a:	6031      	str	r1, [r6, #0]
	REG_DMA1_CNDTR(4) = BufSize;
	
	
	
	REG_DMA1_CCR(4) = 0
 800138c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	//-- DMA1 Ch4 - SPI2_RX
	//   
	REG_DMA1_CCR(4)   = 0;
	REG_DMA1_CPAR(4)  = (u32)&REG_SPI2_DR;	 
	REG_DMA1_CMAR(4)  = ReadAddress;
	REG_DMA1_CNDTR(4) = BufSize;
 8001390:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(4) = 0
 8001392:	6019      	str	r1, [r3, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 8001394:	f8d3 8000 	ldr.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 8001398:	2158      	movs	r1, #88	; 0x58
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 800139a:	2760      	movs	r7, #96	; 0x60
	REG_DMA1_CMAR(5)  = WriteAddress;
 800139c:	2664      	movs	r6, #100	; 0x64
	REG_DMA1_CNDTR(5) = BufSize;
 800139e:	255c      	movs	r5, #92	; 0x5c
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
 80013a0:	f048 0801 	orr.w	r8, r8, #1
 80013a4:	f8c3 8000 	str.w	r8, [r3]
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80013a8:	f2c4 0102 	movt	r1, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
	REG_DMA1_CNDTR(5) = BufSize;
	
	
	
	REG_DMA1_CCR(5) = 0
 80013ac:	2390      	movs	r3, #144	; 0x90
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80013ae:	f2c4 0702 	movt	r7, #16386	; 0x4002
	REG_DMA1_CMAR(5)  = WriteAddress;
 80013b2:	f2c4 0602 	movt	r6, #16386	; 0x4002
	REG_DMA1_CNDTR(5) = BufSize;
 80013b6:	f2c4 0502 	movt	r5, #16386	; 0x4002
    REG_DMA1_CCR(4) |= (1<<0);	// Channel enable
        
        
	//-- DMA1 Ch5 - SPI2_TX
	//   
	REG_DMA1_CCR(5)   = 0;
 80013ba:	f8c1 c000 	str.w	ip, [r1]
	REG_DMA1_CPAR(5)  = (u32)&REG_SPI2_DR;	 
 80013be:	603c      	str	r4, [r7, #0]
	REG_DMA1_CMAR(5)  = WriteAddress;
 80013c0:	6030      	str	r0, [r6, #0]
	REG_DMA1_CNDTR(5) = BufSize;
 80013c2:	602a      	str	r2, [r5, #0]
	
	
	
	REG_DMA1_CCR(5) = 0
 80013c4:	600b      	str	r3, [r1, #0]
						//             1 : Enabled
        | ( 0 <<  0 );  // EN        - Channel enable
        				//             0 : Disabled
        				//             1 : Enabled
        				
    REG_DMA1_CCR(5) |= (1<<0);	// Channel enable
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	600b      	str	r3, [r1, #0]
}
 80013ce:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80013d2:	4770      	bx	lr

080013d4 <Hw_DMA_SPI2_IsTransFinished>:
---------------------------------------------------------------------------*/
u8 Hw_DMA_SPI2_IsTransFinished( void )
{
	u8 Ret = 0;
	
	if( REG_DMA1_ISR & (1<<13) )
 80013d4:	2300      	movs	r3, #0
 80013d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 80013e0:	d00a      	beq.n	80013f8 <Hw_DMA_SPI2_IsTransFinished+0x24>
	{
		if( REG_DMA1_ISR & (1<<17) )
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80013e8:	d006      	beq.n	80013f8 <Hw_DMA_SPI2_IsTransFinished+0x24>
		{
			REG_DMA1_IFCR = (1<<17) | (1<<13);
 80013ea:	2304      	movs	r3, #4
 80013ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f0:	f44f 3208 	mov.w	r2, #139264	; 0x22000
 80013f4:	601a      	str	r2, [r3, #0]
			Ret = 1;
 80013f6:	2001      	movs	r0, #1
		}
	}
	return Ret;
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop

080013fc <Hw_I2C_IMU_IO_Setup>:
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 80013fc:	2204      	movs	r2, #4
 80013fe:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001402:	6811      	ldr	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 8001404:	f640 4304 	movw	r3, #3076	; 0xc04
void Hw_I2C_IMU_IO_Setup( void )
{

	//-- I2C1 Remap
	//
	SET_BIT( REG_AFIO_MAPR, 1 );	// SCL/PB8, SDA/PB9)
 8001408:	f041 0102 	orr.w	r1, r1, #2
 800140c:	6011      	str	r1, [r2, #0]


	//-- SCL PB.8
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 0));	// Clear
 800140e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f022 020f 	bic.w	r2, r2, #15
 8001418:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 0));	// MODE, PB.8 Output mode, max speed 50Mhz
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	f042 0203 	orr.w	r2, r2, #3
 8001420:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 2));	// CNF,  PB.8 Alternate function output Open-drain	
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	f042 020c 	orr.w	r2, r2, #12
 8001428:	601a      	str	r2, [r3, #0]


	//-- SDA PB.9
	//
	REG_GPIOB_CRH &= ~(0x0F << ( 4));	// Clear
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001430:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 4));	// MODE, PB.9 Output mode, max speed 50Mhz
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001438:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRH |=  (0x03 << ( 6));	// CNF,  PB.9 Alternate function output Open-drain	
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	4770      	bx	lr

08001444 <Hw_I2C_IMU_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_I2C_IMU_Init( void )
{
 8001444:	b570      	push	{r4, r5, r6, lr}
	static u8 power_on = FALSE;
	u32 SR;



	if( power_on == TRUE ) return;
 8001446:	4c1e      	ldr	r4, [pc, #120]	; (80014c0 <Hw_I2C_IMU_Init+0x7c>)
 8001448:	7823      	ldrb	r3, [r4, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d036      	beq.n	80014bc <Hw_I2C_IMU_Init+0x78>


	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <Hw_I2C_IMU_Init+0x80>)
 8001450:	4798      	blx	r3


	REG_I2C1_CR1 = 0;
 8001452:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001456:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800145a:	2600      	movs	r6, #0

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800145c:	f245 4504 	movw	r5, #21508	; 0x5404
	//-- I/O 초기화
	//
	Hw_I2C_IMU_IO_Setup();	


	REG_I2C1_CR1 = 0;
 8001460:	601e      	str	r6, [r3, #0]

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 8001462:	f2c4 0500 	movt	r5, #16384	; 0x4000
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001466:	f245 401c 	movw	r0, #21532	; 0x541c

	REG_I2C1_CR1 = 0;

	//-- 1. I2C 클럭 입력 주파수 설정 
	//
	REG_I2C1_CR2 = 0 
 800146a:	2624      	movs	r6, #36	; 0x24
 800146c:	602e      	str	r6, [r5, #0]
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 800146e:	f2c4 0000 	movt	r0, #16384	; 0x4000
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8001472:	f245 4120 	movw	r1, #21536	; 0x5420
	REG_I2C1_CR2 = 0 
				| ( 36 << 0 );		// FREQ = 36Mhz

	//-- 2. Clock Control 
	//
	REG_I2C1_CCR = 0 
 8001476:	f248 051e 	movw	r5, #32798	; 0x801e
 800147a:	6005      	str	r5, [r0, #0]
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 800147c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001480:	200b      	movs	r0, #11


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001482:	f241 021c 	movw	r2, #4124	; 0x101c
				| (  0 << 14 )		// Duty Tlow/Thig = 2
				| ( 30 <<  0 );		// 30*27ns + 2*30*27ns = 400Khz

	//-- 3. Maximum Rise Time  
	//
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 
 8001486:	6008      	str	r0, [r1, #0]


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001488:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800148c:	6810      	ldr	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 800148e:	f245 4114 	movw	r1, #21524	; 0x5414
	REG_I2C1_TRISE = 11;			// 300ns / 28ns + 1 = 11 


	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable
 8001492:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8001496:	6010      	str	r0, [r2, #0]


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 8001498:	6818      	ldr	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 800149a:	f245 4218 	movw	r2, #21528	; 0x5418
	//-- Clock Enable
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
 800149e:	f020 0002 	bic.w	r0, r0, #2
 80014a2:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80014a4:	6818      	ldr	r0, [r3, #0]

	SR = REG_I2C1_SR1;
 80014a6:	f2c4 0100 	movt	r1, #16384	; 0x4000
	//
	REG_RCC_APB1ENR |= (1<<21);		// I2C1 Clock enable


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	
 80014aa:	f040 0001 	orr.w	r0, r0, #1
 80014ae:	6018      	str	r0, [r3, #0]

	SR = REG_I2C1_SR1;
	SR = REG_I2C1_SR2;
 80014b0:	f2c4 0200 	movt	r2, #16384	; 0x4000


	CLR_BIT( REG_I2C1_CR1, 1 );		// I2C Mode		
	SET_BIT( REG_I2C1_CR1, 0 );		// Peripheral enable	

	SR = REG_I2C1_SR1;
 80014b4:	680b      	ldr	r3, [r1, #0]
	SR = REG_I2C1_SR2;
 80014b6:	6813      	ldr	r3, [r2, #0]


	power_on = TRUE;
 80014b8:	2301      	movs	r3, #1
 80014ba:	7023      	strb	r3, [r4, #0]
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	bf00      	nop
 80014c0:	20000288 	.word	0x20000288
 80014c4:	080013fd 	.word	0x080013fd

080014c8 <Hw_I2C_IMU_GetErrStatus>:
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 80014c8:	f245 4314 	movw	r3, #21524	; 0x5414
 80014cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80014d0:	681a      	ldr	r2, [r3, #0]
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80014d2:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
 80014d4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80014d8:	681a      	ldr	r2, [r3, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;
 80014da:	bf14      	ite	ne
 80014dc:	200b      	movne	r0, #11
 80014de:	2000      	moveq	r0, #0

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80014e0:	681b      	ldr	r3, [r3, #0]
u16 Hw_I2C_IMU_GetErrStatus( void )
{
	u16 Err = 0;

	if( IS_SET_BIT(REG_I2C1_SR1, 11) ) Err = 11;
	if( IS_SET_BIT(REG_I2C1_SR1, 10) ) Err = 10;
 80014e2:	f411 6f80 	tst.w	r1, #1024	; 0x400
 80014e6:	bf18      	it	ne
 80014e8:	200a      	movne	r0, #10
	if( IS_SET_BIT(REG_I2C1_SR1,  9) ) Err =  9;
 80014ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 80014ee:	bf18      	it	ne
 80014f0:	2009      	movne	r0, #9
	if( IS_SET_BIT(REG_I2C1_SR1,  8) ) Err =  8;
 80014f2:	f413 7f80 	tst.w	r3, #256	; 0x100

	return Err;
}
 80014f6:	bf18      	it	ne
 80014f8:	2008      	movne	r0, #8
 80014fa:	4770      	bx	lr

080014fc <Hw_I2C_IMU_ReadRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 80014fe:	1e5f      	subs	r7, r3, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_ReadRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_reg, u16 len )
{
 8001500:	b08d      	sub	sp, #52	; 0x34
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;


	if( len > 0 ) LastIndex = len - 1;
 8001502:	b2ff      	uxtb	r7, r7
 8001504:	b903      	cbnz	r3, 8001508 <Hw_I2C_IMU_ReadRegs+0xc>
    u16 Err = 0;
	u8  i;
	u32 TimeOut;
	volatile u32 SR1;
	volatile u32 SR2;
	u8  LastIndex = 0;
 8001506:	461f      	mov	r7, r3
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8001508:	f245 4614 	movw	r6, #21524	; 0x5414
 800150c:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001510:	6835      	ldr	r5, [r6, #0]
			SR2 = REG_I2C1_SR2;
 8001512:	f245 4418 	movw	r4, #21528	; 0x5418
	while(1)
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
 8001516:	9501      	str	r5, [sp, #4]
			SR2 = REG_I2C1_SR2;
 8001518:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800151c:	6824      	ldr	r4, [r4, #0]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800151e:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	{

			//Lb_printf("C1 %x\n", REG_I2C1_CR1);

			SR1 = REG_I2C1_SR1;
			SR2 = REG_I2C1_SR2;
 8001522:	9402      	str	r4, [sp, #8]
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001524:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8001528:	f8d5 c000 	ldr.w	ip, [r5]
 800152c:	f242 7410 	movw	r4, #10000	; 0x2710
 8001530:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
 8001534:	f8c5 c000 	str.w	ip, [r5]
 8001538:	e002      	b.n	8001540 <Hw_I2C_IMU_ReadRegs+0x44>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800153a:	3c01      	subs	r4, #1
 800153c:	f000 80c7 	beq.w	80016ce <Hw_I2C_IMU_ReadRegs+0x1d2>
	{
		Reg = *reg_addr;
 8001540:	6835      	ldr	r5, [r6, #0]
 8001542:	9503      	str	r5, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001544:	9d03      	ldr	r5, [sp, #12]
 8001546:	f015 0f01 	tst.w	r5, #1
 800154a:	d0f6      	beq.n	800153a <Hw_I2C_IMU_ReadRegs+0x3e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800154c:	f245 4618 	movw	r6, #21528	; 0x5418

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001550:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001554:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001558:	e002      	b.n	8001560 <Hw_I2C_IMU_ReadRegs+0x64>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800155a:	3c01      	subs	r4, #1
 800155c:	f000 80b7 	beq.w	80016ce <Hw_I2C_IMU_ReadRegs+0x1d2>
	{
		Reg = *reg_addr;
 8001560:	6835      	ldr	r5, [r6, #0]
 8001562:	9504      	str	r5, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001564:	9d04      	ldr	r5, [sp, #16]
 8001566:	f015 0f01 	tst.w	r5, #1
 800156a:	d0f6      	beq.n	800155a <Hw_I2C_IMU_ReadRegs+0x5e>



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800156c:	f245 4410 	movw	r4, #21520	; 0x5410
 8001570:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001574:	0040      	lsls	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001576:	f245 4614 	movw	r6, #21524	; 0x5414



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800157a:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800157c:	f2c4 0600 	movt	r6, #16384	; 0x4000



			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8001580:	f242 7410 	movw	r4, #10000	; 0x2710
 8001584:	e002      	b.n	800158c <Hw_I2C_IMU_ReadRegs+0x90>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001586:	3c01      	subs	r4, #1
 8001588:	f000 80a4 	beq.w	80016d4 <Hw_I2C_IMU_ReadRegs+0x1d8>
	{
		Reg = *reg_addr;
 800158c:	6835      	ldr	r5, [r6, #0]
 800158e:	9505      	str	r5, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001590:	9d05      	ldr	r5, [sp, #20]
 8001592:	f015 0f02 	tst.w	r5, #2
 8001596:	d0f6      	beq.n	8001586 <Hw_I2C_IMU_ReadRegs+0x8a>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001598:	f245 4418 	movw	r4, #21528	; 0x5418
 800159c:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80015a0:	6824      	ldr	r4, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015a2:	f245 4614 	movw	r6, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80015a6:	9402      	str	r4, [sp, #8]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015a8:	f2c4 0600 	movt	r6, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80015ac:	f242 7410 	movw	r4, #10000	; 0x2710
 80015b0:	e002      	b.n	80015b8 <Hw_I2C_IMU_ReadRegs+0xbc>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80015b2:	3c01      	subs	r4, #1
 80015b4:	f000 8096 	beq.w	80016e4 <Hw_I2C_IMU_ReadRegs+0x1e8>
	{
		Reg = *reg_addr;
 80015b8:	6835      	ldr	r5, [r6, #0]
 80015ba:	9506      	str	r5, [sp, #24]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80015bc:	9d06      	ldr	r5, [sp, #24]
 80015be:	f015 0f80 	tst.w	r5, #128	; 0x80
 80015c2:	d0f6      	beq.n	80015b2 <Hw_I2C_IMU_ReadRegs+0xb6>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015c4:	f245 4614 	movw	r6, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80015c8:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015cc:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80015d0:	e002      	b.n	80015d8 <Hw_I2C_IMU_ReadRegs+0xdc>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80015d2:	3c01      	subs	r4, #1
 80015d4:	f000 8086 	beq.w	80016e4 <Hw_I2C_IMU_ReadRegs+0x1e8>
	{
		Reg = *reg_addr;
 80015d8:	6835      	ldr	r5, [r6, #0]
 80015da:	9507      	str	r5, [sp, #28]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80015dc:	9d07      	ldr	r5, [sp, #28]
 80015de:	f015 0f80 	tst.w	r5, #128	; 0x80
 80015e2:	d0f6      	beq.n	80015d2 <Hw_I2C_IMU_ReadRegs+0xd6>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80015e4:	f245 4410 	movw	r4, #21520	; 0x5410
 80015e8:	f2c4 0400 	movt	r4, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015ec:	f245 4514 	movw	r5, #21524	; 0x5414
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80015f0:	6021      	str	r1, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80015f2:	f2c4 0500 	movt	r5, #16384	; 0x4000
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;						
 80015f6:	f242 7110 	movw	r1, #10000	; 0x2710
 80015fa:	e001      	b.n	8001600 <Hw_I2C_IMU_ReadRegs+0x104>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80015fc:	3901      	subs	r1, #1
 80015fe:	d075      	beq.n	80016ec <Hw_I2C_IMU_ReadRegs+0x1f0>
	{
		Reg = *reg_addr;
 8001600:	682c      	ldr	r4, [r5, #0]
 8001602:	9408      	str	r4, [sp, #32]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001604:	9c08      	ldr	r4, [sp, #32]
 8001606:	f014 0f04 	tst.w	r4, #4
 800160a:	d0f7      	beq.n	80015fc <Hw_I2C_IMU_ReadRegs+0x100>



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800160c:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8001610:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001614:	680c      	ldr	r4, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001616:	f245 4514 	movw	r5, #21524	; 0x5414



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800161a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800161e:	600c      	str	r4, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001620:	f2c4 0500 	movt	r5, #16384	; 0x4000



			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001624:	f242 7110 	movw	r1, #10000	; 0x2710
 8001628:	e001      	b.n	800162e <Hw_I2C_IMU_ReadRegs+0x132>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800162a:	3901      	subs	r1, #1
 800162c:	d04f      	beq.n	80016ce <Hw_I2C_IMU_ReadRegs+0x1d2>
	{
		Reg = *reg_addr;
 800162e:	682c      	ldr	r4, [r5, #0]
 8001630:	9409      	str	r4, [sp, #36]	; 0x24

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001632:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001634:	f014 0f01 	tst.w	r4, #1
 8001638:	d0f7      	beq.n	800162a <Hw_I2C_IMU_ReadRegs+0x12e>
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800163a:	f245 4110 	movw	r1, #21520	; 0x5410
 800163e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001642:	f040 0001 	orr.w	r0, r0, #1
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001646:	f245 4414 	movw	r4, #21524	; 0x5414
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 800164a:	6008      	str	r0, [r1, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800164c:	f2c4 0400 	movt	r4, #16384	; 0x4000
			}


			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read
 8001650:	f242 7110 	movw	r1, #10000	; 0x2710
 8001654:	e001      	b.n	800165a <Hw_I2C_IMU_ReadRegs+0x15e>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001656:	3901      	subs	r1, #1
 8001658:	d03c      	beq.n	80016d4 <Hw_I2C_IMU_ReadRegs+0x1d8>
	{
		Reg = *reg_addr;
 800165a:	6820      	ldr	r0, [r4, #0]
 800165c:	900a      	str	r0, [sp, #40]	; 0x28

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 800165e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001660:	0780      	lsls	r0, r0, #30
 8001662:	d5f8      	bpl.n	8001656 <Hw_I2C_IMU_ReadRegs+0x15a>
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001664:	f245 4118 	movw	r1, #21528	; 0x5418
 8001668:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800166c:	6809      	ldr	r1, [r1, #0]
 800166e:	9102      	str	r1, [sp, #8]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 8001670:	b353      	cbz	r3, 80016c8 <Hw_I2C_IMU_ReadRegs+0x1cc>
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8001672:	f44f 45a8 	mov.w	r5, #21504	; 0x5400
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001676:	f245 4414 	movw	r4, #21524	; 0x5414


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 800167a:	f245 4c10 	movw	ip, #21520	; 0x5410
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 800167e:	2600      	movs	r6, #0
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8001680:	f2c4 0500 	movt	r5, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001684:	f2c4 0400 	movt	r4, #16384	; 0x4000


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 8001688:	f2c4 0c00 	movt	ip, #16384	; 0x4000
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 800168c:	6829      	ldr	r1, [r5, #0]

			//-- Read DATA
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
 800168e:	42b7      	cmp	r7, r6
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
 8001690:	bf9d      	ittte	ls
 8001692:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 8001696:	6029      	strls	r1, [r5, #0]
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 8001698:	6829      	ldrls	r1, [r5, #0]
			//
			for( i=0; i<len; i++ )
			{
				if( i < LastIndex )
				{
					SET_BIT( REG_I2C1_CR1, 10 );	// ACK Enable					
 800169a:	f441 6180 	orrhi.w	r1, r1, #1024	; 0x400
				}
				else
				{
					CLR_BIT( REG_I2C1_CR1, 10 );	// ACK Disable
					SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800169e:	bf98      	it	ls
 80016a0:	f441 7100 	orrls.w	r1, r1, #512	; 0x200
 80016a4:	6029      	str	r1, [r5, #0]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80016a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80016aa:	e001      	b.n	80016b0 <Hw_I2C_IMU_ReadRegs+0x1b4>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80016ac:	3901      	subs	r1, #1
 80016ae:	d01b      	beq.n	80016e8 <Hw_I2C_IMU_ReadRegs+0x1ec>
	{
		Reg = *reg_addr;
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	900b      	str	r0, [sp, #44]	; 0x2c

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80016b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80016b6:	0640      	lsls	r0, r0, #25
 80016b8:	d5f8      	bpl.n	80016ac <Hw_I2C_IMU_ReadRegs+0x1b0>


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80016ba:	f8dc 0000 	ldr.w	r0, [ip]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80016be:	1c71      	adds	r1, r6, #1


				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 6, 10000 );
				if( Ret == 0 )
				{
					ptr_reg[i] = REG_I2C1_DR;
 80016c0:	5590      	strb	r0, [r2, r6]
			}


			//-- Read DATA
			//
			for( i=0; i<len; i++ )
 80016c2:	b2ce      	uxtb	r6, r1
 80016c4:	42b3      	cmp	r3, r6
 80016c6:	d8e1      	bhi.n	800168c <Hw_I2C_IMU_ReadRegs+0x190>
	}


	if( Err == 0 )
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <Hw_I2C_IMU_ReadRegs+0x1f4>)
 80016ca:	4798      	blx	r3
 80016cc:	e000      	b.n	80016d0 <Hw_I2C_IMU_ReadRegs+0x1d4>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80016ce:	2002      	movs	r0, #2
	}
	

    return Err;

}
 80016d0:	b00d      	add	sp, #52	; 0x34
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80016d4:	f245 4318 	movw	r3, #21528	; 0x5418
 80016d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80016dc:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 80016de:	2003      	movs	r0, #3
			//-- ADDR
			//
			REG_I2C1_DR = (i2c_addr<<1) | (1<<0) ;	// ADDR Read

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	e7f5      	b.n	80016d0 <Hw_I2C_IMU_ReadRegs+0x1d4>

			
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 80016e4:	2004      	movs	r0, #4
 80016e6:	e7f3      	b.n	80016d0 <Hw_I2C_IMU_ReadRegs+0x1d4>
				{
					ptr_reg[i] = REG_I2C1_DR;
				}
				else
				{
					Err = HW_I2C_ERR_RXE;
 80016e8:	2005      	movs	r0, #5
 80016ea:	e7f1      	b.n	80016d0 <Hw_I2C_IMU_ReadRegs+0x1d4>


			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_STOP;
 80016ec:	2006      	movs	r0, #6
 80016ee:	e7ef      	b.n	80016d0 <Hw_I2C_IMU_ReadRegs+0x1d4>
 80016f0:	080014c9 	.word	0x080014c9

080016f4 <Hw_I2C_IMU_MPU6050_ReadReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 80016f4:	4603      	mov	r3, r0
 80016f6:	b510      	push	{r4, lr}
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 80016f8:	f241 44fd 	movw	r4, #5373	; 0x14fd
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_ReadReg( u8 reg_addr, u8 *ptr_reg )
{
 80016fc:	460a      	mov	r2, r1
	return Hw_I2C_IMU_ReadRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, ptr_reg, 1 );
 80016fe:	2068      	movs	r0, #104	; 0x68
 8001700:	4619      	mov	r1, r3
 8001702:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001706:	2301      	movs	r3, #1
 8001708:	47a0      	blx	r4
}
 800170a:	bd10      	pop	{r4, pc}

0800170c <Hw_I2C_IMU_WriteRegs>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 800170c:	b570      	push	{r4, r5, r6, lr}

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800170e:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
 8001712:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001716:	6825      	ldr	r5, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001718:	f245 4614 	movw	r6, #21524	; 0x5414

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 800171c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8001720:	6025      	str	r5, [r4, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
 8001722:	b086      	sub	sp, #24

	while(1)
	{
			//-- START
			//
			SET_BIT( REG_I2C1_CR1, 8 );
 8001724:	f242 7410 	movw	r4, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001728:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800172c:	e001      	b.n	8001732 <Hw_I2C_IMU_WriteRegs+0x26>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800172e:	3c01      	subs	r4, #1
 8001730:	d063      	beq.n	80017fa <Hw_I2C_IMU_WriteRegs+0xee>
	{
		Reg = *reg_addr;
 8001732:	6835      	ldr	r5, [r6, #0]
 8001734:	9500      	str	r5, [sp, #0]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001736:	9d00      	ldr	r5, [sp, #0]
 8001738:	f015 0f01 	tst.w	r5, #1
 800173c:	d0f7      	beq.n	800172e <Hw_I2C_IMU_WriteRegs+0x22>
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800173e:	f245 4410 	movw	r4, #21520	; 0x5410
 8001742:	0040      	lsls	r0, r0, #1
 8001744:	f2c4 0400 	movt	r4, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001748:	f245 4514 	movw	r5, #21524	; 0x5414
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 800174c:	6020      	str	r0, [r4, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 800174e:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//Lb_printf("S1 %x\n", REG_I2C1_SR1);
			//Lb_printf("S1 %x\n", REG_I2C1_SR2);

			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 
 8001752:	f242 7010 	movw	r0, #10000	; 0x2710
 8001756:	e001      	b.n	800175c <Hw_I2C_IMU_WriteRegs+0x50>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001758:	3801      	subs	r0, #1
 800175a:	d046      	beq.n	80017ea <Hw_I2C_IMU_WriteRegs+0xde>
	{
		Reg = *reg_addr;
 800175c:	682c      	ldr	r4, [r5, #0]
 800175e:	9401      	str	r4, [sp, #4]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001760:	9c01      	ldr	r4, [sp, #4]
 8001762:	f014 0f02 	tst.w	r4, #2
 8001766:	d0f7      	beq.n	8001758 <Hw_I2C_IMU_WriteRegs+0x4c>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001768:	f245 4018 	movw	r0, #21528	; 0x5418
 800176c:	f2c4 0000 	movt	r0, #16384	; 0x4000
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001770:	f245 4514 	movw	r5, #21524	; 0x5414
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 8001774:	6800      	ldr	r0, [r0, #0]
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001776:	f2c4 0500 	movt	r5, #16384	; 0x4000
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 800177a:	f242 7010 	movw	r0, #10000	; 0x2710
 800177e:	e001      	b.n	8001784 <Hw_I2C_IMU_WriteRegs+0x78>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 8001780:	3801      	subs	r0, #1
 8001782:	d058      	beq.n	8001836 <Hw_I2C_IMU_WriteRegs+0x12a>
	{
		Reg = *reg_addr;
 8001784:	682c      	ldr	r4, [r5, #0]
 8001786:	9402      	str	r4, [sp, #8]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001788:	9c02      	ldr	r4, [sp, #8]
 800178a:	f014 0f80 	tst.w	r4, #128	; 0x80
 800178e:	d0f7      	beq.n	8001780 <Hw_I2C_IMU_WriteRegs+0x74>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001790:	f245 4514 	movw	r5, #21524	; 0x5414

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001794:	f242 7010 	movw	r0, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001798:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800179c:	e001      	b.n	80017a2 <Hw_I2C_IMU_WriteRegs+0x96>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800179e:	3801      	subs	r0, #1
 80017a0:	d049      	beq.n	8001836 <Hw_I2C_IMU_WriteRegs+0x12a>
	{
		Reg = *reg_addr;
 80017a2:	682c      	ldr	r4, [r5, #0]
 80017a4:	9403      	str	r4, [sp, #12]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80017a6:	9c03      	ldr	r4, [sp, #12]
 80017a8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80017ac:	d0f7      	beq.n	800179e <Hw_I2C_IMU_WriteRegs+0x92>
			{
				Err = HW_I2C_ERR_TXE;
				break;
			}

			REG_I2C1_DR = reg_addr;	
 80017ae:	f245 4610 	movw	r6, #21520	; 0x5410
 80017b2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80017b6:	6031      	str	r1, [r6, #0]



			for( i=0; i<len; i++ )
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03e      	beq.n	800183a <Hw_I2C_IMU_WriteRegs+0x12e>
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80017bc:	f245 4414 	movw	r4, #21524	; 0x5414

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80017c0:	2500      	movs	r5, #0
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 80017c2:	f2c4 0400 	movt	r4, #16384	; 0x4000

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80017c6:	f242 7110 	movw	r1, #10000	; 0x2710
 80017ca:	e001      	b.n	80017d0 <Hw_I2C_IMU_WriteRegs+0xc4>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 80017cc:	3901      	subs	r1, #1
 80017ce:	d016      	beq.n	80017fe <Hw_I2C_IMU_WriteRegs+0xf2>
	{
		Reg = *reg_addr;
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	9004      	str	r0, [sp, #16]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 80017d4:	9804      	ldr	r0, [sp, #16]
 80017d6:	0600      	lsls	r0, r0, #24
 80017d8:	d5f8      	bpl.n	80017cc <Hw_I2C_IMU_WriteRegs+0xc0>
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80017da:	5d51      	ldrb	r1, [r2, r5]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80017dc:	3501      	adds	r5, #1
 80017de:	b2ed      	uxtb	r5, r5
 80017e0:	429d      	cmp	r5, r3
				{
					Err = HW_I2C_ERR_TXE;
					break;
				}

				REG_I2C1_DR = ptr_data[i];						
 80017e2:	6031      	str	r1, [r6, #0]

			REG_I2C1_DR = reg_addr;	



			for( i=0; i<len; i++ )
 80017e4:	d3ef      	bcc.n	80017c6 <Hw_I2C_IMU_WriteRegs+0xba>
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_WriteRegs( u16 i2c_addr, u8 reg_addr, u8 *ptr_data, u16 len )
{
    u16 Ret = 0;
    u16 Err = 0;
 80017e6:	2000      	movs	r0, #0
 80017e8:	e00a      	b.n	8001800 <Hw_I2C_IMU_WriteRegs+0xf4>
			//-- ADDR
			//
			REG_I2C1_DR = i2c_addr<<1;	// ADDR Write 

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 1, 10000 );	// ADDR Sent
			SR2 = REG_I2C1_SR2;
 80017ea:	f245 4318 	movw	r3, #21528	; 0x5418
 80017ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80017f2:	681b      	ldr	r3, [r3, #0]

			if( Ret != 0 ) 
			{
				Err = HW_I2C_ERR_ADDR;
 80017f4:	2003      	movs	r0, #3
		Err = Hw_I2C_IMU_GetErrStatus();
	}
	

    return Err;
}
 80017f6:	b006      	add	sp, #24
 80017f8:	bd70      	pop	{r4, r5, r6, pc}
			SET_BIT( REG_I2C1_CR1, 8 );

			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 0, 10000 );
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_START;
 80017fa:	2002      	movs	r0, #2
 80017fc:	e7fb      	b.n	80017f6 <Hw_I2C_IMU_WriteRegs+0xea>
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 80017fe:	2004      	movs	r0, #4
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001800:	f245 4114 	movw	r1, #21524	; 0x5414
			for( i=0; i<len; i++ )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
				if( Ret != 0 )
				{
					Err = HW_I2C_ERR_TXE;
 8001804:	f242 7310 	movw	r3, #10000	; 0x2710
	volatile u32 Reg;


	while( time_out )
	{
		Reg = *reg_addr;
 8001808:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800180c:	e001      	b.n	8001812 <Hw_I2C_IMU_WriteRegs+0x106>
{
	u32 Ret = 0;
	volatile u32 Reg;


	while( time_out )
 800180e:	3b01      	subs	r3, #1
 8001810:	d01c      	beq.n	800184c <Hw_I2C_IMU_WriteRegs+0x140>
	{
		Reg = *reg_addr;
 8001812:	680a      	ldr	r2, [r1, #0]
 8001814:	9205      	str	r2, [sp, #20]

		if( IS_SET_BIT( Reg, reg_bit ) ) break;
 8001816:	9a05      	ldr	r2, [sp, #20]
 8001818:	0752      	lsls	r2, r2, #29
 800181a:	d5f8      	bpl.n	800180e <Hw_I2C_IMU_WriteRegs+0x102>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800181c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001820:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800182a:	601a      	str	r2, [r3, #0]
			break;
	}


	if( Err == 0 )
 800182c:	2800      	cmp	r0, #0
 800182e:	d1e2      	bne.n	80017f6 <Hw_I2C_IMU_WriteRegs+0xea>
	{
		Err = Hw_I2C_IMU_GetErrStatus();
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <Hw_I2C_IMU_WriteRegs+0x144>)
 8001832:	4798      	blx	r3
 8001834:	e7df      	b.n	80017f6 <Hw_I2C_IMU_WriteRegs+0xea>
			//Lb_printf("S2 %x\n", REG_I2C1_SR2);
				
			Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 7, 10000 );	// TXE
			if( Ret != 0 )
			{
				Err = HW_I2C_ERR_TXE;
 8001836:	2004      	movs	r0, #4
 8001838:	e7dd      	b.n	80017f6 <Hw_I2C_IMU_WriteRegs+0xea>
					Err = HW_I2C_ERR_STOP;
					break;
				}
			}

			SET_BIT( REG_I2C1_CR1, 9 );	// STOP
 800183a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800183e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e7f1      	b.n	8001830 <Hw_I2C_IMU_WriteRegs+0x124>
			if( len > 0 )
			{
				Ret = Hw_I2C_IMU_WaitForBitSet( (u32 *)&REG_I2C1_SR1, 2, 10000 );	// BTF
				if( Ret != 0 ) 
				{
					Err = HW_I2C_ERR_STOP;
 800184c:	2006      	movs	r0, #6
 800184e:	e7d2      	b.n	80017f6 <Hw_I2C_IMU_WriteRegs+0xea>
 8001850:	080014c9 	.word	0x080014c9

08001854 <Hw_I2C_IMU_MPU6050_WriteReg>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8001854:	b510      	push	{r4, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	4603      	mov	r3, r0
 800185a:	aa02      	add	r2, sp, #8
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 800185c:	f241 740d 	movw	r4, #5901	; 0x170d
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u16 Hw_I2C_IMU_MPU6050_WriteReg( u8 reg_addr, u8 reg_data )
{
 8001860:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return Hw_I2C_IMU_WriteRegs( HW_I2C_IMU_ADDR_MPU6050, reg_addr, &reg_data, 1 );
 8001864:	2068      	movs	r0, #104	; 0x68
 8001866:	4619      	mov	r1, r3
 8001868:	f6c0 0400 	movt	r4, #2048	; 0x800
 800186c:	2301      	movs	r3, #1
 800186e:	47a0      	blx	r4
}
 8001870:	b002      	add	sp, #8
 8001872:	bd10      	pop	{r4, pc}

08001874 <Hw_MPU6050_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8001874:	b510      	push	{r4, lr}
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 8001876:	4c12      	ldr	r4, [pc, #72]	; (80018c0 <Hw_MPU6050_Init+0x4c>)
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
u8 Hw_MPU6050_Init( void )
{
 8001878:	b086      	sub	sp, #24
	u8  RegData[20];

	static u8 power_on = FALSE;


	if( power_on == TRUE ) return TRUE;
 800187a:	7820      	ldrb	r0, [r4, #0]
 800187c:	2801      	cmp	r0, #1
 800187e:	d010      	beq.n	80018a2 <Hw_MPU6050_Init+0x2e>


	Hw_Wait_ms(36);
 8001880:	2024      	movs	r0, #36	; 0x24
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <Hw_MPU6050_Init+0x50>)
 8001884:	4798      	blx	r3


	//-- I2C 초기화
	//
	Hw_I2C_IMU_Init();	
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <Hw_MPU6050_Init+0x54>)
 8001888:	4798      	blx	r3


	while(1)
	{

		Err = Hw_I2C_IMU_MPU6050_ReadReg( MPU6050_RA_WHO_AM_I, RegData );
 800188a:	a901      	add	r1, sp, #4
 800188c:	2075      	movs	r0, #117	; 0x75
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <Hw_MPU6050_Init+0x58>)
 8001890:	4798      	blx	r3
		if( Err != 0 )
 8001892:	4601      	mov	r1, r0
 8001894:	b138      	cbz	r0, 80018a6 <Hw_MPU6050_Init+0x32>
		{
			Lb_printf("Can't find MPU6050 \n");
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <Hw_MPU6050_Init+0x5c>)
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <Hw_MPU6050_Init+0x60>)
 800189a:	4798      	blx	r3
		}

		break;
	}

	power_on = TRUE;
 800189c:	2301      	movs	r3, #1
 800189e:	7023      	strb	r3, [r4, #0]


	if( Err != 0 ) Ret = FALSE;
 80018a0:	2000      	movs	r0, #0


	return Ret;
}
 80018a2:	b006      	add	sp, #24
 80018a4:	bd10      	pop	{r4, pc}
			Lb_printf("Can't find MPU6050 \n");
			break;
		}


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
 80018a6:	206b      	movs	r0, #107	; 0x6b
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <Hw_MPU6050_Init+0x64>)
 80018aa:	4798      	blx	r3
		if( Err != 0 )
 80018ac:	4601      	mov	r1, r0
 80018ae:	b910      	cbnz	r0, 80018b6 <Hw_MPU6050_Init+0x42>
		}

		break;
	}

	power_on = TRUE;
 80018b0:	2001      	movs	r0, #1
 80018b2:	7020      	strb	r0, [r4, #0]
 80018b4:	e7f5      	b.n	80018a2 <Hw_MPU6050_Init+0x2e>


		Err = Hw_I2C_IMU_MPU6050_WriteReg( MPU6050_RA_PWR_MGMT_1, 0x00 );	// 내부 오실레이터, SLEEP = 0
		if( Err != 0 )
		{
			Lb_printf("Err write MPU6050_RA_PWR_MGMT_1 : %d\n", Err);
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <Hw_MPU6050_Init+0x68>)
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <Hw_MPU6050_Init+0x60>)
 80018ba:	4798      	blx	r3
			break;
 80018bc:	e7ee      	b.n	800189c <Hw_MPU6050_Init+0x28>
 80018be:	bf00      	nop
 80018c0:	20000289 	.word	0x20000289
 80018c4:	08000a01 	.word	0x08000a01
 80018c8:	08001445 	.word	0x08001445
 80018cc:	080016f5 	.word	0x080016f5
 80018d0:	080038bc 	.word	0x080038bc
 80018d4:	08000771 	.word	0x08000771
 80018d8:	08001855 	.word	0x08001855
 80018dc:	080038d4 	.word	0x080038d4

080018e0 <Hw_Pwm_IO_Setup>:
{	
	//-- GPIO 설정
	//
	//-- PWM0 PB.0
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 0));	// Clear
 80018e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f022 020f 	bic.w	r2, r2, #15
 80018ee:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 0));	// MODE, PB.0 Output mode, max speed 50Mhz
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f042 0203 	orr.w	r2, r2, #3
 80018f6:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << ( 2));	// CNF,  PB.0 Alternate function output Push-pull
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	f042 0208 	orr.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]

	//-- PWM1 PB.1
	//
	REG_GPIOB_CRL &= ~(0x0F << ( 4));	// Clear
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001906:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x03 << ( 4));	// MODE, PB.1 Output mode, max speed 50Mhz
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800190e:	601a      	str	r2, [r3, #0]
	REG_GPIOB_CRL |=  (0x02 << ( 6));	// CNF,  PB.1 Alternate function output Push-pull
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop

0800191c <Hw_Pwm_Timer_Setup>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_Timer_Setup(void)
{	
	SET_BIT( REG_RCC_APB1ENR, 1 );		// TIM3 Clock Enable APB1*2 = 72Mhz
 800191c:	f241 001c 	movw	r0, #4124	; 0x101c
 8001920:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001924:	6803      	ldr	r3, [r0, #0]
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_Timer_Setup(void)
{	
 8001926:	b4f0      	push	{r4, r5, r6, r7}
	SET_BIT( REG_RCC_APB1ENR, 1 );		// TIM3 Clock Enable APB1*2 = 72Mhz
 8001928:	f043 0c02 	orr.w	ip, r3, #2

	REG_TIM3_PSC = (72*8)-1; 				// 72Mhz/(72*4) = 1Mhz
 800192c:	f44f 6785 	mov.w	r7, #1064	; 0x428
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_Timer_Setup(void)
{	
	SET_BIT( REG_RCC_APB1ENR, 1 );		// TIM3 Clock Enable APB1*2 = 72Mhz
 8001930:	f8c0 c000 	str.w	ip, [r0]

	REG_TIM3_PSC = (72*8)-1; 				// 72Mhz/(72*4) = 1Mhz


	REG_TIM3_CR1 = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8001934:	f44f 6280 	mov.w	r2, #1024	; 0x400
---------------------------------------------------------------------------*/
void Hw_Pwm_Timer_Setup(void)
{	
	SET_BIT( REG_RCC_APB1ENR, 1 );		// TIM3 Clock Enable APB1*2 = 72Mhz

	REG_TIM3_PSC = (72*8)-1; 				// 72Mhz/(72*4) = 1Mhz
 8001938:	f240 203f 	movw	r0, #575	; 0x23f
 800193c:	f2c4 0700 	movt	r7, #16384	; 0x4000
 8001940:	6038      	str	r0, [r7, #0]


	REG_TIM3_CR1 = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8001942:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001946:	2080      	movs	r0, #128	; 0x80
	REG_TIM3_CR2 = 0;					
 8001948:	f240 4604 	movw	r6, #1028	; 0x404

	REG_TIM3_CCMR2 = 0 
 800194c:	f240 451c 	movw	r5, #1052	; 0x41c
	SET_BIT( REG_RCC_APB1ENR, 1 );		// TIM3 Clock Enable APB1*2 = 72Mhz

	REG_TIM3_PSC = (72*8)-1; 				// 72Mhz/(72*4) = 1Mhz


	REG_TIM3_CR1 = ( 1<< 7 );			// TIMx_ARR register is buffered 
 8001950:	6010      	str	r0, [r2, #0]
	REG_TIM3_CR2 = 0;					
 8001952:	2100      	movs	r1, #0

	REG_TIM3_CCMR2 = 0 
 8001954:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8001958:	f646 0068 	movw	r0, #26728	; 0x6868
		| ( 0x06 <<  4)					// OE3
		| ( 1    <<  3)					// OC3PE Output compare3 preload enable
		| ( 0x06 << 12)					// OE4
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	
 800195c:	f240 442c 	movw	r4, #1068	; 0x42c

	REG_TIM3_PSC = (72*8)-1; 				// 72Mhz/(72*4) = 1Mhz


	REG_TIM3_CR1 = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM3_CR2 = 0;					
 8001960:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001964:	6031      	str	r1, [r6, #0]
		| ( 0x06 <<  4)					// OE3
		| ( 1    <<  3)					// OC3PE Output compare3 preload enable
		| ( 0x06 << 12)					// OE4
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	
 8001966:	f2c4 0400 	movt	r4, #16384	; 0x4000


	REG_TIM3_CR1 = ( 1<< 7 );			// TIMx_ARR register is buffered 
	REG_TIM3_CR2 = 0;					

	REG_TIM3_CCMR2 = 0 
 800196a:	6028      	str	r0, [r5, #0]
		| ( 0x06 << 12)					// OE4
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	

	SET_BIT( REG_TIM3_CCER,  8 );		// CC3E : Enable
 800196c:	f44f 6384 	mov.w	r3, #1056	; 0x420
		| ( 0x06 <<  4)					// OE3
		| ( 1    <<  3)					// OC3PE Output compare3 preload enable
		| ( 0x06 << 12)					// OE4
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	
 8001970:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001974:	6020      	str	r0, [r4, #0]

	SET_BIT( REG_TIM3_CCER,  8 );		// CC3E : Enable
 8001976:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800197a:	6818      	ldr	r0, [r3, #0]
void Hw_Pwm_SetDuty( u8 Ch, u16 DutyRatio )
{
	switch( Ch )
	{
		case 0:
			REG_TIM3_CCR3 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 800197c:	f240 443c 	movw	r4, #1084	; 0x43c
		| ( 0x06 << 12)					// OE4
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	

	SET_BIT( REG_TIM3_CCER,  8 );		// CC3E : Enable
 8001980:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001984:	6018      	str	r0, [r3, #0]
	SET_BIT( REG_TIM3_CCER, 12 );		// CC4E : Enable
 8001986:	681d      	ldr	r5, [r3, #0]
	{
		case 0:
			REG_TIM3_CCR3 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;

		case 1:
			REG_TIM3_CCR4 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 8001988:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800198c:	f2c4 0000 	movt	r0, #16384	; 0x4000
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	

	SET_BIT( REG_TIM3_CCER,  8 );		// CC3E : Enable
	SET_BIT( REG_TIM3_CCER, 12 );		// CC4E : Enable
 8001990:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
void Hw_Pwm_SetDuty( u8 Ch, u16 DutyRatio )
{
	switch( Ch )
	{
		case 0:
			REG_TIM3_CCR3 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 8001994:	f2c4 0400 	movt	r4, #16384	; 0x4000
		| ( 1    << 11);				// OC4PE Output compare3 preload enable
	
	REG_TIM3_ARR = HW_PWM_PERIOD-1;		// 1000us = 1Khz 	

	SET_BIT( REG_TIM3_CCER,  8 );		// CC3E : Enable
	SET_BIT( REG_TIM3_CCER, 12 );		// CC4E : Enable
 8001998:	601d      	str	r5, [r3, #0]
void Hw_Pwm_SetDuty( u8 Ch, u16 DutyRatio )
{
	switch( Ch )
	{
		case 0:
			REG_TIM3_CCR3 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 800199a:	6021      	str	r1, [r4, #0]

		case 1:
			REG_TIM3_CCR4 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 800199c:	6001      	str	r1, [r0, #0]
 800199e:	6001      	str	r1, [r0, #0]
	SET_BIT( REG_TIM3_CCER, 12 );		// CC4E : Enable

	Hw_Pwm_SetDuty(0, 0);
	Hw_Pwm_SetDuty(1, 0);

	SET_BIT( REG_TIM3_CR1, 0 );			// Counter Enable 
 80019a0:	6813      	ldr	r3, [r2, #0]
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bcf0      	pop	{r4, r5, r6, r7}
 80019aa:	4770      	bx	lr

080019ac <Hw_Pwm_Init>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_Init(void)
{	
 80019ac:	b508      	push	{r3, lr}
	Hw_Pwm_IO_Setup();
 80019ae:	f641 03e1 	movw	r3, #6369	; 0x18e1
 80019b2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019b6:	4798      	blx	r3
	Hw_Pwm_Timer_Setup();
 80019b8:	f641 131d 	movw	r3, #6429	; 0x191d
 80019bc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80019c0:	4798      	blx	r3
 80019c2:	bd08      	pop	{r3, pc}

080019c4 <Hw_Pwm_SetPercent>:
---------------------------------------------------------------------------*/
void Hw_Pwm_SetPercent( u8 Ch, u16 PercentRatio )
{
	if( PercentRatio > 100 ) PercentRatio = 100;

	Hw_Pwm_SetDuty( Ch, PercentRatio * HW_PWM_PERIOD / 100 );
 80019c4:	2964      	cmp	r1, #100	; 0x64
 80019c6:	bf28      	it	cs
 80019c8:	2164      	movcs	r1, #100	; 0x64
 80019ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80019ce:	0049      	lsls	r1, r1, #1
 80019d0:	b289      	uxth	r1, r1
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_SetDuty( u8 Ch, u16 DutyRatio )
{
	switch( Ch )
 80019d2:	b950      	cbnz	r0, 80019ea <Hw_Pwm_SetPercent+0x26>
	{
		case 0:
			REG_TIM3_CCR3 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 80019d4:	f240 433c 	movw	r3, #1084	; 0x43c
 80019d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019dc:	6019      	str	r1, [r3, #0]

		case 1:
			REG_TIM3_CCR4 = DutyRatio * HW_PWM_PERIOD / HW_PWM_MAX_DUTY;
 80019de:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80019e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019e6:	6019      	str	r1, [r3, #0]
 80019e8:	4770      	bx	lr
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_Pwm_SetDuty( u8 Ch, u16 DutyRatio )
{
	switch( Ch )
 80019ea:	2801      	cmp	r0, #1
 80019ec:	d0f7      	beq.n	80019de <Hw_Pwm_SetPercent+0x1a>
 80019ee:	4770      	bx	lr

080019f0 <Hw_DHT11_Tick>:
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 80019f0:	4956      	ldr	r1, [pc, #344]	; (8001b4c <Hw_DHT11_Tick+0x15c>)
HW_DHT11_DATA_OBJ Hw_DHT11_Log;



void Hw_DHT11_Tick(void)
{
 80019f2:	b4f0      	push	{r4, r5, r6, r7}
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 80019f4:	680b      	ldr	r3, [r1, #0]

		//-- Start Pulse (20ms)
		//
		case 1:

			if( Cnt == 1 )
 80019f6:	4f56      	ldr	r7, [pc, #344]	; (8001b50 <Hw_DHT11_Tick+0x160>)
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d03a      	beq.n	8001a72 <Hw_DHT11_Tick+0x82>
 80019fc:	d206      	bcs.n	8001a0c <Hw_DHT11_Tick+0x1c>
	{
		//-- PowerON 후 1초를 기다린다.
		//
		case 0:

			if( Cnt > 1000/10 )
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d867      	bhi.n	8001ad4 <Hw_DHT11_Tick+0xe4>
 8001a04:	3301      	adds	r3, #1
			}
			
			break;
	}

	Cnt++;
 8001a06:	603b      	str	r3, [r7, #0]
}
 8001a08:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0a:	4770      	bx	lr
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 8001a0c:	2b02      	cmp	r3, #2
			break;

		//-- End 
		//
		case 2:
			if( Cnt == 500/10 )
 8001a0e:	683b      	ldr	r3, [r7, #0]
	u32 i;
	u32 RegNum;
	u32 BitNum;
	u8  CheckSum;

	switch( State )
 8001a10:	d1f8      	bne.n	8001a04 <Hw_DHT11_Tick+0x14>
			break;

		//-- End 
		//
		case 2:
			if( Cnt == 500/10 )
 8001a12:	2b32      	cmp	r3, #50	; 0x32
 8001a14:	d06b      	beq.n	8001aee <Hw_DHT11_Tick+0xfe>
				Hw_DHT11_IO_SetOutput();
			}

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
 8001a16:	2b77      	cmp	r3, #119	; 0x77
 8001a18:	d9f4      	bls.n	8001a04 <Hw_DHT11_Tick+0x14>
			{
				Cnt   = 0;
				State = 1;
				Hw_DHT11_Log.Data[0] = 0;
 8001a1a:	4c4e      	ldr	r4, [pc, #312]	; (8001b54 <Hw_DHT11_Tick+0x164>)

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
			{
				Cnt   = 0;
 8001a1c:	2300      	movs	r3, #0
				State = 1;
 8001a1e:	2601      	movs	r6, #1
 8001a20:	4a4d      	ldr	r2, [pc, #308]	; (8001b58 <Hw_DHT11_Tick+0x168>)

			//-- 1초마다 센서 데이터를 업데이트 한다.
			//
			if( Cnt >= 1200/10 )
			{
				Cnt   = 0;
 8001a22:	603b      	str	r3, [r7, #0]
				State = 1;
 8001a24:	600e      	str	r6, [r1, #0]
				Hw_DHT11_Log.Data[0] = 0;
 8001a26:	7023      	strb	r3, [r4, #0]
				Hw_DHT11_Log.Data[1] = 0;
 8001a28:	7063      	strb	r3, [r4, #1]
				Hw_DHT11_Log.Data[2] = 0;
 8001a2a:	70a3      	strb	r3, [r4, #2]
				Hw_DHT11_Log.Data[3] = 0;
 8001a2c:	70e3      	strb	r3, [r4, #3]
				Hw_DHT11_Log.Data[4] = 0;
 8001a2e:	7123      	strb	r3, [r4, #4]
				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
 8001a30:	f832 1f02 	ldrh.w	r1, [r2, #2]!
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;
 8001a34:	f003 0007 	and.w	r0, r3, #7

					if( Hw_DHT11_BitTbl[i] > 100 )
 8001a38:	2964      	cmp	r1, #100	; 0x64
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 8001a3a:	f1c0 0007 	rsb	r0, r0, #7
				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
 8001a3e:	d905      	bls.n	8001a4c <Hw_DHT11_Tick+0x5c>
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 8001a40:	fa06 f000 	lsl.w	r0, r6, r0
				Hw_DHT11_Log.Data[3] = 0;
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
				{
					RegNum = i/8;
 8001a44:	08d9      	lsrs	r1, r3, #3
					BitNum = i%8;

					if( Hw_DHT11_BitTbl[i] > 100 )
					{
						SET_BIT( Hw_DHT11_Log.Data[RegNum], 7-BitNum );
 8001a46:	5c65      	ldrb	r5, [r4, r1]
 8001a48:	4328      	orrs	r0, r5
 8001a4a:	5460      	strb	r0, [r4, r1]
				Hw_DHT11_Log.Data[1] = 0;
				Hw_DHT11_Log.Data[2] = 0;
				Hw_DHT11_Log.Data[3] = 0;
				Hw_DHT11_Log.Data[4] = 0;

				for( i=0; i<40; i++ )
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	2b28      	cmp	r3, #40	; 0x28
 8001a50:	d1ee      	bne.n	8001a30 <Hw_DHT11_Tick+0x40>

				CheckSum = 0;

				for( i=0; i<4; i++ )
				{
					CheckSum += Hw_DHT11_Log.Data[i];
 8001a52:	7821      	ldrb	r1, [r4, #0]
 8001a54:	7860      	ldrb	r0, [r4, #1]
 8001a56:	78a3      	ldrb	r3, [r4, #2]
 8001a58:	78e2      	ldrb	r2, [r4, #3]
 8001a5a:	1808      	adds	r0, r1, r0
 8001a5c:	18c0      	adds	r0, r0, r3
 8001a5e:	1880      	adds	r0, r0, r2
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
 8001a60:	7924      	ldrb	r4, [r4, #4]
 8001a62:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8001a66:	4284      	cmp	r4, r0

				CheckSum = 0;

				for( i=0; i<4; i++ )
				{
					CheckSum += Hw_DHT11_Log.Data[i];
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <Hw_DHT11_Tick+0x164>)
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
 8001a6a:	d068      	beq.n	8001b3e <Hw_DHT11_Tick+0x14e>
					Lb_printf("H %d T %d \n", Hw_DHT11_Log.Humidity, Hw_DHT11_Log.Temperature );
					#endif
				}
				else
				{
					Hw_DHT11_Log.Error = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	7153      	strb	r3, [r2, #5]
 8001a70:	e7c9      	b.n	8001a06 <Hw_DHT11_Tick+0x16>

		//-- Start Pulse (20ms)
		//
		case 1:

			if( Cnt == 1 )
 8001a72:	683d      	ldr	r5, [r7, #0]
 8001a74:	2d01      	cmp	r5, #1
 8001a76:	d030      	beq.n	8001ada <Hw_DHT11_Tick+0xea>
			{
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
 8001a78:	d9c5      	bls.n	8001a06 <Hw_DHT11_Tick+0x16>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001a7a:	f640 000c 	movw	r0, #2060	; 0x80c
 8001a7e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001a82:	6803      	ldr	r3, [r0, #0]
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
			{
				Hw_DHT11_BitIndex = 0;
 8001a84:	4c35      	ldr	r4, [pc, #212]	; (8001b5c <Hw_DHT11_Tick+0x16c>)
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
				Hw_DHT11_IO_SetLow();	
			}
			
			if( Cnt >= 20/10 )	
			{
				Hw_DHT11_BitIndex = 0;
 8001a8e:	2600      	movs	r6, #0
 8001a90:	6026      	str	r6, [r4, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001a92:	f2c4 0201 	movt	r2, #16385	; 0x4001
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001a96:	6003      	str	r3, [r0, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001a98:	6813      	ldr	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 8001a9a:	f240 4404 	movw	r4, #1028	; 0x404
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001a9e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001aa2:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
 8001aa4:	6813      	ldr	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 8001aa6:	f2c4 0401 	movt	r4, #16385	; 0x4001
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
 8001aaa:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x01 << (26));	// CNF,  PA.6 Floating input	
 8001aac:	6813      	ldr	r3, [r2, #0]
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 8001aae:	f44f 6080 	mov.w	r0, #1024	; 0x400
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetInput(void)
{
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x00 << (24));	// MODE, PA.6 Input Mode
	REG_GPIOA_CRL |=  (0x01 << (26));	// CNF,  PA.6 Floating input	
 8001ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ab6:	6013      	str	r3, [r2, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 8001ab8:	6823      	ldr	r3, [r4, #0]
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 8001aba:	f2c4 0001 	movt	r0, #16385	; 0x4001
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
 8001abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac2:	6023      	str	r3, [r4, #0]
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 8001ac4:	6803      	ldr	r3, [r0, #0]
			{
				Hw_DHT11_BitIndex = 0;
				Hw_DHT11_IO_SetHigh();
				Hw_DHT11_IO_SetInput();				
				Hw_DHT11_IO_EnableISR();				
				State = 2;	
 8001ac6:	2202      	movs	r2, #2
void Hw_DHT11_IO_EnableISR(void)
{
	// EXTI6 Enable
	// 
	REG_EXTI_EMR |= (1<<6);	// Event Enable
	REG_EXTI_IMR |= (1<<6);	// Interrupt nable	
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001acc:	6003      	str	r3, [r0, #0]
 8001ace:	1c6b      	adds	r3, r5, #1
			{
				Hw_DHT11_BitIndex = 0;
				Hw_DHT11_IO_SetHigh();
				Hw_DHT11_IO_SetInput();				
				Hw_DHT11_IO_EnableISR();				
				State = 2;	
 8001ad0:	600a      	str	r2, [r1, #0]
 8001ad2:	e798      	b.n	8001a06 <Hw_DHT11_Tick+0x16>
		case 0:

			if( Cnt > 1000/10 )
			{
				Cnt   = 0;
				State = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e795      	b.n	8001a06 <Hw_DHT11_Tick+0x16>
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetLow(void)
{
	CLR_BIT( REG_GPIOA_ODR, 6 );		
 8001ada:	f640 020c 	movw	r2, #2060	; 0x80c
 8001ade:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001ae2:	6811      	ldr	r1, [r2, #0]
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001aea:	6011      	str	r1, [r2, #0]
 8001aec:	e78b      	b.n	8001a06 <Hw_DHT11_Tick+0x16>
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
 8001aee:	f240 4304 	movw	r3, #1028	; 0x404
 8001af2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001af6:	6819      	ldr	r1, [r3, #0]
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 8001af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
 8001afc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001b00:	6019      	str	r1, [r3, #0]
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 8001b02:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b06:	6811      	ldr	r1, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001b08:	f640 030c 	movw	r3, #2060	; 0x80c
void Hw_DHT11_IO_DisableISR(void)
{
	// EXTI6 Disable
	// 
	REG_EXTI_EMR &= ~(1<<6);	// Event Enable
	REG_EXTI_IMR &= ~(1<<6);	// Interrupt nable	
 8001b0c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001b10:	6011      	str	r1, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001b12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b16:	6819      	ldr	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001b1c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001b20:	6019      	str	r1, [r3, #0]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001b22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001b26:	6811      	ldr	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 8001b28:	2333      	movs	r3, #51	; 0x33
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001b2a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001b2e:	6011      	str	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 8001b30:	6811      	ldr	r1, [r2, #0]
 8001b32:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
 8001b36:	6011      	str	r1, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 8001b38:	6811      	ldr	r1, [r2, #0]
 8001b3a:	6011      	str	r1, [r2, #0]
 8001b3c:	e763      	b.n	8001a06 <Hw_DHT11_Tick+0x16>
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
				{
					Hw_DHT11_Log.Error       = 0;
 8001b3e:	2000      	movs	r0, #0
					Hw_DHT11_Log.Humidity    = Hw_DHT11_Log.Data[0];
					Hw_DHT11_Log.Temperature = Hw_DHT11_Log.Data[2];
 8001b40:	7213      	strb	r3, [r2, #8]
				}

				// CheckSum 확인 
				if( CheckSum == Hw_DHT11_Log.Data[4] )
				{
					Hw_DHT11_Log.Error       = 0;
 8001b42:	7150      	strb	r0, [r2, #5]
					Hw_DHT11_Log.Humidity    = Hw_DHT11_Log.Data[0];
 8001b44:	71d1      	strb	r1, [r2, #7]
					Hw_DHT11_Log.Temperature = Hw_DHT11_Log.Data[2];
 8001b46:	2301      	movs	r3, #1
 8001b48:	e75d      	b.n	8001a06 <Hw_DHT11_Tick+0x16>
 8001b4a:	bf00      	nop
 8001b4c:	20000290 	.word	0x20000290
 8001b50:	20000294 	.word	0x20000294
 8001b54:	20000be4 	.word	0x20000be4
 8001b58:	20000b86 	.word	0x20000b86
 8001b5c:	2000028c 	.word	0x2000028c

08001b60 <Hw_DHT11_IO_ISR>:
	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <Hw_DHT11_IO_ISR+0x48>)
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 8001b62:	f240 4114 	movw	r1, #1044	; 0x414


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 8001b66:	681a      	ldr	r2, [r3, #0]




void Hw_DHT11_IO_ISR(void)
{
 8001b68:	b430      	push	{r4, r5}
	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 8001b6a:	1e90      	subs	r0, r2, #2
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 8001b6c:	2440      	movs	r4, #64	; 0x40
 8001b6e:	f2c4 0101 	movt	r1, #16385	; 0x4001


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 8001b72:	2827      	cmp	r0, #39	; 0x27
	static u16 TimerCntSaved = 0;
	u16 TimerCntCur;

	//-- 인터럽트 팬딩 레지스터 Clear
	//
	REG_EXTI_PR = (1<<6);
 8001b74:	600c      	str	r4, [r1, #0]


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
 8001b76:	d90c      	bls.n	8001b92 <Hw_DHT11_IO_ISR+0x32>
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <Hw_DHT11_IO_ISR+0x4c>)
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
	}


	Hw_DHT11_BitIndex++;
 8001b7a:	3201      	adds	r2, #1


	if( Hw_DHT11_BitIndex >= 42 )
 8001b7c:	2a29      	cmp	r2, #41	; 0x29
	{
		Hw_DHT11_BitIndex = 42;	
 8001b7e:	bf88      	it	hi
 8001b80:	222a      	movhi	r2, #42	; 0x2a
 8001b82:	601a      	str	r2, [r3, #0]
	}

	TimerCntSaved = REG_TIM2_CNT;
 8001b84:	2324      	movs	r3, #36	; 0x24
 8001b86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	800b      	strh	r3, [r1, #0]
}
 8001b8e:	bc30      	pop	{r4, r5}
 8001b90:	4770      	bx	lr
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
	{
		TimerCntCur = REG_TIM2_CNT;
 8001b92:	2424      	movs	r4, #36	; 0x24
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
 8001b94:	4905      	ldr	r1, [pc, #20]	; (8001bac <Hw_DHT11_IO_ISR+0x4c>)
	REG_EXTI_PR = (1<<6);


	if( Hw_DHT11_BitIndex >= 2 && Hw_DHT11_BitIndex <= 41 )
	{
		TimerCntCur = REG_TIM2_CNT;
 8001b96:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001b9a:	6825      	ldr	r5, [r4, #0]
			
		Hw_DHT11_BitTbl[Hw_DHT11_BitIndex-2] = TimerCntCur - TimerCntSaved;
 8001b9c:	880c      	ldrh	r4, [r1, #0]
 8001b9e:	1b2d      	subs	r5, r5, r4
 8001ba0:	4c03      	ldr	r4, [pc, #12]	; (8001bb0 <Hw_DHT11_IO_ISR+0x50>)
 8001ba2:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
 8001ba6:	e7e8      	b.n	8001b7a <Hw_DHT11_IO_ISR+0x1a>
 8001ba8:	2000028c 	.word	0x2000028c
 8001bac:	20000298 	.word	0x20000298
 8001bb0:	20000b88 	.word	0x20000b88

08001bb4 <Hw_DHT11_GetHumidity>:
u8 Hw_DHT11_GetHumidity(void)
{
	u8 Humidity;

	
	Disable_ISR();
 8001bb4:	b672      	cpsid	i
	Humidity = Hw_DHT11_Log.Humidity;
	Enable_ISR();
 8001bb6:	b662      	cpsie	i
{
	u8 Humidity;

	
	Disable_ISR();
	Humidity = Hw_DHT11_Log.Humidity;
 8001bb8:	f640 33e4 	movw	r3, #3044	; 0xbe4
 8001bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Enable_ISR();

	return Humidity;
}
 8001bc0:	79d8      	ldrb	r0, [r3, #7]
 8001bc2:	4770      	bx	lr

08001bc4 <Hw_DHT11_GetTemperature>:
u8 Hw_DHT11_GetTemperature(void)
{
	u8 Temperature;

	
	Disable_ISR();
 8001bc4:	b672      	cpsid	i
	Temperature = Hw_DHT11_Log.Temperature;
	Enable_ISR();
 8001bc6:	b662      	cpsie	i
{
	u8 Temperature;

	
	Disable_ISR();
	Temperature = Hw_DHT11_Log.Temperature;
 8001bc8:	f640 33e4 	movw	r3, #3044	; 0xbe4
 8001bcc:	f2c2 0300 	movt	r3, #8192	; 0x2000
	Enable_ISR();

	return Temperature;
}
 8001bd0:	7a18      	ldrb	r0, [r3, #8]
 8001bd2:	4770      	bx	lr

08001bd4 <Hw_DHT11_IO_SetupISR>:
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetupISR(void)
{
 8001bd4:	b508      	push	{r3, lr}

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001bdc:	6819      	ldr	r1, [r3, #0]
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 8001bde:	f240 420c 	movw	r2, #1036	; 0x40c
void Hw_DHT11_IO_SetupISR(void)
{

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
 8001be2:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 8001be6:	6019      	str	r1, [r3, #0]
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 
 8001be8:	6819      	ldr	r1, [r3, #0]

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 8001bea:	f2c4 0201 	movt	r2, #16385	; 0x4001
{

	// 1. 인터럽트 핀 설정 
	//
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 
 8001bee:	6019      	str	r1, [r3, #0]

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 8001bf0:	6811      	ldr	r1, [r2, #0]


	Hw_ISR_SetIRQFunc( 23, (u32)Hw_DHT11_IO_ISR, 0 );	
 8001bf2:	f640 538d 	movw	r3, #3469	; 0xd8d
	REG_AFIO_EXTICR2 &= ~(0x0F<<8);
	REG_AFIO_EXTICR2 |=  (0x00<<8);	// EXTI6, PA.6을 외부 인터럽트로 설정 

	// 2. Falling trigger로 설정
	// 
	REG_EXTI_FTSR |= (1<<6);	 
 8001bf6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001bfa:	6011      	str	r1, [r2, #0]


	Hw_ISR_SetIRQFunc( 23, (u32)Hw_DHT11_IO_ISR, 0 );	
 8001bfc:	f641 3161 	movw	r1, #7009	; 0x1b61
 8001c00:	2200      	movs	r2, #0
 8001c02:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001c06:	2017      	movs	r0, #23
 8001c08:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c0c:	4798      	blx	r3
	SET_BIT( REG_NVIC_ISER( 23/32 ), 23%32 );	// NVIC 37번 EXTI0 인터럽트 활성화
 8001c0e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001c12:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	bd08      	pop	{r3, pc}

08001c20 <Hw_DHT11_Init>:
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
	Hw_DHT11_Log.Data[0] = 0;
 8001c20:	f640 33e4 	movw	r3, #3044	; 0xbe4
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
 8001c24:	b530      	push	{r4, r5, lr}
	Hw_DHT11_Log.Data[0] = 0;
 8001c26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c2a:	2400      	movs	r4, #0
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
	Hw_DHT11_Log.Data[0] = 0;
 8001c30:	701c      	strb	r4, [r3, #0]
	Hw_DHT11_Log.Data[1] = 0;
 8001c32:	705c      	strb	r4, [r3, #1]
	Hw_DHT11_Log.Data[2] = 0;
 8001c34:	709c      	strb	r4, [r3, #2]
	Hw_DHT11_Log.Data[3] = 0;
 8001c36:	70dc      	strb	r4, [r3, #3]
	Hw_DHT11_Log.Error		 = 0;
 8001c38:	715c      	strb	r4, [r3, #5]
	Hw_DHT11_Log.DataValid   = FALSE;
 8001c3a:	719c      	strb	r4, [r3, #6]
	Hw_DHT11_Log.Humidity    = 0;
 8001c3c:	71dc      	strb	r4, [r3, #7]
	Hw_DHT11_Log.Temperature = 0;
 8001c3e:	721c      	strb	r4, [r3, #8]
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001c40:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001c44:	6813      	ldr	r3, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001c46:	f640 010c 	movw	r1, #2060	; 0x80c
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
 8001c4a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001c4e:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 8001c50:	6813      	ldr	r3, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001c52:	f2c4 0101 	movt	r1, #16385	; 0x4001
void Hw_DHT11_IO_SetOutput(void)
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
 8001c56:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001c5a:	6013      	str	r3, [r2, #0]
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 8001c5c:	6810      	ldr	r0, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 8001c5e:	f241 031c 	movw	r3, #4124	; 0x101c
{
	//-- PA.6
	//
	REG_GPIOA_CRL &= ~(0x0F << (24));	// Clear
	REG_GPIOA_CRL |=  (0x03 << (24));	// MODE, PA.6 Output mode, max speed 50Mhz
	REG_GPIOA_CRL |=  (0x00 << (26));	// CNF,  PA.6 General purpose output push-pul		
 8001c62:	6010      	str	r0, [r2, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001c64:	680a      	ldr	r2, [r1, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 8001c66:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_IO_SetHigh(void)
{
	SET_BIT( REG_GPIOA_ODR, 6 );		
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6e:	600a      	str	r2, [r1, #0]
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 8001c70:	681a      	ldr	r2, [r3, #0]

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 8001c72:	2128      	movs	r1, #40	; 0x28
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 8001c7a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8001c7e:	2347      	movs	r3, #71	; 0x47

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
---------------------------------------------------------------------------*/
void Hw_DHT11_Timer_Setup(void)
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz
 8001c84:	600b      	str	r3, [r1, #0]

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 8001c86:	6811      	ldr	r1, [r2, #0]


	Hw_DHT11_IO_Setup();
	Hw_DHT11_Timer_Setup();

	Hw_DHT11_IO_SetupISR();
 8001c88:	f641 33d5 	movw	r3, #7125	; 0x1bd5
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 8001c8c:	f041 0101 	orr.w	r1, r1, #1
     WORK    : 
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
void Hw_DHT11_Init(void)
{
 8001c90:	b083      	sub	sp, #12
{
	SET_BIT( REG_RCC_APB1ENR, 0 );		// TIM2 Clock Enable APB1 = 36Mhz

	REG_TIM2_PSC = 72-1; 				// 36Mhz/36 = 1Mhz

	SET_BIT( REG_TIM2_CR1, 0 );			// Counter Enable 		 
 8001c92:	6011      	str	r1, [r2, #0]


	Hw_DHT11_IO_Setup();
	Hw_DHT11_Timer_Setup();

	Hw_DHT11_IO_SetupISR();
 8001c94:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001c98:	4798      	blx	r3


	Hw_Timer_Set  ( HW_TIMER_CH_DHT11, 10, LOOP_TIME, Hw_DHT11_Tick, NULL );	
 8001c9a:	f640 65c1 	movw	r5, #3777	; 0xec1
 8001c9e:	f641 13f1 	movw	r3, #6641	; 0x19f1
 8001ca2:	2004      	movs	r0, #4
 8001ca4:	9400      	str	r4, [sp, #0]
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001cae:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001cb2:	47a8      	blx	r5
	Hw_Timer_Start( HW_TIMER_CH_DHT11 );
 8001cb4:	f640 63e1 	movw	r3, #3809	; 0xee1
 8001cb8:	2004      	movs	r0, #4
 8001cba:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001cbe:	4798      	blx	r3
}
 8001cc0:	b003      	add	sp, #12
 8001cc2:	bd30      	pop	{r4, r5, pc}

08001cc4 <EP1_IN_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP1_IN_Callback (void)
{
 8001cc4:	b538      	push	{r3, r4, r5, lr}
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if (USB_Tx_State == 1)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <EP1_IN_Callback+0x58>)
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	2a01      	cmp	r2, #1
 8001ccc:	d000      	beq.n	8001cd0 <EP1_IN_Callback+0xc>
 8001cce:	bd38      	pop	{r3, r4, r5, pc}
  {
    if (USART_Rx_length == 0) 
 8001cd0:	4c13      	ldr	r4, [pc, #76]	; (8001d20 <EP1_IN_Callback+0x5c>)
 8001cd2:	6820      	ldr	r0, [r4, #0]
 8001cd4:	b300      	cbz	r0, 8001d18 <EP1_IN_Callback+0x54>
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001cd6:	2840      	cmp	r0, #64	; 0x40
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <EP1_IN_Callback+0x60>)
    {
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
 8001cda:	d814      	bhi.n	8001d06 <EP1_IN_Callback+0x42>
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001cdc:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = USART_Rx_length;
 8001cde:	b285      	uxth	r5, r0
        
        USART_Rx_ptr_out += USART_Rx_length;
 8001ce0:	1818      	adds	r0, r3, r0
 8001ce2:	6010      	str	r0, [r2, #0]
        USART_Rx_length = 0;
 8001ce4:	2200      	movs	r2, #0
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
      }
      else 
      {
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001ce6:	b29b      	uxth	r3, r3
        USB_Tx_length = USART_Rx_length;
        
        USART_Rx_ptr_out += USART_Rx_length;
        USART_Rx_length = 0;
 8001ce8:	6022      	str	r2, [r4, #0]
      }
      UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <EP1_IN_Callback+0x64>)
 8001cec:	21c0      	movs	r1, #192	; 0xc0
 8001cee:	18c0      	adds	r0, r0, r3
 8001cf0:	462a      	mov	r2, r5
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <EP1_IN_Callback+0x68>)
 8001cf4:	4798      	blx	r3
      SetEPTxCount(ENDP1, USB_Tx_length);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <EP1_IN_Callback+0x6c>)
 8001cfc:	4798      	blx	r3
      SetEPTxValid(ENDP1); 
 8001cfe:	2001      	movs	r0, #1
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <EP1_IN_Callback+0x70>)
 8001d02:	4798      	blx	r3
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001d06:	6813      	ldr	r3, [r2, #0]
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001d08:	3840      	subs	r0, #64	; 0x40
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001d0a:	f103 0140 	add.w	r1, r3, #64	; 0x40
        USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;    
 8001d0e:	6020      	str	r0, [r4, #0]
      USB_Tx_State = 0;
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
 8001d10:	b29b      	uxth	r3, r3
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
        
        USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;
 8001d12:	6011      	str	r1, [r2, #0]
    }
    else 
    {
      if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE){
        USB_Tx_ptr = USART_Rx_ptr_out;
        USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8001d14:	2540      	movs	r5, #64	; 0x40
 8001d16:	e7e8      	b.n	8001cea <EP1_IN_Callback+0x26>
  
  if (USB_Tx_State == 1)
  {
    if (USART_Rx_length == 0) 
    {
      USB_Tx_State = 0;
 8001d18:	7018      	strb	r0, [r3, #0]
 8001d1a:	bd38      	pop	{r3, r4, r5, pc}
 8001d1c:	200002bc 	.word	0x200002bc
 8001d20:	200002c8 	.word	0x200002c8
 8001d24:	200002c4 	.word	0x200002c4
 8001d28:	20000c58 	.word	0x20000c58
 8001d2c:	080030b9 	.word	0x080030b9
 8001d30:	080032f9 	.word	0x080032f9
 8001d34:	080031bd 	.word	0x080031bd

08001d38 <EP3_OUT_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void EP3_OUT_Callback(void)
{
 8001d38:	b510      	push	{r4, lr}
  uint16_t USB_Rx_Cnt;
  
  /* Get the received data buffer and update the counter */
  USB_Rx_Cnt = USB_SIL_Read(EP3_OUT, USB_Rx_Buffer);
 8001d3a:	f640 34f0 	movw	r4, #3056	; 0xbf0
 8001d3e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001d42:	f243 33b9 	movw	r3, #13241	; 0x33b9
 8001d46:	4621      	mov	r1, r4
 8001d48:	2003      	movs	r0, #3
 8001d4a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d4e:	4798      	blx	r3
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the USART Xfer */
  
  USB_To_USART_Send_Data(USB_Rx_Buffer, USB_Rx_Cnt);
 8001d50:	f242 53e1 	movw	r3, #9697	; 0x25e1
 8001d54:	b2c1      	uxtb	r1, r0
 8001d56:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4798      	blx	r3
 
  /* Enable the receive of data on EP3 */
  SetEPRxValid(ENDP3);
 8001d5e:	f243 13e1 	movw	r3, #12769	; 0x31e1
 8001d62:	2003      	movs	r0, #3
 8001d64:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001d68:	4798      	blx	r3
 8001d6a:	bd10      	pop	{r4, pc}

08001d6c <SOF_Callback>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SOF_Callback(void)
{
 8001d6c:	b508      	push	{r3, lr}
  static uint32_t FrameCount = 0;
  
  if(bDeviceState == CONFIGURED)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <SOF_Callback+0x24>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d000      	beq.n	8001d78 <SOF_Callback+0xc>
 8001d76:	bd08      	pop	{r3, pc}
  {
    if (FrameCount++ == VCOMPORT_IN_FRAME_INTERVAL)
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <SOF_Callback+0x28>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	1c51      	adds	r1, r2, #1
 8001d7e:	2a05      	cmp	r2, #5
 8001d80:	6019      	str	r1, [r3, #0]
 8001d82:	d1f8      	bne.n	8001d76 <SOF_Callback+0xa>
    {
      /* Reset the frame counter */
      FrameCount = 0;
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      
      /* Check the data to be sent through IN pipe */
      Handle_USBAsynchXfer();
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <SOF_Callback+0x2c>)
 8001d8a:	4798      	blx	r3
 8001d8c:	e7f3      	b.n	8001d76 <SOF_Callback+0xa>
 8001d8e:	bf00      	nop
 8001d90:	200002b0 	.word	0x200002b0
 8001d94:	2000029c 	.word	0x2000029c
 8001d98:	0800260d 	.word	0x0800260d

08001d9c <USB_Istr>:
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001d9c:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001da0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001da4:	6813      	ldr	r3, [r2, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001da6:	b570      	push	{r4, r5, r6, lr}
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001da8:	4c6b      	ldr	r4, [pc, #428]	; (8001f58 <USB_Istr+0x1bc>)
 8001daa:	b29b      	uxth	r3, r3

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001dac:	4d6b      	ldr	r5, [pc, #428]	; (8001f5c <USB_Istr+0x1c0>)
void USB_Istr(void)
{
    uint32_t i=0;
 __IO uint32_t EP[8];
  
  wIstr = _GetISTR();
 8001dae:	8023      	strh	r3, [r4, #0]

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001db0:	8821      	ldrh	r1, [r4, #0]
 8001db2:	882b      	ldrh	r3, [r5, #0]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Istr(void)
{
 8001db4:	b088      	sub	sp, #32
  wIstr = _GetISTR();

  //printf("%x %x %x %x  ", wIstr >> 16, wIstr & 0x0000FFFF, wInterrupt_Mask >> 16, wInterrupt_Mask&0x0000FFFF);

#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
 8001db6:	4019      	ands	r1, r3
 8001db8:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8001dbc:	b289      	uxth	r1, r1
 8001dbe:	2900      	cmp	r1, #0
 8001dc0:	d168      	bne.n	8001e94 <USB_Istr+0xf8>
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
  
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
 8001dc2:	8822      	ldrh	r2, [r4, #0]
 8001dc4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001dc8:	4213      	tst	r3, r2
 8001dca:	d15f      	bne.n	8001e8c <USB_Istr+0xf0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/  
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
 8001dcc:	8822      	ldrh	r2, [r4, #0]
 8001dce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001dd2:	4213      	tst	r3, r2
 8001dd4:	d14e      	bne.n	8001e74 <USB_Istr+0xd8>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_ERR)
  if (wIstr & ISTR_ERR & wInterrupt_Mask)
 8001dd6:	8822      	ldrh	r2, [r4, #0]
 8001dd8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001ddc:	4213      	tst	r3, r2
  {
    _SetISTR((uint16_t)CLR_ERR);
 8001dde:	bf1f      	itttt	ne
 8001de0:	f645 4244 	movwne	r2, #23620	; 0x5c44
 8001de4:	f2c4 0200 	movtne	r2, #16384	; 0x4000
 8001de8:	f64d 71ff 	movwne	r1, #57343	; 0xdfff
 8001dec:	6011      	strne	r1, [r2, #0]
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
 8001dee:	8822      	ldrh	r2, [r4, #0]
 8001df0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df4:	4213      	tst	r3, r2
 8001df6:	d131      	bne.n	8001e5c <USB_Istr+0xc0>
#endif
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_SUSP)
  if (wIstr & ISTR_SUSP & wInterrupt_Mask)
 8001df8:	8822      	ldrh	r2, [r4, #0]
 8001dfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001dfe:	4213      	tst	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <USB_Istr+0x84>
  {
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <USB_Istr+0x1c4>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d125      	bne.n	8001e56 <USB_Istr+0xba>
    }
    else
    {
      //printf("l\n");    	
      /* if not possible then resume after xx ms */
      Resume(RESUME_LATER);
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <USB_Istr+0x1c8>)
 8001e0e:	4798      	blx	r3
    }
    
    //printf(" out susp ");
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    _SetISTR((uint16_t)CLR_SUSP);
 8001e10:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001e14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001e18:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
 8001e1c:	882b      	ldrh	r3, [r5, #0]
 8001e1e:	6011      	str	r1, [r2, #0]
  }
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
 8001e20:	8822      	ldrh	r2, [r4, #0]
 8001e22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001e26:	4213      	tst	r3, r2
 8001e28:	d013      	beq.n	8001e52 <USB_Istr+0xb6>
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001e2a:	f645 4244 	movw	r2, #23620	; 0x5c44
 8001e2e:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 8001e32:	f2c4 0200 	movt	r2, #16384	; 0x4000
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001e36:	f645 4348 	movw	r3, #23624	; 0x5c48

#if (IMR_MSK & ISTR_ESOF)
  if (wIstr & ISTR_ESOF & wInterrupt_Mask)
  {
    /* clear ESOF flag in ISTR */
    _SetISTR((uint16_t)CLR_ESOF);
 8001e3a:	6011      	str	r1, [r2, #0]
    
    if ((_GetFNR()&FNR_RXDP)!=0)
 8001e3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0419      	lsls	r1, r3, #16
 8001e44:	d432      	bmi.n	8001eac <USB_Istr+0x110>
        esof_counter = 0;
      }
    }
    else
    {
        esof_counter = 0;
 8001e46:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <USB_Istr+0x1cc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* resume handling timing is made with ESOFs */
    Resume(RESUME_ESOF); /* request without change of the machine state */
 8001e4c:	2007      	movs	r0, #7
 8001e4e:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <USB_Istr+0x1c8>)
 8001e50:	4798      	blx	r3
#ifdef ESOF_CALLBACK
    ESOF_Callback();
#endif
  }
#endif
} /* USB_Istr */
 8001e52:	b008      	add	sp, #32
 8001e54:	bd70      	pop	{r4, r5, r6, pc}
	//printf(" in susp ");
    /* check if SUSPEND is possible */
    if(fSuspendEnabled)
    {
      //printf("k\n");
      Suspend();
 8001e56:	4b45      	ldr	r3, [pc, #276]	; (8001f6c <USB_Istr+0x1d0>)
 8001e58:	4798      	blx	r3
 8001e5a:	e7d9      	b.n	8001e10 <USB_Istr+0x74>
#endif
  /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (IMR_MSK & ISTR_WKUP)
  if (wIstr & ISTR_WKUP & wInterrupt_Mask)
  {
    _SetISTR((uint16_t)CLR_WKUP);
 8001e5c:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001e60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e64:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001e68:	601a      	str	r2, [r3, #0]
    Resume(RESUME_EXTERNAL);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <USB_Istr+0x1c8>)
 8001e6e:	4798      	blx	r3
 8001e70:	882b      	ldrh	r3, [r5, #0]
 8001e72:	e7c1      	b.n	8001df8 <USB_Istr+0x5c>
#if (IMR_MSK & ISTR_RESET)
  if (wIstr & ISTR_RESET & wInterrupt_Mask)
  {
  	//printf(" ISTR_RESET ");
  	
    _SetISTR((uint16_t)CLR_RESET);
 8001e74:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001e78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e7c:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001e80:	601a      	str	r2, [r3, #0]
    Device_Property.Reset();
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <USB_Istr+0x1d4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4798      	blx	r3
 8001e88:	882b      	ldrh	r3, [r5, #0]
 8001e8a:	e7a4      	b.n	8001dd6 <USB_Istr+0x3a>
#if (IMR_MSK & ISTR_CTR)
  if (wIstr & ISTR_CTR & wInterrupt_Mask)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    CTR_LP();
 8001e8c:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <USB_Istr+0x1d8>)
 8001e8e:	4798      	blx	r3
 8001e90:	882b      	ldrh	r3, [r5, #0]
 8001e92:	e79b      	b.n	8001dcc <USB_Istr+0x30>
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
    bIntPackSOF++;
 8001e94:	4b38      	ldr	r3, [pc, #224]	; (8001f78 <USB_Istr+0x1dc>)
#if (IMR_MSK & ISTR_SOF)
  if (wIstr & ISTR_SOF & wInterrupt_Mask)
  {
	//printf(" ISTR_SOF ");

    _SetISTR((uint16_t)CLR_SOF);
 8001e96:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8001e9a:	6011      	str	r1, [r2, #0]
    bIntPackSOF++;
 8001e9c:	781a      	ldrb	r2, [r3, #0]
 8001e9e:	3201      	adds	r2, #1
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]

#ifdef SOF_CALLBACK
    SOF_Callback();
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <USB_Istr+0x1e0>)
 8001ea6:	4798      	blx	r3
 8001ea8:	882b      	ldrh	r3, [r5, #0]
 8001eaa:	e78a      	b.n	8001dc2 <USB_Istr+0x26>
    _SetISTR((uint16_t)CLR_ESOF);
    
    if ((_GetFNR()&FNR_RXDP)!=0)
    {
      /* increment ESOF counter */
      esof_counter ++;
 8001eac:	492e      	ldr	r1, [pc, #184]	; (8001f68 <USB_Istr+0x1cc>)
 8001eae:	680b      	ldr	r3, [r1, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	600b      	str	r3, [r1, #0]
      
      /* test if we enter in ESOF more than 3 times with FSUSP =0 and RXDP =1=>> possible missing SUSP flag*/
      if ((esof_counter >3)&&((_GetCNTR()&CNTR_FSUSP)==0))
 8001eb4:	680b      	ldr	r3, [r1, #0]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d9c8      	bls.n	8001e4c <USB_Istr+0xb0>
 8001eba:	f645 4240 	movw	r2, #23616	; 0x5c40
 8001ebe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001ec2:	6813      	ldr	r3, [r2, #0]
 8001ec4:	f013 0308 	ands.w	r3, r3, #8
 8001ec8:	d1c0      	bne.n	8001e4c <USB_Istr+0xb0>
      {           
        /* this a sequence to apply a force RESET*/
      
        /*Store CNTR value */
        wCNTR = _GetCNTR(); 
 8001eca:	6810      	ldr	r0, [r2, #0]
 8001ecc:	4d2c      	ldr	r5, [pc, #176]	; (8001f80 <USB_Istr+0x1e4>)
 8001ece:	b280      	uxth	r0, r0
 8001ed0:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001ed4:	6028      	str	r0, [r5, #0]
 8001ed6:	f2c4 0200 	movt	r2, #16384	; 0x4000
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8001eda:	f852 4b04 	ldr.w	r4, [r2], #4
 8001ede:	ae08      	add	r6, sp, #32
 8001ee0:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2a4      	uxth	r4, r4
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	f840 4c20 	str.w	r4, [r0, #-32]
 8001eee:	d1f4      	bne.n	8001eda <USB_Istr+0x13e>
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ef0:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001ef2:	f645 4340 	movw	r3, #23616	; 0x5c40
      
        /*Store endpoints registers status */
        for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
      
        /*apply FRES */
        wCNTR|=CNTR_FRES;
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001efc:	682a      	ldr	r2, [r5, #0]
 8001efe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f02:	b292      	uxth	r2, r2
 8001f04:	601a      	str	r2, [r3, #0]
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001f06:	682a      	ldr	r2, [r5, #0]
        _SetCNTR(wCNTR);
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001f08:	f645 4044 	movw	r0, #23620	; 0x5c44
        /*apply FRES */
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	602a      	str	r2, [r5, #0]
        _SetCNTR(wCNTR);
 8001f12:	682a      	ldr	r2, [r5, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001f14:	f2c4 0000 	movt	r0, #16384	; 0x4000
        wCNTR|=CNTR_FRES;
        _SetCNTR(wCNTR);
 
        /*clear FRES*/
        wCNTR&=~CNTR_FRES;
        _SetCNTR(wCNTR);
 8001f18:	b292      	uxth	r2, r2
 8001f1a:	601a      	str	r2, [r3, #0]
      
        /*poll for RESET flag in ISTR*/
        while((_GetISTR()&ISTR_RESET) == 0);
 8001f1c:	6802      	ldr	r2, [r0, #0]
 8001f1e:	f645 4344 	movw	r3, #23620	; 0x5c44
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f28:	d5f8      	bpl.n	8001f1c <USB_Istr+0x180>
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
 8001f2a:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8001f2e:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8001f32:	6018      	str	r0, [r3, #0]
 8001f34:	f2c4 0200 	movt	r2, #16384	; 0x4000
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f38:	2300      	movs	r3, #0
        _SetENDPOINT(i, EP[i]);
 8001f3a:	ac08      	add	r4, sp, #32
 8001f3c:	eb04 0083 	add.w	r0, r4, r3, lsl #2
 8001f40:	f850 0c20 	ldr.w	r0, [r0, #-32]
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f44:	3301      	adds	r3, #1
        _SetENDPOINT(i, EP[i]);
 8001f46:	b280      	uxth	r0, r0
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f48:	2b08      	cmp	r3, #8
        _SetENDPOINT(i, EP[i]);
 8001f4a:	f842 0b04 	str.w	r0, [r2], #4
  
        /* clear RESET flag in ISTR */
        _SetISTR((uint16_t)CLR_RESET);
   
       /*restore Enpoints*/
        for (i=0;i<8;i++)
 8001f4e:	d1f4      	bne.n	8001f3a <USB_Istr+0x19e>
        _SetENDPOINT(i, EP[i]);
      
        esof_counter = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	600b      	str	r3, [r1, #0]
 8001f54:	e77a      	b.n	8001e4c <USB_Istr+0xb0>
 8001f56:	bf00      	nop
 8001f58:	20000c30 	.word	0x20000c30
 8001f5c:	2000148c 	.word	0x2000148c
 8001f60:	200002b4 	.word	0x200002b4
 8001f64:	08002399 	.word	0x08002399
 8001f68:	200002a8 	.word	0x200002a8
 8001f6c:	08002269 	.word	0x08002269
 8001f70:	20000060 	.word	0x20000060
 8001f74:	080033f1 	.word	0x080033f1
 8001f78:	200002a4 	.word	0x200002a4
 8001f7c:	08001d6d 	.word	0x08001d6d
 8001f80:	200002a0 	.word	0x200002a0

08001f84 <Virtual_Com_Port_SetConfiguration>:
*******************************************************************************/
void Virtual_Com_Port_SetConfiguration(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  if (pInfo->Current_Configuration != 0)
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <Virtual_Com_Port_SetConfiguration+0x10>)
 8001f86:	7a9b      	ldrb	r3, [r3, #10]
 8001f88:	b113      	cbz	r3, 8001f90 <Virtual_Com_Port_SetConfiguration+0xc>
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8001f8a:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <Virtual_Com_Port_SetConfiguration+0x14>)
 8001f8c:	2205      	movs	r2, #5
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20001468 	.word	0x20001468
 8001f98:	200002b0 	.word	0x200002b0

08001f9c <Virtual_Com_Port_SetDeviceAddress>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_SetDeviceAddress (void)
{
  bDeviceState = ADDRESSED;
 8001f9c:	f240 23b0 	movw	r3, #688	; 0x2b0
 8001fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop

08001fac <Virtual_Com_Port_Status_In>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_In(void)
{
  if (Request == SET_LINE_CODING)
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <Virtual_Com_Port_Status_In+0x10>)
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	2a20      	cmp	r2, #32
 8001fb2:	d101      	bne.n	8001fb8 <Virtual_Com_Port_Status_In+0xc>
  {
    //USART_Config();
    Request = 0;
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	200002ac 	.word	0x200002ac

08001fc0 <Virtual_Com_Port_Status_Out>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Status_Out(void)
{}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop

08001fc4 <Virtual_Com_Port_Data_Setup>:
{
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001fc4:	2821      	cmp	r0, #33	; 0x21
* Input          : Request Nb.
* Output         : None.
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_Data_Setup(uint8_t RequestNo)
{
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4603      	mov	r3, r0
  uint8_t    *(*CopyRoutine)(uint16_t);

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
 8001fca:	d003      	beq.n	8001fd4 <Virtual_Com_Port_Data_Setup+0x10>
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
 8001fcc:	2820      	cmp	r0, #32
 8001fce:	d011      	beq.n	8001ff4 <Virtual_Com_Port_Data_Setup+0x30>
    Request = SET_LINE_CODING;
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	bd10      	pop	{r4, pc}

  CopyRoutine = NULL;

  if (RequestNo == GET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <Virtual_Com_Port_Data_Setup+0x50>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fde:	2b21      	cmp	r3, #33	; 0x21
 8001fe0:	d1f6      	bne.n	8001fd0 <Virtual_Com_Port_Data_Setup+0xc>
    {
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
 8001fe2:	490d      	ldr	r1, [pc, #52]	; (8002018 <Virtual_Com_Port_Data_Setup+0x54>)
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001fe4:	6813      	ldr	r3, [r2, #0]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001fe6:	2400      	movs	r4, #0
  (*CopyRoutine)(0);
 8001fe8:	4620      	mov	r0, r4
  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
  }

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8001fea:	6199      	str	r1, [r3, #24]
  pInformation->Ctrl_Info.Usb_wOffset = 0;
 8001fec:	825c      	strh	r4, [r3, #18]
  (*CopyRoutine)(0);
 8001fee:	4788      	blx	r1
  return USB_SUCCESS;
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	bd10      	pop	{r4, pc}
      CopyRoutine = Virtual_Com_Port_GetLineCoding;
    }
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <Virtual_Com_Port_Data_Setup+0x50>)
 8001ff6:	6811      	ldr	r1, [r2, #0]
 8001ff8:	7809      	ldrb	r1, [r1, #0]
 8001ffa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001ffe:	2921      	cmp	r1, #33	; 0x21
 8002000:	d003      	beq.n	800200a <Virtual_Com_Port_Data_Setup+0x46>
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002002:	4a06      	ldr	r2, [pc, #24]	; (800201c <Virtual_Com_Port_Data_Setup+0x58>)
  }

  if (CopyRoutine == NULL)
  {
    return USB_UNSUPPORT;
 8002004:	2002      	movs	r0, #2
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 8002006:	7013      	strb	r3, [r2, #0]

  pInformation->Ctrl_Info.CopyData = CopyRoutine;
  pInformation->Ctrl_Info.Usb_wOffset = 0;
  (*CopyRoutine)(0);
  return USB_SUCCESS;
}
 8002008:	bd10      	pop	{r4, pc}
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
    }
    Request = SET_LINE_CODING;
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <Virtual_Com_Port_Data_Setup+0x58>)
  }
  else if (RequestNo == SET_LINE_CODING)
  {
    if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
    {
      CopyRoutine = Virtual_Com_Port_SetLineCoding;
 800200c:	4904      	ldr	r1, [pc, #16]	; (8002020 <Virtual_Com_Port_Data_Setup+0x5c>)
    }
    Request = SET_LINE_CODING;
 800200e:	7003      	strb	r3, [r0, #0]
 8002010:	e7e8      	b.n	8001fe4 <Virtual_Com_Port_Data_Setup+0x20>
 8002012:	bf00      	nop
 8002014:	20001488 	.word	0x20001488
 8002018:	08002059 	.word	0x08002059
 800201c:	200002ac 	.word	0x200002ac
 8002020:	08002071 	.word	0x08002071

08002024 <Virtual_Com_Port_NoData_Setup>:
* Return         : USB_UNSUPPORT or USB_SUCCESS.
*******************************************************************************/
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <Virtual_Com_Port_NoData_Setup+0x20>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800202e:	2b21      	cmp	r3, #33	; 0x21
 8002030:	d001      	beq.n	8002036 <Virtual_Com_Port_NoData_Setup+0x12>
    {
      return USB_SUCCESS;
    }
  }

  return USB_UNSUPPORT;
 8002032:	2002      	movs	r0, #2
}
 8002034:	4770      	bx	lr
RESULT Virtual_Com_Port_NoData_Setup(uint8_t RequestNo)
{

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
 8002036:	2802      	cmp	r0, #2
 8002038:	d001      	beq.n	800203e <Virtual_Com_Port_NoData_Setup+0x1a>
    {
      return USB_SUCCESS;
    }
    else if (RequestNo == SET_CONTROL_LINE_STATE)
 800203a:	2822      	cmp	r0, #34	; 0x22
 800203c:	d1f9      	bne.n	8002032 <Virtual_Com_Port_NoData_Setup+0xe>

  if (Type_Recipient == (CLASS_REQUEST | INTERFACE_RECIPIENT))
  {
    if (RequestNo == SET_COMM_FEATURE)
    {
      return USB_SUCCESS;
 800203e:	2000      	movs	r0, #0
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20001488 	.word	0x20001488

08002048 <Virtual_Com_Port_Get_Interface_Setting>:
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
RESULT Virtual_Com_Port_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
{
  if (AlternateSetting > 0)
 8002048:	b109      	cbz	r1, 800204e <Virtual_Com_Port_Get_Interface_Setting+0x6>
  {
    return USB_UNSUPPORT;
 800204a:	2002      	movs	r0, #2
 800204c:	4770      	bx	lr
  }
  else if (Interface > 1)
 800204e:	2801      	cmp	r0, #1
 8002050:	d8fb      	bhi.n	800204a <Virtual_Com_Port_Get_Interface_Setting+0x2>
  {
    return USB_UNSUPPORT;
  }
  return USB_SUCCESS;
 8002052:	4608      	mov	r0, r1
}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop

08002058 <Virtual_Com_Port_GetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002058:	b108      	cbz	r0, 800205e <Virtual_Com_Port_GetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 800205a:	4803      	ldr	r0, [pc, #12]	; (8002068 <Virtual_Com_Port_GetLineCoding+0x10>)
}
 800205c:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 800205e:	4b03      	ldr	r3, [pc, #12]	; (800206c <Virtual_Com_Port_GetLineCoding+0x14>)
 8002060:	2208      	movs	r2, #8
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	821a      	strh	r2, [r3, #16]
    return NULL;
 8002066:	4770      	bx	lr
 8002068:	200000dc 	.word	0x200000dc
 800206c:	20001488 	.word	0x20001488

08002070 <Virtual_Com_Port_SetLineCoding>:
* Output         : None.
* Return         : Linecoding structure base address.
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
 8002070:	b108      	cbz	r0, 8002076 <Virtual_Com_Port_SetLineCoding+0x6>
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
    return NULL;
  }
  return(uint8_t *)&linecoding;
 8002072:	4803      	ldr	r0, [pc, #12]	; (8002080 <Virtual_Com_Port_SetLineCoding+0x10>)
}
 8002074:	4770      	bx	lr
*******************************************************************************/
uint8_t *Virtual_Com_Port_SetLineCoding(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = sizeof(linecoding);
 8002076:	4b03      	ldr	r3, [pc, #12]	; (8002084 <Virtual_Com_Port_SetLineCoding+0x14>)
 8002078:	2208      	movs	r2, #8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	821a      	strh	r2, [r3, #16]
    return NULL;
 800207e:	4770      	bx	lr
 8002080:	200000dc 	.word	0x200000dc
 8002084:	20001488 	.word	0x20001488

08002088 <Virtual_Com_Port_GetStringDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the string descriptors.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
 8002088:	b508      	push	{r3, lr}
  uint8_t wValue0 = pInformation->USBwValue0;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <Virtual_Com_Port_GetStringDescriptor+0x1c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	78db      	ldrb	r3, [r3, #3]
  if (wValue0 > 4)
 8002090:	2b04      	cmp	r3, #4
 8002092:	d805      	bhi.n	80020a0 <Virtual_Com_Port_GetStringDescriptor+0x18>
  {
    return NULL;
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
 8002094:	4904      	ldr	r1, [pc, #16]	; (80020a8 <Virtual_Com_Port_GetStringDescriptor+0x20>)
 8002096:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <Virtual_Com_Port_GetStringDescriptor+0x24>)
 800209c:	4798      	blx	r3
 800209e:	bd08      	pop	{r3, pc}
uint8_t *Virtual_Com_Port_GetStringDescriptor(uint16_t Length)
{
  uint8_t wValue0 = pInformation->USBwValue0;
  if (wValue0 > 4)
  {
    return NULL;
 80020a0:	2000      	movs	r0, #0
  }
  else
  {
    return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
  }
}
 80020a2:	bd08      	pop	{r3, pc}
 80020a4:	20001488 	.word	0x20001488
 80020a8:	200000bc 	.word	0x200000bc
 80020ac:	08002acd 	.word	0x08002acd

080020b0 <Virtual_Com_Port_GetConfigDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the configuration descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetConfigDescriptor(uint16_t Length)
{
 80020b0:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Config_Descriptor);
 80020b2:	f240 0158 	movw	r1, #88	; 0x58
 80020b6:	f642 23cd 	movw	r3, #10957	; 0x2acd
 80020ba:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80020be:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020c2:	4798      	blx	r3
}
 80020c4:	bd08      	pop	{r3, pc}
 80020c6:	bf00      	nop

080020c8 <Virtual_Com_Port_GetDeviceDescriptor>:
* Input          : Length.
* Output         : None.
* Return         : The address of the device descriptor.
*******************************************************************************/
uint8_t *Virtual_Com_Port_GetDeviceDescriptor(uint16_t Length)
{
 80020c8:	b508      	push	{r3, lr}
  return Standard_GetDescriptorData(Length, &Device_Descriptor);
 80020ca:	f240 01b4 	movw	r1, #180	; 0xb4
 80020ce:	f642 23cd 	movw	r3, #10957	; 0x2acd
 80020d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80020d6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80020da:	4798      	blx	r3
}
 80020dc:	bd08      	pop	{r3, pc}
 80020de:	bf00      	nop

080020e0 <Virtual_Com_Port_Reset>:
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80020e0:	f241 4288 	movw	r2, #5256	; 0x1488

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80020e4:	f643 1370 	movw	r3, #14704	; 0x3970
 80020e8:	f6c0 0300 	movt	r3, #2048	; 0x800
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80020ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020f0:	6812      	ldr	r2, [r2, #0]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80020f2:	79d9      	ldrb	r1, [r3, #7]
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
 80020f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 80020f8:	f243 1311 	movw	r3, #12561	; 0x3111
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 80020fc:	2400      	movs	r4, #0

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];
 80020fe:	7251      	strb	r1, [r2, #9]
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_Reset(void)
{
  /* Set Virtual_Com_Port DEVICE as not configured */
  pInformation->Current_Configuration = 0;
 8002100:	7294      	strb	r4, [r2, #10]

  /* Current Feature initialization */
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;
 8002102:	72d4      	strb	r4, [r2, #11]

  SetBTABLE(BTABLE_ADDRESS);
 8002104:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002108:	4620      	mov	r0, r4

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800210a:	f243 1625 	movw	r6, #12581	; 0x3125
  pInformation->Current_Feature = Virtual_Com_Port_ConfigDescriptor[7];

  /* Set Virtual_Com_Port DEVICE with the default Interface*/
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);
 800210e:	4798      	blx	r3

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 8002110:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002114:	4620      	mov	r0, r4
 8002116:	f44f 7100 	mov.w	r1, #512	; 0x200
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800211a:	f243 153d 	movw	r5, #12605	; 0x313d
  pInformation->Current_Interface = 0;

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
 800211e:	47b0      	blx	r6
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 8002120:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002124:	2110      	movs	r1, #16
 8002126:	4620      	mov	r0, r4
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 8002128:	f243 2a91 	movw	sl, #12945	; 0x3291

  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
 800212c:	47a8      	blx	r5
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800212e:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4620      	mov	r0, r4
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 8002136:	f243 286d 	movw	r8, #12909	; 0x326d
  SetBTABLE(BTABLE_ADDRESS);

  /* Initialize Endpoint 0 */
  SetEPType(ENDP0, EP_CONTROL);
  SetEPTxStatus(ENDP0, EP_TX_STALL);
  SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800213a:	47d0      	blx	sl
  SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800213c:	f6c0 0800 	movt	r8, #2048	; 0x800
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	4620      	mov	r0, r4
 8002144:	47c0      	blx	r8
  Clear_Status_Out(ENDP0);
 8002146:	f243 2305 	movw	r3, #12805	; 0x3205
 800214a:	4620      	mov	r0, r4
 800214c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002150:	4798      	blx	r3
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002152:	f240 0360 	movw	r3, #96	; 0x60
 8002156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800215a:	f243 3919 	movw	r9, #13081	; 0x3319
 800215e:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002162:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002166:	4620      	mov	r0, r4
 8002168:	47c8      	blx	r9
  SetEPRxValid(ENDP0);
 800216a:	f243 13e1 	movw	r3, #12769	; 0x31e1
 800216e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002172:	4620      	mov	r0, r4
 8002174:	4798      	blx	r3

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
 8002176:	2001      	movs	r0, #1
 8002178:	4621      	mov	r1, r4
 800217a:	47b0      	blx	r6
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
 800217c:	2001      	movs	r0, #1
 800217e:	21c0      	movs	r1, #192	; 0xc0
 8002180:	47c0      	blx	r8
  SetEPTxStatus(ENDP1, EP_TX_NAK);
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 8002182:	f243 177d 	movw	r7, #12669	; 0x317d
  SetEPRxValid(ENDP0);

  /* Initialize Endpoint 1 */
  SetEPType(ENDP1, EP_BULK);
  SetEPTxAddr(ENDP1, ENDP1_TXADDR);
  SetEPTxStatus(ENDP1, EP_TX_NAK);
 8002186:	2001      	movs	r0, #1
 8002188:	2120      	movs	r1, #32
 800218a:	47a8      	blx	r5
  SetEPRxStatus(ENDP1, EP_RX_DIS);
 800218c:	f6c0 0700 	movt	r7, #2048	; 0x800
 8002190:	2001      	movs	r0, #1
 8002192:	4621      	mov	r1, r4
 8002194:	47b8      	blx	r7

  /* Initialize Endpoint 2 */
  SetEPType(ENDP2, EP_INTERRUPT);
 8002196:	2002      	movs	r0, #2
 8002198:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800219c:	47b0      	blx	r6
  SetEPTxAddr(ENDP2, ENDP2_TXADDR);
 800219e:	2002      	movs	r0, #2
 80021a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a4:	47c0      	blx	r8
  SetEPRxStatus(ENDP2, EP_RX_DIS);
 80021a6:	2002      	movs	r0, #2
 80021a8:	4621      	mov	r1, r4
 80021aa:	47b8      	blx	r7
  SetEPTxStatus(ENDP2, EP_TX_NAK);
 80021ac:	2002      	movs	r0, #2
 80021ae:	2120      	movs	r1, #32
 80021b0:	47a8      	blx	r5

  /* Initialize Endpoint 3 */
  SetEPType(ENDP3, EP_BULK);
 80021b2:	2003      	movs	r0, #3
 80021b4:	4621      	mov	r1, r4
 80021b6:	47b0      	blx	r6
  SetEPRxAddr(ENDP3, ENDP3_RXADDR);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80021be:	47d0      	blx	sl
  SetEPRxCount(ENDP3, VIRTUAL_COM_PORT_DATA_SIZE);
 80021c0:	2003      	movs	r0, #3
 80021c2:	2140      	movs	r1, #64	; 0x40
 80021c4:	47c8      	blx	r9
  SetEPRxStatus(ENDP3, EP_RX_VALID);
 80021c6:	2003      	movs	r0, #3
 80021c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80021cc:	47b8      	blx	r7
  SetEPTxStatus(ENDP3, EP_TX_DIS);
 80021ce:	4621      	mov	r1, r4
 80021d0:	2003      	movs	r0, #3
 80021d2:	47a8      	blx	r5

  /* Set this device to response on default address */
  SetDeviceAddress(0);
 80021d4:	f642 73c1 	movw	r3, #12225	; 0x2fc1
 80021d8:	f6c0 0300 	movt	r3, #2048	; 0x800
 80021dc:	4620      	mov	r0, r4
 80021de:	4798      	blx	r3
  
  bDeviceState = ATTACHED;
 80021e0:	f240 23b0 	movw	r3, #688	; 0x2b0
 80021e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080021f0 <Virtual_Com_Port_init>:
void Virtual_Com_Port_init(void)
{

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80021f0:	f242 63b1 	movw	r3, #9905	; 0x26b1
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Virtual_Com_Port_init(void)
{
 80021f4:	b510      	push	{r4, lr}

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();
 80021f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80021fa:	4798      	blx	r3

  pInformation->Current_Configuration = 0;
 80021fc:	f241 4388 	movw	r3, #5256	; 0x1488
 8002200:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2400      	movs	r4, #0

  /* Connect the device */
  PowerOn();
 8002208:	f242 232d 	movw	r3, #8749	; 0x222d

  /* Update the serial number string descriptor with the data from the unique
  ID*/
  Get_SerialNum();

  pInformation->Current_Configuration = 0;
 800220c:	7294      	strb	r4, [r2, #10]

  /* Connect the device */
  PowerOn();
 800220e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002212:	4798      	blx	r3

  /* Perform basic device initialization operations */
  USB_SIL_Init();
 8002214:	f243 338d 	movw	r3, #13197	; 0x338d
 8002218:	f6c0 0300 	movt	r3, #2048	; 0x800
 800221c:	4798      	blx	r3

  /* configure the USART to the default settings */
  //USART_Config_Default();

  bDeviceState = UNCONNECTED;
 800221e:	f240 23b0 	movw	r3, #688	; 0x2b0
 8002222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002226:	601c      	str	r4, [r3, #0]
 8002228:	bd10      	pop	{r4, pc}
 800222a:	bf00      	nop

0800222c <PowerOn>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
RESULT PowerOn(void)
{
 800222c:	b538      	push	{r3, r4, r5, lr}
  uint16_t wRegVal;

  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);
 800222e:	f242 53c5 	movw	r3, #9669	; 0x25c5
 8002232:	2001      	movs	r0, #1
 8002234:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002238:	4798      	blx	r3

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 800223a:	f645 4544 	movw	r5, #23620	; 0x5c44
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800223e:	f645 4340 	movw	r3, #23616	; 0x5c40
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002242:	f241 428c 	movw	r2, #5260	; 0x148c
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002246:	f2c4 0300 	movt	r3, #16384	; 0x4000

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800224a:	2100      	movs	r1, #0
  /*** Clear pending interrupts ***/
  _SetISTR(0);
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 800224c:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 8002250:	2001      	movs	r0, #1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002252:	f2c4 0500 	movt	r5, #16384	; 0x4000
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002256:	f2c2 0200 	movt	r2, #8192	; 0x2000
  /*** cable plugged-in ? ***/
  USB_Cable_Config(ENABLE);

  /*** CNTR_PWDN = 0 ***/
  wRegVal = CNTR_FRES;
  _SetCNTR(wRegVal);
 800225a:	6018      	str	r0, [r3, #0]

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
 800225c:	6019      	str	r1, [r3, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
  _SetCNTR(wInterrupt_Mask);
  
  return USB_SUCCESS;
}
 800225e:	4608      	mov	r0, r1

  /*** CNTR_FRES = 0 ***/
  wInterrupt_Mask = 0;
  _SetCNTR(wInterrupt_Mask);
  /*** Clear pending interrupts ***/
  _SetISTR(0);
 8002260:	6029      	str	r1, [r5, #0]
  /*** Set interrupt mask ***/
  wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM;
 8002262:	8014      	strh	r4, [r2, #0]
  _SetCNTR(wInterrupt_Mask);
 8002264:	601c      	str	r4, [r3, #0]
  
  return USB_SUCCESS;
}
 8002266:	bd38      	pop	{r3, r4, r5, pc}

08002268 <Suspend>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 8002268:	b570      	push	{r4, r5, r6, lr}
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 800226a:	2300      	movs	r3, #0
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Suspend(void)
{
 800226c:	b082      	sub	sp, #8
  __IO uint32_t savePWR_CR=0;
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 800226e:	f645 4140 	movw	r1, #23616	; 0x5c40
 8002272:	f2c4 0100 	movt	r1, #16384	; 0x4000
void Suspend(void)
{
	uint32_t i =0;
	uint16_t wCNTR;
	uint32_t tmpreg = 0;
  __IO uint32_t savePWR_CR=0;
 8002276:	9301      	str	r3, [sp, #4]
	/* suspend preparation */
	/* ... */
	
	/*Store CNTR value */
	wCNTR = _GetCNTR();  
 8002278:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 800227c:	680d      	ldr	r5, [r1, #0]
 800227e:	493a      	ldr	r1, [pc, #232]	; (8002368 <Suspend+0x100>)
 8002280:	f2c4 0200 	movt	r2, #16384	; 0x4000

    /* This a sequence to apply a force RESET to handle a robustness case */
    
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
 8002284:	f852 0b04 	ldr.w	r0, [r2], #4
 8002288:	b280      	uxth	r0, r0
 800228a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800228e:	3301      	adds	r3, #1
 8002290:	2b08      	cmp	r3, #8
 8002292:	d1f7      	bne.n	8002284 <Suspend+0x1c>
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 8002294:	b2aa      	uxth	r2, r5
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 8002296:	f64f 74fe 	movw	r4, #65534	; 0xfffe
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 800229a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800229e:	f645 4340 	movw	r3, #23616	; 0x5c40
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80022a2:	402c      	ands	r4, r5
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80022a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80022a8:	f042 0601 	orr.w	r6, r2, #1
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
 80022ac:	f444 6580 	orr.w	r5, r4, #1024	; 0x400
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80022b0:	f645 4044 	movw	r0, #23620	; 0x5c44
	/*Store endpoints registers status */
    for (i=0;i<8;i++) EP[i] = _GetENDPOINT(i);
	
	/* unmask RESET flag */
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
 80022b4:	601a      	str	r2, [r3, #0]
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80022b6:	f2c4 0000 	movt	r0, #16384	; 0x4000
	wCNTR|=CNTR_RESETM;
	_SetCNTR(wCNTR);
	
	/*apply FRES */
	wCNTR|=CNTR_FRES;
	_SetCNTR(wCNTR);
 80022ba:	601e      	str	r6, [r3, #0]
	
	/*clear FRES*/
	wCNTR&=~CNTR_FRES;
	_SetCNTR(wCNTR);
 80022bc:	601d      	str	r5, [r3, #0]
	
	/*poll for RESET flag in ISTR*/
	while((_GetISTR()&ISTR_RESET) == 0);
 80022be:	6802      	ldr	r2, [r0, #0]
 80022c0:	f645 4344 	movw	r3, #23620	; 0x5c44
 80022c4:	0552      	lsls	r2, r2, #21
 80022c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80022ca:	d5f8      	bpl.n	80022be <Suspend+0x56>
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
 80022cc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 80022d0:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 80022d4:	6018      	str	r0, [r3, #0]
 80022d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 80022da:	2300      	movs	r3, #0
	_SetENDPOINT(i, EP[i]);
 80022dc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 80022e0:	3301      	adds	r3, #1
	_SetENDPOINT(i, EP[i]);
 80022e2:	b280      	uxth	r0, r0
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 80022e4:	2b08      	cmp	r3, #8
	_SetENDPOINT(i, EP[i]);
 80022e6:	f842 0b04 	str.w	r0, [r2], #4
	
	/* clear RESET flag in ISTR */
	_SetISTR((uint16_t)CLR_RESET);
	
	/*restore Enpoints*/
	for (i=0;i<8;i++)
 80022ea:	d1f7      	bne.n	80022dc <Suspend+0x74>
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
	_SetCNTR(wCNTR);
 80022ec:	f645 4340 	movw	r3, #23616	; 0x5c40
 80022f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
	/*restore Enpoints*/
	for (i=0;i<8;i++)
	_SetENDPOINT(i, EP[i]);
	
	/* Now it is safe to enter macrocell in suspend mode */
	wCNTR |= CNTR_FSUSP;
 80022f4:	f444 6481 	orr.w	r4, r4, #1032	; 0x408
	_SetCNTR(wCNTR);
 80022f8:	601c      	str	r4, [r3, #0]
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
 80022fa:	6819      	ldr	r1, [r3, #0]
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 80022fc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
	_SetCNTR(wCNTR);
	
	/* force low-power mode in the macrocell */
	wCNTR = _GetCNTR();
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
 8002300:	b289      	uxth	r1, r1
 8002302:	f041 0104 	orr.w	r1, r1, #4
 8002306:	6019      	str	r1, [r3, #0]
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002308:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800230c:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800230e:	f64e 5410 	movw	r4, #60688	; 0xed10
	wCNTR |= CNTR_LPMODE;
	_SetCNTR(wCNTR);
	
	/*prepare entry in low power mode (STOP mode)*/
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
 8002312:	9101      	str	r1, [sp, #4]
	
	tmpreg = REG_PWR_CR;
 8002314:	6811      	ldr	r1, [r2, #0]
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002316:	f2ce 0400 	movt	r4, #57344	; 0xe000
	/* Select the regulator state in STOP mode*/
	savePWR_CR = REG_PWR_CR;
	
	tmpreg = REG_PWR_CR;
	/* Clear PDDS and LPDS bits */
	tmpreg &= ((uint32_t)0xFFFFFFFC);
 800231a:	f021 0103 	bic.w	r1, r1, #3
	/* Set LPDS bit according to PWR_Regulator value */
	tmpreg |= PWR_Regulator_LowPower;
 800231e:	f041 0101 	orr.w	r1, r1, #1
	/* Store the new value */
	REG_PWR_CR = tmpreg;
 8002322:	6011      	str	r1, [r2, #0]
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 8002324:	6820      	ldr	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002326:	f645 4144 	movw	r1, #23620	; 0x5c44
	REG_PWR_CR = tmpreg;
	/* Set SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
        SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
#else
		REG_SCB_SCR |= SCB_SCR_SLEEPDEEP;       
 800232a:	f040 0004 	orr.w	r0, r0, #4
 800232e:	6020      	str	r0, [r4, #0]
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
 8002330:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8002334:	6808      	ldr	r0, [r1, #0]
 8002336:	04c0      	lsls	r0, r0, #19
 8002338:	d50f      	bpl.n	800235a <Suspend+0xf2>
#endif
	}
	else
	{
		/* Clear Wakeup flag */
		_SetISTR(CLR_WKUP);
 800233a:	f64e 70ff 	movw	r0, #61439	; 0xefff
 800233e:	6008      	str	r0, [r1, #0]
		/* clear FSUSP to abort entry in suspend mode  */
        wCNTR = _GetCNTR();
 8002340:	6818      	ldr	r0, [r3, #0]
        wCNTR&=~CNTR_FSUSP;
 8002342:	f64f 71f7 	movw	r1, #65527	; 0xfff7
 8002346:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 8002348:	6019      	str	r1, [r3, #0]
		
		/*restore sleep mode configuration */ 
		/* restore Power regulator config in sleep mode*/
		REG_PWR_CR = savePWR_CR;
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	6013      	str	r3, [r2, #0]
		
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)		
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	6023      	str	r3, [r4, #0]
#endif
    }
}
 8002356:	b002      	add	sp, #8
 8002358:	bd70      	pop	{r4, r5, r6, pc}
#endif
	
	/* enter system in STOP mode, only when wakeup flag in not set */
	if((_GetISTR()&ISTR_WKUP)==0)
	{
		__WFI();
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <Suspend+0x104>)
 800235c:	4798      	blx	r3
		/* Reset SLEEPDEEP bit of Cortex System Control Register */
#if defined (STM32F30X) || defined (STM32F37X)
                SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk); 
#else
                REG_SCB_SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP); 
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6023      	str	r3, [r4, #0]
 8002366:	e7f6      	b.n	8002356 <Suspend+0xee>
 8002368:	20000c38 	.word	0x20000c38
 800236c:	080026f5 	.word	0x080026f5

08002370 <Resume_Init>:
* Input          : None.
* Output         : None.
* Return         : USB_SUCCESS.
*******************************************************************************/
void Resume_Init(void)
{
 8002370:	b510      	push	{r4, lr}
  /* ------------------ ONLY WITH BUS-POWERED DEVICES ---------------------- */
  /* restart the clocks */
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
 8002372:	f645 4440 	movw	r4, #23616	; 0x5c40
 8002376:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800237a:	6823      	ldr	r3, [r4, #0]
  wCNTR &= (~CNTR_LPMODE);
 800237c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002380:	401a      	ands	r2, r3
  _SetCNTR(wCNTR);    
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 8002382:	f242 43f5 	movw	r3, #9461	; 0x24f5
 8002386:	f6c0 0300 	movt	r3, #2048	; 0x800
  /* ...  */

  /* CNTR_LPMODE = 0 */
  wCNTR = _GetCNTR();
  wCNTR &= (~CNTR_LPMODE);
  _SetCNTR(wCNTR);    
 800238a:	6022      	str	r2, [r4, #0]
  
  /* restore full power */
  /* ... on connected devices */
  Leave_LowPowerMode();
 800238c:	4798      	blx	r3

  /* reset FSUSP bit */
  _SetCNTR(IMR_MSK);
 800238e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002392:	6023      	str	r3, [r4, #0]
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop

08002398 <Resume>:
*                  decrementing of the ESOF counter in different states.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
 8002398:	b510      	push	{r4, lr}
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
 800239a:	4c2b      	ldr	r4, [pc, #172]	; (8002448 <Resume+0xb0>)
*******************************************************************************/
void Resume(RESUME_STATE eResumeSetVal)
{
  uint16_t wCNTR;

  if (eResumeSetVal != RESUME_ESOF)
 800239c:	2807      	cmp	r0, #7
    ResumeS.eState = eResumeSetVal;
 800239e:	bf18      	it	ne
 80023a0:	7020      	strbne	r0, [r4, #0]
  switch (ResumeS.eState)
 80023a2:	7823      	ldrb	r3, [r4, #0]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d819      	bhi.n	80023dc <Resume+0x44>
 80023a8:	e8df f003 	tbb	[pc, r3]
 80023ac:	2f2a221b 	.word	0x2f2a221b
 80023b0:	033a      	.short	0x033a
      _SetCNTR(wCNTR);
      ResumeS.eState = RESUME_ON;
      ResumeS.bESOFcnt = 10;
      break;
    case RESUME_ON:    
      ResumeS.bESOFcnt--;
 80023b2:	7863      	ldrb	r3, [r4, #1]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 80023ba:	7863      	ldrb	r3, [r4, #1]
 80023bc:	b983      	cbnz	r3, 80023e0 <Resume+0x48>
      {
        wCNTR = _GetCNTR();
 80023be:	f645 4240 	movw	r2, #23616	; 0x5c40
 80023c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80023c6:	6810      	ldr	r0, [r2, #0]
        wCNTR &= (~CNTR_RESUME);
 80023c8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80023cc:	4001      	ands	r1, r0
        _SetCNTR(wCNTR);
 80023ce:	6011      	str	r1, [r2, #0]
        ResumeS.eState = RESUME_OFF;
 80023d0:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <Resume+0xb0>)
 80023d2:	2106      	movs	r1, #6
 80023d4:	7011      	strb	r1, [r2, #0]
        remotewakeupon = 0;
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <Resume+0xb4>)
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
      ResumeS.eState = RESUME_OFF;
 80023dc:	2306      	movs	r3, #6
 80023de:	7023      	strb	r3, [r4, #0]
 80023e0:	bd10      	pop	{r4, pc}
  if (eResumeSetVal != RESUME_ESOF)
    ResumeS.eState = eResumeSetVal;
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <Resume+0xb4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d028      	beq.n	800243c <Resume+0xa4>
        Resume_Init();
        ResumeS.eState = RESUME_OFF;
      }
      else /* RESUME detected during the RemoteWAkeup signalling => keep RemoteWakeup handling*/
      {
        ResumeS.eState = RESUME_ON;
 80023ea:	2305      	movs	r3, #5
 80023ec:	7023      	strb	r3, [r4, #0]
 80023ee:	bd10      	pop	{r4, pc}
      }
      break;
    case RESUME_INTERNAL:
      Resume_Init();
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <Resume+0xb8>)
 80023f2:	4798      	blx	r3
      ResumeS.eState = RESUME_START;
 80023f4:	2304      	movs	r3, #4
 80023f6:	7023      	strb	r3, [r4, #0]
      remotewakeupon = 1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <Resume+0xb4>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
      break;
 80023fe:	bd10      	pop	{r4, pc}
    case RESUME_LATER:
      ResumeS.bESOFcnt = 2;
 8002400:	2302      	movs	r3, #2
 8002402:	7063      	strb	r3, [r4, #1]
      ResumeS.eState = RESUME_WAIT;
 8002404:	2303      	movs	r3, #3
 8002406:	7023      	strb	r3, [r4, #0]
      break;
 8002408:	bd10      	pop	{r4, pc}
    case RESUME_WAIT:
      ResumeS.bESOFcnt--;
 800240a:	7863      	ldrb	r3, [r4, #1]
 800240c:	3b01      	subs	r3, #1
 800240e:	b2db      	uxtb	r3, r3
 8002410:	7063      	strb	r3, [r4, #1]
      if (ResumeS.bESOFcnt == 0)
 8002412:	7863      	ldrb	r3, [r4, #1]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e3      	bne.n	80023e0 <Resume+0x48>
        ResumeS.eState = RESUME_START;
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <Resume+0xb0>)
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	bd10      	pop	{r4, pc}
      break;
    case RESUME_START:
      wCNTR = _GetCNTR();
 8002420:	f645 4340 	movw	r3, #23616	; 0x5c40
 8002424:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002428:	681a      	ldr	r2, [r3, #0]
      wCNTR |= CNTR_RESUME;
      _SetCNTR(wCNTR);
 800242a:	b292      	uxth	r2, r2
 800242c:	f042 0210 	orr.w	r2, r2, #16
 8002430:	601a      	str	r2, [r3, #0]
      ResumeS.eState = RESUME_ON;
 8002432:	2305      	movs	r3, #5
 8002434:	7023      	strb	r3, [r4, #0]
      ResumeS.bESOFcnt = 10;
 8002436:	230a      	movs	r3, #10
 8002438:	7063      	strb	r3, [r4, #1]
      break;
 800243a:	bd10      	pop	{r4, pc}
  switch (ResumeS.eState)
  {
    case RESUME_EXTERNAL:
      if (remotewakeupon ==0)
      {
        Resume_Init();
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <Resume+0xb8>)
 800243e:	4798      	blx	r3
        ResumeS.eState = RESUME_OFF;
 8002440:	2306      	movs	r3, #6
 8002442:	7023      	strb	r3, [r4, #0]
 8002444:	bd10      	pop	{r4, pc}
 8002446:	bf00      	nop
 8002448:	20000c34 	.word	0x20000c34
 800244c:	200002b8 	.word	0x200002b8
 8002450:	08002371 	.word	0x08002371

08002454 <USBWakeUp_IRQHandler>:


void USBWakeUp_IRQHandler(void)
{
	//EXTI_ClearITPendingBit(EXTI_Line18);
	REG_EXTI_PR = (1 << 18 );
 8002454:	f240 4314 	movw	r3, #1044	; 0x414
 8002458:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800245c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	4770      	bx	lr

08002464 <IntToUnicode>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8002464:	b430      	push	{r4, r5}
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002466:	b1ca      	cbz	r2, 800249c <IntToUnicode+0x38>
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002468:	1e55      	subs	r5, r2, #1
 800246a:	b2ed      	uxtb	r5, r5
 800246c:	3501      	adds	r5, #1
 800246e:	2300      	movs	r3, #0
 8002470:	006d      	lsls	r5, r5, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002472:	461c      	mov	r4, r3
 8002474:	e007      	b.n	8002486 <IntToUnicode+0x22>
  
  for( idx = 0 ; idx < len ; idx ++)
  {
    if( ((value >> 28)) < 0xA )
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 8002476:	3230      	adds	r2, #48	; 0x30
 8002478:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 800247a:	18ca      	adds	r2, r1, r3
 800247c:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 800247e:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002480:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002482:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002484:	d00a      	beq.n	800249c <IntToUnicode+0x38>
  {
    if( ((value >> 28)) < 0xA )
 8002486:	0f02      	lsrs	r2, r0, #28
 8002488:	2a09      	cmp	r2, #9
 800248a:	d9f4      	bls.n	8002476 <IntToUnicode+0x12>
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800248c:	3237      	adds	r2, #55	; 0x37
 800248e:	54ca      	strb	r2, [r1, r3]
* Description    : Convert Hex 32Bits value into char.
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
 8002490:	18ca      	adds	r2, r1, r3
 8002492:	3302      	adds	r3, #2
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 8002494:	0100      	lsls	r0, r0, #4
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8002496:	42ab      	cmp	r3, r5
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8002498:	7054      	strb	r4, [r2, #1]
*******************************************************************************/
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 800249a:	d1f4      	bne.n	8002486 <IntToUnicode+0x22>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 800249c:	bc30      	pop	{r4, r5}
 800249e:	4770      	bx	lr

080024a0 <USB_LP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_IRQHandler(void)
{
 80024a0:	b508      	push	{r3, lr}
	//printf("USB\n");	
	USB_Istr();
 80024a2:	f641 539d 	movw	r3, #7581	; 0x1d9d
 80024a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80024aa:	4798      	blx	r3
 80024ac:	bd08      	pop	{r3, pc}
 80024ae:	bf00      	nop

080024b0 <Set_System>:
*******************************************************************************/
void Set_System(void)
{  	
	#if HW_USE_USB_SMARTROBOT_BD == 1
	//-- PC.13
	REG_GPIOC_CRH &= ~(0x0F << (20));	// Clear
 80024b0:	f241 0304 	movw	r3, #4100	; 0x1004
 80024b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024be:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x02 << (20));	// MODE, PC.13 Output mode, max speed 2Mhz
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80024c6:	601a      	str	r2, [r3, #0]
	REG_GPIOC_CRH |=  (0x00 << (22));	// CNF,  PC.13 General purpose output push-pul
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <Set_USBClock>:
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80024d0:	f241 0204 	movw	r2, #4100	; 0x1004
 80024d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024d8:	6811      	ldr	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80024da:	f241 031c 	movw	r3, #4124	; 0x101c
*******************************************************************************/
void Set_USBClock(void)
{
	//-- USB 72M * 2 / 3 = 48Mhz
	//
	CLR_BIT( REG_RCC_CFGR, 22 );	
 80024de:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80024e2:	6011      	str	r1, [r2, #0]
	
	//-- USB Clock Enable 
	//
	SET_BIT( REG_RCC_APB1ENR, 23 );
 80024e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop

080024f4 <Leave_LowPowerMode>:
void Leave_LowPowerMode(void)
{
  DEVICE_INFO *pInfo = &Device_Info;

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <Leave_LowPowerMode+0x18>)
 80024f6:	7a9b      	ldrb	r3, [r3, #10]
 80024f8:	b91b      	cbnz	r3, 8002502 <Leave_LowPowerMode+0xe>
    /* Device configured */
    bDeviceState = CONFIGURED;
  }
  else
  {
    bDeviceState = ATTACHED;
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <Leave_LowPowerMode+0x1c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	4770      	bx	lr

  /* Set the device state to the correct state */
  if (pInfo->Current_Configuration != 0)
  {
    /* Device configured */
    bDeviceState = CONFIGURED;
 8002502:	4b03      	ldr	r3, [pc, #12]	; (8002510 <Leave_LowPowerMode+0x1c>)
 8002504:	2205      	movs	r2, #5
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20001468 	.word	0x20001468
 8002510:	200002b0 	.word	0x200002b0

08002514 <USB_Interrupts_Config>:
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002514:	f240 4214 	movw	r2, #1044	; 0x414
* Description    : Configures the USB interrupts
* Input          : None.
* Return         : None.
*******************************************************************************/
void USB_Interrupts_Config(void)
{
 8002518:	b538      	push	{r3, r4, r5, lr}

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 800251a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800251e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002522:	f44f 6380 	mov.w	r3, #1024	; 0x400
void USB_Interrupts_Config(void)
{

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
 8002526:	6011      	str	r1, [r2, #0]
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002528:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800252c:	6819      	ldr	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 800252e:	f240 4204 	movw	r2, #1028	; 0x404

	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
 8002532:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002536:	6019      	str	r1, [r3, #0]
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002538:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800253c:	6810      	ldr	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 800253e:	f44f 6181 	mov.w	r1, #1032	; 0x408
	//-- EXTI Line 18 Interrupt Enabled
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
 8002542:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002546:	6010      	str	r0, [r2, #0]
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002548:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800254c:	6808      	ldr	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 800254e:	f240 420c 	movw	r2, #1036	; 0x40c
	//
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
 8002552:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8002556:	6008      	str	r0, [r1, #0]
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8002558:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800255c:	6811      	ldr	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800255e:	f640 549d 	movw	r4, #3485	; 0xd9d
	REG_EXTI_PR = (1 << 18 );		// EXTI line 18 Clear Pending Bit connected internally to the USB IP
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
 8002562:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002566:	6011      	str	r1, [r2, #0]
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 8002568:	681d      	ldr	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 800256a:	f242 41a1 	movw	r1, #9377	; 0x24a1
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800256e:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8002572:	2090      	movs	r0, #144	; 0x90
 8002574:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002578:	2200      	movs	r2, #0
 800257a:	f6c0 0400 	movt	r4, #2048	; 0x800
	
	CLR_BIT( REG_EXTI_IMR,  18 );
	CLR_BIT( REG_EXTI_EMR,  18 );
	SET_BIT( REG_EXTI_RTSR, 18 );	// Rising Edge
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable
 800257e:	601d      	str	r5, [r3, #0]

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
 8002580:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8002582:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002586:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800258a:	681a      	ldr	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 800258c:	f242 4155 	movw	r1, #9301	; 0x2455
	CLR_BIT( REG_EXTI_FTSR, 18 );
	SET_BIT( REG_EXTI_IMR,  18 );	// Enable

  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
 8002590:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002594:	601a      	str	r2, [r3, #0]
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
 8002596:	f6c0 0100 	movt	r1, #2048	; 0x800
 800259a:	2200      	movs	r2, #0
 800259c:	20e8      	movs	r0, #232	; 0xe8
 800259e:	47a0      	blx	r4
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80025a0:	f24e 1204 	movw	r2, #57604	; 0xe104
 80025a4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80025a8:	6811      	ldr	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80025aa:	f44f 6382 	mov.w	r3, #1040	; 0x410
  
	Hw_ISR_SetIRQFuncByAddr( 0x0090, (u32)USB_LP_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 20/32 ), 20%32 );	// NVIC 20번 USB_LP 인터럽트 활성화 
	
	Hw_ISR_SetIRQFuncByAddr( 0x00E8, (u32)USBWakeUp_IRQHandler, 0 );
	SET_BIT( REG_NVIC_ISER( 42/32 ), 42%32 );	// NVIC 42번 USB Wake Up 인터럽트 활성화 
 80025ae:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80025b2:	6011      	str	r1, [r2, #0]

	SET_BIT( REG_EXTI_SWIER, 18 );
 80025b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	bd38      	pop	{r3, r4, r5, pc}
 80025c2:	bf00      	nop

080025c4 <USB_Cable_Config>:
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80025c4:	f241 030c 	movw	r3, #4108	; 0x100c
 80025c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80025cc:	681a      	ldr	r2, [r3, #0]
* Input          : None.
* Return         : Status
*******************************************************************************/
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
 80025ce:	b918      	cbnz	r0, 80025d8 <USB_Cable_Config+0x14>
	#endif
  }
  else
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	SET_BIT( REG_GPIOC_ODR, 13 );    
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4770      	bx	lr
void USB_Cable_Config (char NewState)
{
  if (NewState != DISABLE)
  {
  	#if HW_USE_USB_SMARTROBOT_BD == 1
	CLR_BIT( REG_GPIOC_ODR, 13 );
 80025d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4770      	bx	lr

080025e0 <USB_To_USART_Send_Data>:
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80025e2:	460d      	mov	r5, r1
* Input          : data_buffer: data address.
                   Nb_bytes: number of bytes to send.
* Return         : none.
*******************************************************************************/
void USB_To_USART_Send_Data(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80025e4:	b083      	sub	sp, #12
 80025e6:	4606      	mov	r6, r0
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80025e8:	b159      	cbz	r1, 8002602 <USB_To_USART_Send_Data+0x22>
 80025ea:	4f07      	ldr	r7, [pc, #28]	; (8002608 <USB_To_USART_Send_Data+0x28>)
 80025ec:	2400      	movs	r4, #0
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80025ee:	5d33      	ldrb	r3, [r6, r4]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80025f0:	2005      	movs	r0, #5
 80025f2:	f10d 0107 	add.w	r1, sp, #7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80025f6:	3401      	adds	r4, #1
    //USART_SendData(EVAL_COM1, *(data_buffer + i));
    //while(USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TXE) == RESET); 
    
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
 80025f8:	f88d 3007 	strb.w	r3, [sp, #7]
    Hw_Uart_Q_Push( 5, &UartData );	//
 80025fc:	47b8      	blx	r7
{
  
  uint32_t i;
  u8 UartData;
  
  for (i = 0; i < Nb_bytes; i++)
 80025fe:	42ac      	cmp	r4, r5
 8002600:	d3f5      	bcc.n	80025ee <USB_To_USART_Send_Data+0xe>
    //-- PC로부터 받은 데이터 처리
    //
    UartData = *(data_buffer + i);
    Hw_Uart_Q_Push( 5, &UartData );	//
  }  
}
 8002602:	b003      	add	sp, #12
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002606:	bf00      	nop
 8002608:	08000cc5 	.word	0x08000cc5

0800260c <Handle_USBAsynchXfer>:
* Description    : send data to USB.
* Input          : None.
* Return         : none.
*******************************************************************************/
void Handle_USBAsynchXfer (void)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
  
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;
  
  if(USB_Tx_State != 1)
 800260e:	4c20      	ldr	r4, [pc, #128]	; (8002690 <Handle_USBAsynchXfer+0x84>)
 8002610:	7823      	ldrb	r3, [r4, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d026      	beq.n	8002664 <Handle_USBAsynchXfer+0x58>
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
 8002616:	4d1f      	ldr	r5, [pc, #124]	; (8002694 <Handle_USBAsynchXfer+0x88>)
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800261e:	d022      	beq.n	8002666 <Handle_USBAsynchXfer+0x5a>
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <Handle_USBAsynchXfer+0x8c>)
 8002622:	6811      	ldr	r1, [r2, #0]
 8002624:	428b      	cmp	r3, r1
 8002626:	d02f      	beq.n	8002688 <Handle_USBAsynchXfer+0x7c>
 8002628:	bf98      	it	ls
 800262a:	b298      	uxthls	r0, r3
    {
      USB_Tx_State = 0; 
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
 800262c:	d921      	bls.n	8002672 <Handle_USBAsynchXfer+0x66>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 800262e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <Handle_USBAsynchXfer+0x90>)
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002634:	2940      	cmp	r1, #64	; 0x40
      return;
    }
    
    if(USART_Rx_ptr_out > USART_Rx_ptr_in) /* rollback */
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
 8002636:	6011      	str	r1, [r2, #0]
 8002638:	b298      	uxth	r0, r3
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800263a:	d91f      	bls.n	800267c <Handle_USBAsynchXfer+0x70>
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 800263c:	3340      	adds	r3, #64	; 0x40
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 800263e:	3940      	subs	r1, #64	; 0x40
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
      
      USART_Rx_ptr_out += VIRTUAL_COM_PORT_DATA_SIZE;	
 8002640:	602b      	str	r3, [r5, #0]
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
 8002642:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = VIRTUAL_COM_PORT_DATA_SIZE;
 8002644:	2640      	movs	r6, #64	; 0x40
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002646:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <Handle_USBAsynchXfer+0x94>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8002648:	2501      	movs	r5, #1
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 800264a:	1818      	adds	r0, r3, r0
 800264c:	4632      	mov	r2, r6
 800264e:	21c0      	movs	r1, #192	; 0xc0
 8002650:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <Handle_USBAsynchXfer+0x98>)
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
    }
    USB_Tx_State = 1; 
 8002652:	7025      	strb	r5, [r4, #0]
    UserToPMABufferCopy(&USART_Rx_Buffer[USB_Tx_ptr], ENDP1_TXADDR, USB_Tx_length);
 8002654:	4798      	blx	r3
    SetEPTxCount(ENDP1, USB_Tx_length);
 8002656:	4628      	mov	r0, r5
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <Handle_USBAsynchXfer+0x9c>)
 800265a:	4631      	mov	r1, r6
 800265c:	4798      	blx	r3
    SetEPTxValid(ENDP1); 
 800265e:	4628      	mov	r0, r5
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <Handle_USBAsynchXfer+0xa0>)
 8002662:	4798      	blx	r3
 8002664:	bd70      	pop	{r4, r5, r6, pc}
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <Handle_USBAsynchXfer+0x8c>)
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 8002668:	2000      	movs	r0, #0
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800266a:	6819      	ldr	r1, [r3, #0]
  
  if(USB_Tx_State != 1)
  {
    if (USART_Rx_ptr_out == USART_RX_DATA_SIZE)
    {
      USART_Rx_ptr_out = 0;
 800266c:	6028      	str	r0, [r5, #0]
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
 800266e:	4603      	mov	r3, r0
 8002670:	b151      	cbz	r1, 8002688 <Handle_USBAsynchXfer+0x7c>
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8002672:	1ac9      	subs	r1, r1, r3
 8002674:	4a09      	ldr	r2, [pc, #36]	; (800269c <Handle_USBAsynchXfer+0x90>)
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 8002676:	2940      	cmp	r1, #64	; 0x40
    { 
      USART_Rx_length = USART_RX_DATA_SIZE - USART_Rx_ptr_out;
    }
    else 
    {
      USART_Rx_length = USART_Rx_ptr_in - USART_Rx_ptr_out;
 8002678:	6011      	str	r1, [r2, #0]
    }
    
    if (USART_Rx_length > VIRTUAL_COM_PORT_DATA_SIZE)
 800267a:	d8df      	bhi.n	800263c <Handle_USBAsynchXfer+0x30>
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
      
      USART_Rx_ptr_out += USART_Rx_length;
 800267c:	18cb      	adds	r3, r1, r3
 800267e:	602b      	str	r3, [r5, #0]
      USART_Rx_length = 0;
 8002680:	2300      	movs	r3, #0
      USART_Rx_length -= VIRTUAL_COM_PORT_DATA_SIZE;	
    }
    else
    {
      USB_Tx_ptr = USART_Rx_ptr_out;
      USB_Tx_length = USART_Rx_length;
 8002682:	b28e      	uxth	r6, r1
      
      USART_Rx_ptr_out += USART_Rx_length;
      USART_Rx_length = 0;
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e7de      	b.n	8002646 <Handle_USBAsynchXfer+0x3a>
      USART_Rx_ptr_out = 0;
    }
    
    if(USART_Rx_ptr_out == USART_Rx_ptr_in) 
    {
      USB_Tx_State = 0; 
 8002688:	2300      	movs	r3, #0
 800268a:	7023      	strb	r3, [r4, #0]
      return;
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	bf00      	nop
 8002690:	200002bc 	.word	0x200002bc
 8002694:	200002c4 	.word	0x200002c4
 8002698:	200002c0 	.word	0x200002c0
 800269c:	200002c8 	.word	0x200002c8
 80026a0:	20000c58 	.word	0x20000c58
 80026a4:	080030b9 	.word	0x080030b9
 80026a8:	080032f9 	.word	0x080032f9
 80026ac:	080031bd 	.word	0x080031bd

080026b0 <Get_SerialNum>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void Get_SerialNum(void)
{
 80026b0:	b538      	push	{r3, r4, r5, lr}
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80026b2:	f24f 72e8 	movw	r2, #63464	; 0xf7e8
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80026b6:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80026ba:	f6c1 72ff 	movt	r2, #8191	; 0x1fff
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  
 80026be:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
*******************************************************************************/
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
 80026c2:	6812      	ldr	r2, [r2, #0]
  Device_Serial1 = *(uint32_t*)ID2;
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;
 80026c4:	681b      	ldr	r3, [r3, #0]
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80026c6:	f24f 71ec 	movw	r1, #63468	; 0xf7ec
 80026ca:	f6c1 71ff 	movt	r1, #8191	; 0x1fff
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80026ce:	18d0      	adds	r0, r2, r3
void Get_SerialNum(void)
{
  uint32_t Device_Serial0, Device_Serial1, Device_Serial2;

  Device_Serial0 = *(uint32_t*)ID1;
  Device_Serial1 = *(uint32_t*)ID2;
 80026d0:	680c      	ldr	r4, [r1, #0]
  Device_Serial2 = *(uint32_t*)ID3;  

  Device_Serial0 += Device_Serial2;

  if (Device_Serial0 != 0)
 80026d2:	d007      	beq.n	80026e4 <Get_SerialNum+0x34>
  {
    IntToUnicode (Device_Serial0, &Virtual_Com_Port_StringSerial[2] , 8);
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <Get_SerialNum+0x38>)
 80026d6:	2208      	movs	r2, #8
 80026d8:	4d04      	ldr	r5, [pc, #16]	; (80026ec <Get_SerialNum+0x3c>)
 80026da:	47a8      	blx	r5
    IntToUnicode (Device_Serial1, &Virtual_Com_Port_StringSerial[18], 4);
 80026dc:	4620      	mov	r0, r4
 80026de:	4904      	ldr	r1, [pc, #16]	; (80026f0 <Get_SerialNum+0x40>)
 80026e0:	2204      	movs	r2, #4
 80026e2:	47a8      	blx	r5
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	bf00      	nop
 80026e8:	20000006 	.word	0x20000006
 80026ec:	08002465 	.word	0x08002465
 80026f0:	20000016 	.word	0x20000016

080026f4 <__WFI>:
}


void __WFI(void)
{
	 __asm("wfi");
 80026f4:	bf30      	wfi
 80026f6:	4770      	bx	lr

080026f8 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
 80026f8:	b508      	push	{r3, lr}
  if (Length == 0)
 80026fa:	b138      	cbz	r0, 800270c <Standard_GetConfiguration+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_Configuration);
    return 0;
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <Standard_GetConfiguration+0x20>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_Configuration;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <Standard_GetConfiguration+0x24>)
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	300a      	adds	r0, #10
}
 800270a:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetConfiguration(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <Standard_GetConfiguration+0x24>)
 800270e:	2201      	movs	r2, #1
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8002714:	bd08      	pop	{r3, pc}
 8002716:	bf00      	nop
 8002718:	20001484 	.word	0x20001484
 800271c:	20001488 	.word	0x20001488

08002720 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
 8002720:	b508      	push	{r3, lr}
  if (Length == 0)
 8002722:	b138      	cbz	r0, 8002734 <Standard_GetInterface+0x14>
  {
    pInformation->Ctrl_Info.Usb_wLength =
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
  }
  pUser_Standard_Requests->User_GetInterface();
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <Standard_GetInterface+0x20>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4798      	blx	r3
  return (uint8_t *)&pInformation->Current_AlternateSetting;
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <Standard_GetInterface+0x24>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	300c      	adds	r0, #12
}
 8002732:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetInterface(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength =
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <Standard_GetInterface+0x24>)
 8002736:	2201      	movs	r2, #1
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 800273c:	bd08      	pop	{r3, pc}
 800273e:	bf00      	nop
 8002740:	20001484 	.word	0x20001484
 8002744:	20001488 	.word	0x20001488

08002748 <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
 8002748:	b508      	push	{r3, lr}
  if (Length == 0)
 800274a:	2800      	cmp	r0, #0
 800274c:	d037      	beq.n	80027be <Standard_GetStatus+0x76>
  }

  /* Reset Status Information */
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800274e:	4b21      	ldr	r3, [pc, #132]	; (80027d4 <Standard_GetStatus+0x8c>)
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002750:	4821      	ldr	r0, [pc, #132]	; (80027d8 <Standard_GetStatus+0x90>)
 8002752:	2100      	movs	r1, #0

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002754:	681a      	ldr	r2, [r3, #0]
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  /* Reset Status Information */
  StatusInfo.w = 0;
 8002756:	8001      	strh	r1, [r0, #0]

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002758:	7813      	ldrb	r3, [r2, #0]
 800275a:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 800275e:	d017      	beq.n	8002790 <Standard_GetStatus+0x48>
    {
      ClrBit(StatusInfo0, 0);
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002760:	2b01      	cmp	r3, #1
 8002762:	d02b      	beq.n	80027bc <Standard_GetStatus+0x74>
  {
    return (uint8_t *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002764:	2b02      	cmp	r3, #2
 8002766:	d128      	bne.n	80027ba <Standard_GetStatus+0x72>
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;
 8002768:	7953      	ldrb	r3, [r2, #5]

    Related_Endpoint = (wIndex0 & 0x0f);
 800276a:	f003 020f 	and.w	r2, r3, #15
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800276e:	0092      	lsls	r2, r2, #2
 8002770:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002774:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8002778:	f013 0f80 	tst.w	r3, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 800277c:	6813      	ldr	r3, [r2, #0]
  {
    uint8_t Related_Endpoint;
    uint8_t wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 800277e:	d123      	bne.n	80027c8 <Standard_GetStatus+0x80>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8002780:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d111      	bne.n	80027ae <Standard_GetStatus+0x66>
      {
        SetBit(StatusInfo0, 0); /* OUT Endpoint stalled */
 800278a:	2301      	movs	r3, #1
 800278c:	7003      	strb	r3, [r0, #0]
 800278e:	e00e      	b.n	80027ae <Standard_GetStatus+0x66>
  StatusInfo.w = 0;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {
    /*Get Device Status */
    uint8_t Feature = pInformation->Current_Feature;
 8002790:	7a52      	ldrb	r2, [r2, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 8002792:	f002 0320 	and.w	r3, r2, #32
 8002796:	b2db      	uxtb	r3, r3
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8002798:	f002 0240 	and.w	r2, r2, #64	; 0x40
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 800279c:	428b      	cmp	r3, r1
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 800279e:	b2d2      	uxtb	r2, r2
    uint8_t Feature = pInformation->Current_Feature;

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
    {
      SetBit(StatusInfo0, 1);
 80027a0:	bf18      	it	ne
 80027a2:	2302      	movne	r3, #2
    {
      ClrBit(StatusInfo0, 1);
    }      

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	d0f1      	beq.n	800278c <Standard_GetStatus+0x44>
    {
      SetBit(StatusInfo0, 0);
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	7003      	strb	r3, [r0, #0]
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <Standard_GetStatus+0x94>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	4798      	blx	r3
  return (uint8_t *)&StatusInfo;
 80027b6:	4808      	ldr	r0, [pc, #32]	; (80027d8 <Standard_GetStatus+0x90>)
 80027b8:	bd08      	pop	{r3, pc}
    }

  }
  else
  {
    return NULL;
 80027ba:	4608      	mov	r0, r1
  }
  pUser_Standard_Requests->User_GetStatus();
  return (uint8_t *)&StatusInfo;
}
 80027bc:	bd08      	pop	{r3, pc}
*******************************************************************************/
uint8_t *Standard_GetStatus(uint16_t Length)
{
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <Standard_GetStatus+0x8c>)
 80027c0:	2202      	movs	r2, #2
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	821a      	strh	r2, [r3, #16]
    return 0;
 80027c6:	bd08      	pop	{r3, pc}

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 80027c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d1ee      	bne.n	80027ae <Standard_GetStatus+0x66>
 80027d0:	e7db      	b.n	800278a <Standard_GetStatus+0x42>
 80027d2:	bf00      	nop
 80027d4:	20001488 	.word	0x20001488
 80027d8:	20001458 	.word	0x20001458
 80027dc:	20001484 	.word	0x20001484

080027e0 <DataStageIn>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 80027e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 80027e4:	4e2b      	ldr	r6, [pc, #172]	; (8002894 <DataStageIn+0xb4>)
 80027e6:	6834      	ldr	r4, [r6, #0]
  uint32_t save_wLength = pEPinfo->Usb_wLength;
 80027e8:	8a23      	ldrh	r3, [r4, #16]
  uint32_t ControlState = pInformation->ControlState;

  uint8_t *DataBuffer;
  uint32_t Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 80027ea:	7a20      	ldrb	r0, [r4, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf08      	it	eq
 80027f0:	2804      	cmpeq	r0, #4
 80027f2:	bf14      	ite	ne
 80027f4:	f04f 0800 	movne.w	r8, #0
 80027f8:	f04f 0801 	moveq.w	r8, #1
 80027fc:	d10a      	bne.n	8002814 <DataStageIn+0x34>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 80027fe:	4b26      	ldr	r3, [pc, #152]	; (8002898 <DataStageIn+0xb8>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	2a01      	cmp	r2, #1
 8002804:	d030      	beq.n	8002868 <DataStageIn+0x88>
    }
    else 
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <DataStageIn+0xbc>)
 8002808:	2210      	movs	r2, #16
 800280a:	2707      	movs	r7, #7
 800280c:	801a      	strh	r2, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800280e:	7227      	strb	r7, [r4, #8]
 8002810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8002814:	8aa7      	ldrh	r7, [r4, #20]
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8002816:	69a2      	ldr	r2, [r4, #24]
 8002818:	429f      	cmp	r7, r3
 800281a:	bf34      	ite	cc
 800281c:	463d      	movcc	r5, r7
 800281e:	461d      	movcs	r5, r3
 8002820:	4628      	mov	r0, r5
    
    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 8002822:	42bb      	cmp	r3, r7
 8002824:	bf8c      	ite	hi
 8002826:	2702      	movhi	r7, #2
 8002828:	2704      	movls	r7, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800282a:	4790      	blx	r2
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <DataStageIn+0xc0>)
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 800282e:	4681      	mov	r9, r0
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 8002830:	4640      	mov	r0, r8
 8002832:	4798      	blx	r3
 8002834:	462a      	mov	r2, r5
 8002836:	4601      	mov	r1, r0
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <DataStageIn+0xc4>)
 800283a:	4648      	mov	r0, r9
 800283c:	4798      	blx	r3

  SetEPTxCount(ENDP0, Length);
 800283e:	4629      	mov	r1, r5
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <DataStageIn+0xc8>)
 8002842:	4640      	mov	r0, r8
 8002844:	4798      	blx	r3

  pEPinfo->Usb_wLength -= Length;
 8002846:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 8002848:	8a62      	ldrh	r2, [r4, #18]
  
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 800284a:	1b5b      	subs	r3, r3, r5
 800284c:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <DataStageIn+0xbc>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8002850:	18ad      	adds	r5, r5, r2
  vSetEPTxStatus(EP_TX_VALID);
 8002852:	2230      	movs	r2, #48	; 0x30
 8002854:	801a      	strh	r2, [r3, #0]
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 8002856:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <DataStageIn+0xcc>)
 800285a:	6834      	ldr	r4, [r6, #0]
 800285c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002860:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 8002862:	7227      	strb	r7, [r4, #8]
 8002864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8002868:	f645 4250 	movw	r2, #23632	; 0x5c50
 800286c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	f243 0202 	movw	r2, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002876:	b289      	uxth	r1, r1
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8002878:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800287c:	188a      	adds	r2, r1, r2
 800287e:	0052      	lsls	r2, r2, #1
 8002880:	2100      	movs	r1, #0
 8002882:	6011      	str	r1, [r2, #0]
 8002884:	4a05      	ldr	r2, [pc, #20]	; (800289c <DataStageIn+0xbc>)
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 8002886:	2704      	movs	r7, #4
  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
  {
    if(Data_Mul_MaxPacketSize == TRUE)
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 8002888:	2030      	movs	r0, #48	; 0x30
 800288a:	8010      	strh	r0, [r2, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800288c:	7019      	strb	r1, [r3, #0]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 800288e:	7227      	strb	r7, [r4, #8]
 8002890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002894:	20001488 	.word	0x20001488
 8002898:	200002cc 	.word	0x200002cc
 800289c:	20001490 	.word	0x20001490
 80028a0:	080032b9 	.word	0x080032b9
 80028a4:	080030b9 	.word	0x080030b9
 80028a8:	080032f9 	.word	0x080032f9
 80028ac:	2000148e 	.word	0x2000148e

080028b0 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80028b0:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <Standard_SetConfiguration+0x30>)
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <Standard_SetConfiguration+0x34>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	7851      	ldrb	r1, [r2, #1]
 80028ba:	78da      	ldrb	r2, [r3, #3]
 80028bc:	4291      	cmp	r1, r2
 80028be:	d201      	bcs.n	80028c4 <Standard_SetConfiguration+0x14>
    pUser_Standard_Requests->User_SetConfiguration();
    return USB_SUCCESS;
  }
  else
  {
    return USB_UNSUPPORT;
 80028c0:	2002      	movs	r0, #2
  }
}
 80028c2:	bd10      	pop	{r4, pc}
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80028c4:	7899      	ldrb	r1, [r3, #2]
 80028c6:	2900      	cmp	r1, #0
 80028c8:	d1fa      	bne.n	80028c0 <Standard_SetConfiguration+0x10>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 80028ca:	889c      	ldrh	r4, [r3, #4]
 80028cc:	2c00      	cmp	r4, #0
 80028ce:	d1f7      	bne.n	80028c0 <Standard_SetConfiguration+0x10>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 80028d0:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <Standard_SetConfiguration+0x38>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4798      	blx	r3
    return USB_SUCCESS;
 80028da:	4620      	mov	r0, r4
 80028dc:	bd10      	pop	{r4, pc}
 80028de:	bf00      	nop
 80028e0:	20001488 	.word	0x20001488
 80028e4:	200000e4 	.word	0x200000e4
 80028e8:	20001484 	.word	0x20001484

080028ec <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 80028ec:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 80028ee:	4a10      	ldr	r2, [pc, #64]	; (8002930 <Standard_SetInterface+0x44>)
 80028f0:	4c10      	ldr	r4, [pc, #64]	; (8002934 <Standard_SetInterface+0x48>)
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	6992      	ldr	r2, [r2, #24]
 80028f8:	7958      	ldrb	r0, [r3, #5]
 80028fa:	78d9      	ldrb	r1, [r3, #3]
 80028fc:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	7a9a      	ldrb	r2, [r3, #10]
 8002902:	b90a      	cbnz	r2, 8002908 <Standard_SetInterface+0x1c>
      return USB_SUCCESS;
    }

  }

  return USB_UNSUPPORT;
 8002904:	2002      	movs	r0, #2
}
 8002906:	bd38      	pop	{r3, r4, r5, pc}
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);

  if (pInformation->Current_Configuration != 0)
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8002908:	2800      	cmp	r0, #0
 800290a:	d1fb      	bne.n	8002904 <Standard_SetInterface+0x18>
 800290c:	791a      	ldrb	r2, [r3, #4]
 800290e:	2a00      	cmp	r2, #0
 8002910:	d1f8      	bne.n	8002904 <Standard_SetInterface+0x18>
        || (pInformation->USBwValue1 != 0))
 8002912:	789d      	ldrb	r5, [r3, #2]
 8002914:	2d00      	cmp	r5, #0
 8002916:	d1f5      	bne.n	8002904 <Standard_SetInterface+0x18>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <Standard_SetInterface+0x4c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002920:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8002922:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002924:	7959      	ldrb	r1, [r3, #5]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 8002926:	78da      	ldrb	r2, [r3, #3]
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8002928:	72d9      	strb	r1, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800292a:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 800292c:	bd38      	pop	{r3, r4, r5, pc}
 800292e:	bf00      	nop
 8002930:	20001460 	.word	0x20001460
 8002934:	20001488 	.word	0x20001488
 8002938:	20001484 	.word	0x20001484

0800293c <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 800293c:	b538      	push	{r3, r4, r5, lr}
  uint32_t     Type_Rec = Type_Recipient;
 800293e:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <Standard_ClearFeature+0xd8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	7818      	ldrb	r0, [r3, #0]
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002944:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8002948:	d003      	beq.n	8002952 <Standard_ClearFeature+0x16>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
    return USB_SUCCESS;
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800294a:	2802      	cmp	r0, #2
 800294c:	d006      	beq.n	800295c <Standard_ClearFeature+0x20>
    }
    pUser_Standard_Requests->User_ClearFeature();
    return USB_SUCCESS;
  }

  return USB_UNSUPPORT;
 800294e:	2002      	movs	r0, #2
}
 8002950:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8002952:	7a5a      	ldrb	r2, [r3, #9]
 8002954:	f022 0220 	bic.w	r2, r2, #32
 8002958:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800295a:	bd38      	pop	{r3, r4, r5, pc}
    DEVICE* pDev;
    uint32_t Related_Endpoint;
    uint32_t wIndex0;
    uint32_t rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 800295c:	885a      	ldrh	r2, [r3, #2]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d1f6      	bne.n	8002950 <Standard_ClearFeature+0x14>
        || (pInformation->USBwIndex1 != 0))
 8002962:	791a      	ldrb	r2, [r3, #4]
 8002964:	2a00      	cmp	r2, #0
 8002966:	d1f3      	bne.n	8002950 <Standard_ClearFeature+0x14>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 8002968:	795a      	ldrb	r2, [r3, #5]
    rEP = wIndex0 & ~0x80;
 800296a:	f022 0080 	bic.w	r0, r2, #128	; 0x80

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800296e:	0081      	lsls	r1, r0, #2
 8002970:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 8002974:	0615      	lsls	r5, r2, #24
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002976:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 800297a:	bf56      	itet	pl
 800297c:	6824      	ldrpl	r4, [r4, #0]

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 800297e:	6825      	ldrmi	r5, [r4, #0]
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 8002980:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 8002984:	4c24      	ldr	r4, [pc, #144]	; (8002a18 <Standard_ClearFeature+0xdc>)

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 8002986:	bf48      	it	mi
 8002988:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800298c:	7824      	ldrb	r4, [r4, #0]
 800298e:	42a0      	cmp	r0, r4
 8002990:	d2dd      	bcs.n	800294e <Standard_ClearFeature+0x12>
 8002992:	2d00      	cmp	r5, #0
 8002994:	d0db      	beq.n	800294e <Standard_ClearFeature+0x12>
        || (pInformation->Current_Configuration == 0))
 8002996:	7a9b      	ldrb	r3, [r3, #10]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0d8      	beq.n	800294e <Standard_ClearFeature+0x12>
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 800299c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	b173      	cbz	r3, 80029c2 <Standard_ClearFeature+0x86>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80029a4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80029a8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d021      	beq.n	80029fa <Standard_ClearFeature+0xbe>
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <Standard_ClearFeature+0xe0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	4798      	blx	r3
    return USB_SUCCESS;
 80029be:	2000      	movs	r0, #0
 80029c0:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80029c2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80029c6:	f501 44b8 	add.w	r4, r1, #23552	; 0x5c00
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d1ef      	bne.n	80029b6 <Standard_ClearFeature+0x7a>
      {
        if (Related_Endpoint == ENDP0)
 80029d6:	b9c8      	cbnz	r0, 8002a0c <Standard_ClearFeature+0xd0>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <Standard_ClearFeature+0xe4>)
 80029da:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <Standard_ClearFeature+0xe8>)
 80029e0:	4798      	blx	r3
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 80029e2:	6822      	ldr	r2, [r4, #0]
 80029e4:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80029e8:	4013      	ands	r3, r2
 80029ea:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	e7dd      	b.n	80029b6 <Standard_ClearFeature+0x7a>
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
      {
        ClearDTOG_TX(Related_Endpoint);
 80029fa:	b2c4      	uxtb	r4, r0
 80029fc:	4620      	mov	r0, r4
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <Standard_ClearFeature+0xec>)
 8002a00:	4798      	blx	r3
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 8002a02:	4620      	mov	r0, r4
 8002a04:	2130      	movs	r1, #48	; 0x30
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <Standard_ClearFeature+0xf0>)
 8002a08:	4798      	blx	r3
 8002a0a:	e7d4      	b.n	80029b6 <Standard_ClearFeature+0x7a>
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <Standard_ClearFeature+0xf4>)
 8002a0e:	4798      	blx	r3
 8002a10:	e7e7      	b.n	80029e2 <Standard_ClearFeature+0xa6>
 8002a12:	bf00      	nop
 8002a14:	20001488 	.word	0x20001488
 8002a18:	200000e4 	.word	0x200000e4
 8002a1c:	20001484 	.word	0x20001484
 8002a20:	20000060 	.word	0x20000060
 8002a24:	08003319 	.word	0x08003319
 8002a28:	08003249 	.word	0x08003249
 8002a2c:	0800313d 	.word	0x0800313d
 8002a30:	08003225 	.word	0x08003225

08002a34 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8002a34:	b538      	push	{r3, r4, r5, lr}
  uint32_t    wIndex0;
  uint32_t    Related_Endpoint;
  uint32_t    rEP;
  uint32_t    Status;

  wIndex0 = pInformation->USBwIndex0;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <Standard_SetEndPointFeature+0x8c>)
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	794b      	ldrb	r3, [r1, #5]
  rEP = wIndex0 & ~0x80;
 8002a3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002a40:	0090      	lsls	r0, r2, #2
 8002a42:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8002a46:	061d      	lsls	r5, r3, #24
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002a48:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002a4c:	bf56      	itet	pl
 8002a4e:	6824      	ldrpl	r4, [r4, #0]

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002a50:	6825      	ldrmi	r5, [r4, #0]
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 8002a52:	f404 5540 	andpl.w	r5, r4, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002a56:	4c1b      	ldr	r4, [pc, #108]	; (8002ac4 <Standard_SetEndPointFeature+0x90>)

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8002a58:	bf48      	it	mi
 8002a5a:	f005 0530 	andmi.w	r5, r5, #48	; 0x30
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8002a5e:	7824      	ldrb	r4, [r4, #0]
 8002a60:	42a2      	cmp	r2, r4
 8002a62:	d301      	bcc.n	8002a68 <Standard_SetEndPointFeature+0x34>
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 8002a64:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
 8002a68:	884a      	ldrh	r2, [r1, #2]
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	d1fa      	bne.n	8002a64 <Standard_SetEndPointFeature+0x30>
 8002a6e:	2d00      	cmp	r5, #0
 8002a70:	d0f8      	beq.n	8002a64 <Standard_SetEndPointFeature+0x30>
      || pInformation->Current_Configuration == 0)
 8002a72:	7a8a      	ldrb	r2, [r1, #10]
 8002a74:	2a00      	cmp	r2, #0
 8002a76:	d0f5      	beq.n	8002a64 <Standard_SetEndPointFeature+0x30>
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002a7c:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8002a80:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002a84:	b2db      	uxtb	r3, r3
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002a86:	6811      	ldr	r1, [r2, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8002a88:	b17b      	cbz	r3, 8002aaa <Standard_SetEndPointFeature+0x76>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8002a8a:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8002a8e:	400b      	ands	r3, r1
 8002a90:	f083 0310 	eor.w	r3, r3, #16
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	6013      	str	r3, [r2, #0]
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <Standard_SetEndPointFeature+0x94>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4798      	blx	r3
  return USB_SUCCESS;
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	bd38      	pop	{r3, r4, r5, pc}
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 8002aaa:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8002aae:	400b      	ands	r3, r1
 8002ab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e7ee      	b.n	8002a9e <Standard_SetEndPointFeature+0x6a>
 8002ac0:	20001488 	.word	0x20001488
 8002ac4:	200000e4 	.word	0x200000e4
 8002ac8:	20001484 	.word	0x20001484

08002acc <Standard_GetDescriptorData>:
*******************************************************************************/
uint8_t *Standard_GetDescriptorData(uint16_t Length, ONE_DESCRIPTOR *pDesc)
{
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <Standard_GetDescriptorData+0x18>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	8a5a      	ldrh	r2, [r3, #18]
  if (Length == 0)
 8002ad2:	b110      	cbz	r0, 8002ada <Standard_GetDescriptorData+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
    return 0;
  }

  return pDesc->Descriptor + wOffset;
 8002ad4:	6808      	ldr	r0, [r1, #0]
 8002ad6:	1880      	adds	r0, r0, r2
}
 8002ad8:	4770      	bx	lr
  uint32_t  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
  if (Length == 0)
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8002ada:	8889      	ldrh	r1, [r1, #4]
 8002adc:	1a8a      	subs	r2, r1, r2
 8002ade:	821a      	strh	r2, [r3, #16]
    return 0;
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20001488 	.word	0x20001488

08002ae8 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
uint8_t Post0_Process(void)
{
 8002ae8:	b508      	push	{r3, lr}
   
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <Post0_Process+0x34>)
 8002aec:	2000      	movs	r0, #0
 8002aee:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <Post0_Process+0x38>)
 8002af4:	4798      	blx	r3

  if (pInformation->ControlState == STALLED)
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <Post0_Process+0x3c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	7a18      	ldrb	r0, [r3, #8]
 8002afc:	2808      	cmp	r0, #8
 8002afe:	d106      	bne.n	8002b0e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <Post0_Process+0x40>)
 8002b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b06:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8002b08:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <Post0_Process+0x44>)
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 8002b0e:	f1b0 0c09 	subs.w	ip, r0, #9
 8002b12:	f1dc 0000 	rsbs	r0, ip, #0
 8002b16:	eb50 000c 	adcs.w	r0, r0, ip
 8002b1a:	bd08      	pop	{r3, pc}
 8002b1c:	20000060 	.word	0x20000060
 8002b20:	08003319 	.word	0x08003319
 8002b24:	20001488 	.word	0x20001488
 8002b28:	2000148e 	.word	0x2000148e
 8002b2c:	20001490 	.word	0x20001490

08002b30 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Out0_Process(void)
{
 8002b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t ControlState = pInformation->ControlState;
 8002b34:	4d35      	ldr	r5, [pc, #212]	; (8002c0c <Out0_Process+0xdc>)
 8002b36:	682c      	ldr	r4, [r5, #0]
 8002b38:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	bf18      	it	ne
 8002b3e:	2b04      	cmpne	r3, #4
 8002b40:	bf14      	ite	ne
 8002b42:	2600      	movne	r6, #0
 8002b44:	2601      	moveq	r6, #1
 8002b46:	d005      	beq.n	8002b54 <Out0_Process+0x24>
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
  }
  else if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	bf18      	it	ne
 8002b4c:	2b05      	cmpne	r3, #5
 8002b4e:	d007      	beq.n	8002b60 <Out0_Process+0x30>
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	d00e      	beq.n	8002b72 <Out0_Process+0x42>
 8002b54:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 8002b56:	7223      	strb	r3, [r4, #8]

  return Post0_Process();
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <Out0_Process+0xe0>)
 8002b5a:	4798      	blx	r3
 8002b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8002b60:	69a1      	ldr	r1, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  uint32_t save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8002b62:	8a23      	ldrh	r3, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8002b64:	b311      	cbz	r1, 8002bac <Out0_Process+0x7c>
 8002b66:	b95b      	cbnz	r3, 8002b80 <Out0_Process+0x50>
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002b68:	8aa3      	ldrh	r3, [r4, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d049      	beq.n	8002c02 <Out0_Process+0xd2>
 8002b6e:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <Out0_Process+0xe4>)
 8002b70:	e02e      	b.n	8002bd0 <Out0_Process+0xa0>
    ControlState = pInformation->ControlState; /* may be changed outside the function */
  }

  else if (ControlState == WAIT_STATUS_OUT)
  {
    (*pProperty->Process_Status_OUT)();
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <Out0_Process+0xe8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4798      	blx	r3
 8002b7a:	682c      	ldr	r4, [r5, #0]
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	e7ea      	b.n	8002b56 <Out0_Process+0x26>
  if (pEPinfo->CopyData && save_rLength)
  {
    uint8_t *Buffer;
    uint32_t Length;

    Length = pEPinfo->PacketSize;
 8002b80:	8aa7      	ldrh	r7, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002b82:	429f      	cmp	r7, r3
 8002b84:	bf28      	it	cs
 8002b86:	461f      	movcs	r7, r3
 8002b88:	4638      	mov	r0, r7
 8002b8a:	4788      	blx	r1
    pEPinfo->Usb_rLength -= Length;
 8002b8c:	8a22      	ldrh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002b8e:	8a63      	ldrh	r3, [r4, #18]
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
 8002b90:	1bd2      	subs	r2, r2, r7
    pEPinfo->Usb_rOffset += Length;
 8002b92:	18fb      	adds	r3, r7, r3
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 8002b94:	4680      	mov	r8, r0
    pEPinfo->Usb_rLength -= Length;
 8002b96:	8222      	strh	r2, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8002b98:	8263      	strh	r3, [r4, #18]
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <Out0_Process+0xec>)
 8002b9e:	4798      	blx	r3
 8002ba0:	4b1f      	ldr	r3, [pc, #124]	; (8002c20 <Out0_Process+0xf0>)
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	463a      	mov	r2, r7
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	4798      	blx	r3
 8002baa:	8a23      	ldrh	r3, [r4, #16]

  }

  if (pEPinfo->Usb_rLength != 0)
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0db      	beq.n	8002b68 <Out0_Process+0x38>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002bb0:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <Out0_Process+0xf4>)
    SetEPTxCount(ENDP0, 0);
 8002bb2:	2000      	movs	r0, #0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002bb4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8002bb8:	4601      	mov	r1, r0

  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8002bba:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <Out0_Process+0xf8>)
 8002bbe:	4798      	blx	r3
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002bc0:	8a23      	ldrh	r3, [r4, #16]
 8002bc2:	8aa1      	ldrh	r1, [r4, #20]

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <Out0_Process+0xe4>)
 8002bc6:	2030      	movs	r0, #48	; 0x30
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002bc8:	4299      	cmp	r1, r3

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
    SetEPTxCount(ENDP0, 0);
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 8002bca:	8010      	strh	r0, [r2, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8002bcc:	d919      	bls.n	8002c02 <Out0_Process+0xd2>
  {
    pInformation->ControlState = OUT_DATA;
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 8002bce:	b9a3      	cbnz	r3, 8002bfa <Out0_Process+0xca>
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002bd0:	682c      	ldr	r4, [r5, #0]
 8002bd2:	2106      	movs	r1, #6
      USB_StatusIn();
 8002bd4:	f645 4350 	movw	r3, #23632	; 0x5c50
    {
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8002bd8:	7221      	strb	r1, [r4, #8]
      USB_StatusIn();
 8002bda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bde:	6819      	ldr	r1, [r3, #0]
 8002be0:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002be4:	b289      	uxth	r1, r1
      pInformation->ControlState = LAST_OUT_DATA;
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
      USB_StatusIn();
 8002be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bea:	18cb      	adds	r3, r1, r3
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2100      	movs	r1, #0
 8002bf0:	6019      	str	r1, [r3, #0]
 8002bf2:	2330      	movs	r3, #48	; 0x30
 8002bf4:	8013      	strh	r3, [r2, #0]
 8002bf6:	7a23      	ldrb	r3, [r4, #8]
 8002bf8:	e7ad      	b.n	8002b56 <Out0_Process+0x26>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8002bfa:	682c      	ldr	r4, [r5, #0]
 8002bfc:	2305      	movs	r3, #5
 8002bfe:	7223      	strb	r3, [r4, #8]
 8002c00:	e7a9      	b.n	8002b56 <Out0_Process+0x26>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
  {
    pInformation->ControlState = OUT_DATA;
 8002c02:	682c      	ldr	r4, [r5, #0]
 8002c04:	2303      	movs	r3, #3
 8002c06:	7223      	strb	r3, [r4, #8]
 8002c08:	e7a5      	b.n	8002b56 <Out0_Process+0x26>
 8002c0a:	bf00      	nop
 8002c0c:	20001488 	.word	0x20001488
 8002c10:	08002ae9 	.word	0x08002ae9
 8002c14:	20001490 	.word	0x20001490
 8002c18:	20001460 	.word	0x20001460
 8002c1c:	080032d9 	.word	0x080032d9
 8002c20:	080030ed 	.word	0x080030ed
 8002c24:	2000148e 	.word	0x2000148e
 8002c28:	080032f9 	.word	0x080032f9

08002c2c <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c2e:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002c32:	f2c4 0300 	movt	r3, #16384	; 0x4000

  if (pInformation->ControlState != PAUSE)
 8002c36:	4d9d      	ldr	r5, [pc, #628]	; (8002eac <Setup0_Process+0x280>)
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c38:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002c3a:	682c      	ldr	r4, [r5, #0]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c3c:	f243 0304 	movw	r3, #12292	; 0x3004
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002c40:	b292      	uxth	r2, r2
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c46:	18d3      	adds	r3, r2, r3

  if (pInformation->ControlState != PAUSE)
 8002c48:	7a22      	ldrb	r2, [r4, #8]
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c4a:	005b      	lsls	r3, r3, #1

  if (pInformation->ControlState != PAUSE)
 8002c4c:	2a09      	cmp	r2, #9
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t Setup0_Process(void)
{
 8002c4e:	b083      	sub	sp, #12
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c50:	681e      	ldr	r6, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 8002c52:	d044      	beq.n	8002cde <Setup0_Process+0xb2>
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002c54:	b2b6      	uxth	r6, r6
    uint8_t* b;
    uint16_t* w;
  } pBuf;
  uint16_t offset = 1;
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8002c56:	0076      	lsls	r6, r6, #1
 8002c58:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002c5c:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002c60:	7833      	ldrb	r3, [r6, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002c62:	4f93      	ldr	r7, [pc, #588]	; (8002eb0 <Setup0_Process+0x284>)
  
  pBuf.b = PMAAddr + (uint8_t *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 8002c64:	7023      	strb	r3, [r4, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8002c66:	7873      	ldrb	r3, [r6, #1]
 8002c68:	7063      	strb	r3, [r4, #1]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
 8002c6a:	88b0      	ldrh	r0, [r6, #4]
 8002c6c:	47b8      	blx	r7
 8002c6e:	8060      	strh	r0, [r4, #2]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
 8002c70:	8930      	ldrh	r0, [r6, #8]
 8002c72:	682c      	ldr	r4, [r5, #0]
 8002c74:	47b8      	blx	r7
 8002c76:	80a0      	strh	r0, [r4, #4]
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002c78:	89b3      	ldrh	r3, [r6, #12]
 8002c7a:	682c      	ldr	r4, [r5, #0]
  }

  pInformation->ControlState = SETTING_UP;
 8002c7c:	2201      	movs	r2, #1
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = ByteSwap(*pBuf.w++); /* wValue */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
 8002c7e:	80e3      	strh	r3, [r4, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8002c80:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d030      	beq.n	8002ce8 <Setup0_Process+0xbc>
*******************************************************************************/
void Data_Setup0(void)
{
  uint8_t *(*CopyRoutine)(uint16_t);
  RESULT Result;
  uint32_t Request_No = pInformation->USBbRequest;
 8002c86:	7861      	ldrb	r1, [r4, #1]

  CopyRoutine = NULL;
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
 8002c88:	2906      	cmp	r1, #6
 8002c8a:	f000 8087 	beq.w	8002d9c <Setup0_Process+0x170>
      }  /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8002c8e:	2900      	cmp	r1, #0
 8002c90:	d15e      	bne.n	8002d50 <Setup0_Process+0x124>
 8002c92:	8863      	ldrh	r3, [r4, #2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8094 	beq.w	8002dc2 <Setup0_Process+0x196>
 8002c9a:	4e86      	ldr	r6, [pc, #536]	; (8002eb4 <Setup0_Process+0x288>)
    (*CopyRoutine)(0);
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8002c9c:	6833      	ldr	r3, [r6, #0]
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002ca4:	2803      	cmp	r0, #3
    {
      pInformation->ControlState = PAUSE;
 8002ca6:	682b      	ldr	r3, [r5, #0]
    Result = USB_SUCCESS;
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
    if (Result == USB_NOT_READY)
 8002ca8:	d062      	beq.n	8002d70 <Setup0_Process+0x144>
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002caa:	8a1a      	ldrh	r2, [r3, #16]
 8002cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cb0:	428a      	cmp	r2, r1
 8002cb2:	d05d      	beq.n	8002d70 <Setup0_Process+0x144>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 8002cb4:	2802      	cmp	r0, #2
 8002cb6:	d00c      	beq.n	8002cd2 <Setup0_Process+0xa6>
 8002cb8:	b15a      	cbz	r2, 8002cd2 <Setup0_Process+0xa6>
    pInformation->ControlState = STALLED;
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8002cba:	f993 1000 	ldrsb.w	r1, [r3]
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	f2c0 80b5 	blt.w	8002e2e <Setup0_Process+0x202>
    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
    DataStageIn();
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8002cc8:	4b7b      	ldr	r3, [pc, #492]	; (8002eb8 <Setup0_Process+0x28c>)
 8002cca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	e001      	b.n	8002cd6 <Setup0_Process+0xaa>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	721a      	strb	r2, [r3, #8]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 8002cd6:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <Setup0_Process+0x290>)
 8002cd8:	4798      	blx	r3
}
 8002cda:	b003      	add	sp, #12
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	88e3      	ldrh	r3, [r4, #6]
    pInformation->USBwIndex  = ByteSwap(*pBuf.w++); /* wIndex */
    pBuf.w += offset;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength */
  }

  pInformation->ControlState = SETTING_UP;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	7222      	strb	r2, [r4, #8]
  if (pInformation->USBwLength == 0)
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1ce      	bne.n	8002c86 <Setup0_Process+0x5a>
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002ce8:	7823      	ldrb	r3, [r4, #0]
* Return         : None.
*******************************************************************************/
void NoData_Setup0(void)
{
  RESULT Result = USB_UNSUPPORT;
  uint32_t RequestNo = pInformation->USBbRequest;
 8002cea:	7866      	ldrb	r6, [r4, #1]
  uint32_t ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002cec:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002cf0:	d141      	bne.n	8002d76 <Setup0_Process+0x14a>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8002cf2:	2e09      	cmp	r6, #9
 8002cf4:	f000 8108 	beq.w	8002f08 <Setup0_Process+0x2dc>
    {
      Result = Standard_SetConfiguration();
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 8002cf8:	2e05      	cmp	r6, #5
 8002cfa:	f000 80bf 	beq.w	8002e7c <Setup0_Process+0x250>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 8002cfe:	2e03      	cmp	r6, #3
 8002d00:	f000 80f0 	beq.w	8002ee4 <Setup0_Process+0x2b8>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8002d04:	2e01      	cmp	r6, #1
 8002d06:	d13b      	bne.n	8002d80 <Setup0_Process+0x154>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8002d08:	78e3      	ldrb	r3, [r4, #3]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d138      	bne.n	8002d80 <Setup0_Process+0x154>
          && pInformation->USBwIndex == 0
 8002d0e:	88a3      	ldrh	r3, [r4, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d135      	bne.n	8002d80 <Setup0_Process+0x154>
          && ValBit(pInformation->Current_Feature, 5))
 8002d14:	7a63      	ldrb	r3, [r4, #9]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d02f      	beq.n	8002d80 <Setup0_Process+0x154>
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
    {
      Result = Standard_ClearFeature();
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <Setup0_Process+0x294>)
 8002d22:	4798      	blx	r3
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 8002d24:	bb60      	cbnz	r0, 8002d80 <Setup0_Process+0x154>
 8002d26:	682c      	ldr	r4, [r5, #0]
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002d28:	f645 4350 	movw	r3, #23632	; 0x5c50
 8002d2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f243 0302 	movw	r3, #12290	; 0x3002
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
}
 8002d36:	b292      	uxth	r2, r2
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8002d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d3c:	18d3      	adds	r3, r2, r3
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	4a5f      	ldr	r2, [pc, #380]	; (8002ec4 <Setup0_Process+0x298>)
 8002d46:	2306      	movs	r3, #6
 8002d48:	2130      	movs	r1, #48	; 0x30
 8002d4a:	8011      	strh	r1, [r2, #0]

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002d4c:	7223      	strb	r3, [r4, #8]
 8002d4e:	e7c2      	b.n	8002cd6 <Setup0_Process+0xaa>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8002d50:	2908      	cmp	r1, #8
 8002d52:	d148      	bne.n	8002de6 <Setup0_Process+0x1ba>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002d54:	7823      	ldrb	r3, [r4, #0]
 8002d56:	065b      	lsls	r3, r3, #25
 8002d58:	d19f      	bne.n	8002c9a <Setup0_Process+0x6e>
    {
      CopyRoutine = Standard_GetConfiguration;
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <Setup0_Process+0x29c>)

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002d5c:	2000      	movs	r0, #0
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 8002d5e:	61a3      	str	r3, [r4, #24]

  }
  
  if (CopyRoutine)
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8002d60:	8260      	strh	r0, [r4, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 8002d62:	4798      	blx	r3
      pInformation->ControlState = PAUSE;
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d6a:	8a1a      	ldrh	r2, [r3, #16]
 8002d6c:	428a      	cmp	r2, r1
 8002d6e:	d1a3      	bne.n	8002cb8 <Setup0_Process+0x8c>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8002d70:	2209      	movs	r2, #9
 8002d72:	721a      	strb	r2, [r3, #8]
 8002d74:	e7af      	b.n	8002cd6 <Setup0_Process+0xaa>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d071      	beq.n	8002e5e <Setup0_Process+0x232>
      Result = Standard_SetInterface();
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	f000 808d 	beq.w	8002e9a <Setup0_Process+0x26e>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <Setup0_Process+0x288>)
 8002d82:	4630      	mov	r0, r6
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 8002d8a:	2803      	cmp	r0, #3
 8002d8c:	f000 80c5 	beq.w	8002f1a <Setup0_Process+0x2ee>
 8002d90:	682c      	ldr	r4, [r5, #0]
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d0c8      	beq.n	8002d28 <Setup0_Process+0xfc>
    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
 8002d96:	2308      	movs	r3, #8
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002d98:	7223      	strb	r3, [r4, #8]
 8002d9a:	e79c      	b.n	8002cd6 <Setup0_Process+0xaa>
  wOffset = 0;

  /*GET DESCRIPTOR*/
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002d9c:	7823      	ldrb	r3, [r4, #0]
 8002d9e:	065b      	lsls	r3, r3, #25
 8002da0:	f47f af7b 	bne.w	8002c9a <Setup0_Process+0x6e>
    {
      uint8_t wValue1 = pInformation->USBwValue1;
 8002da4:	78a3      	ldrb	r3, [r4, #2]
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002da6:	4e43      	ldr	r6, [pc, #268]	; (8002eb4 <Setup0_Process+0x288>)
  if (Request_No == GET_DESCRIPTOR)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	f000 80b0 	beq.w	8002f0e <Setup0_Process+0x2e2>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d05e      	beq.n	8002e70 <Setup0_Process+0x244>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	f47f af72 	bne.w	8002c9c <Setup0_Process+0x70>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8002db8:	6833      	ldr	r3, [r6, #0]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1cd      	bne.n	8002d5c <Setup0_Process+0x130>
 8002dc0:	e76c      	b.n	8002c9c <Setup0_Process+0x70>
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8002dc2:	6863      	ldr	r3, [r4, #4]
 8002dc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dcc:	f47f af65 	bne.w	8002c9a <Setup0_Process+0x6e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8002dd0:	7823      	ldrb	r3, [r4, #0]
 8002dd2:	f013 037f 	ands.w	r3, r3, #127	; 0x7f
 8002dd6:	f040 80a4 	bne.w	8002f22 <Setup0_Process+0x2f6>
        && (pInformation->USBwIndex == 0))
 8002dda:	88a3      	ldrh	r3, [r4, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f af5c 	bne.w	8002c9a <Setup0_Process+0x6e>
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
          && (Status != 0))
      {
        CopyRoutine = Standard_GetStatus;
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <Setup0_Process+0x2a0>)
 8002de4:	e7ba      	b.n	8002d5c <Setup0_Process+0x130>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8002de6:	290a      	cmp	r1, #10
 8002de8:	f47f af57 	bne.w	8002c9a <Setup0_Process+0x6e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002dec:	7823      	ldrb	r3, [r4, #0]
 8002dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	f47f af51 	bne.w	8002c9a <Setup0_Process+0x6e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8002df8:	7aa3      	ldrb	r3, [r4, #10]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f43f af4d 	beq.w	8002c9a <Setup0_Process+0x6e>
 8002e00:	8863      	ldrh	r3, [r4, #2]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f47f af49 	bne.w	8002c9a <Setup0_Process+0x6e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002e08:	6862      	ldr	r2, [r4, #4]
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002e0a:	4e2a      	ldr	r6, [pc, #168]	; (8002eb4 <Setup0_Process+0x288>)
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8002e0c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002e10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e14:	f47f af42 	bne.w	8002c9c <Setup0_Process+0x70>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8002e18:	6832      	ldr	r2, [r6, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	7960      	ldrb	r0, [r4, #5]
 8002e1e:	6993      	ldr	r3, [r2, #24]
 8002e20:	4798      	blx	r3
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f040 80be 	bne.w	8002fa4 <Setup0_Process+0x378>
 8002e28:	682c      	ldr	r4, [r5, #0]
    {
      CopyRoutine = Standard_GetInterface;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <Setup0_Process+0x2a4>)
 8002e2c:	e796      	b.n	8002d5c <Setup0_Process+0x130>


  if (ValBit(pInformation->USBbmRequestType, 7))
  {
    /* Device ==> Host */
    __IO uint32_t wLength = pInformation->USBwLength;
 8002e2e:	88d9      	ldrh	r1, [r3, #6]
 8002e30:	9101      	str	r1, [sp, #4]
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8002e32:	9801      	ldr	r0, [sp, #4]
 8002e34:	4282      	cmp	r2, r0
 8002e36:	d817      	bhi.n	8002e68 <Setup0_Process+0x23c>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002e38:	428a      	cmp	r2, r1
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002e3a:	4e1e      	ldr	r6, [pc, #120]	; (8002eb4 <Setup0_Process+0x288>)
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
    }
    
    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 8002e3c:	d208      	bcs.n	8002e50 <Setup0_Process+0x224>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 8002e3e:	6831      	ldr	r1, [r6, #0]
 8002e40:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8002e44:	428a      	cmp	r2, r1
 8002e46:	f080 8095 	bcs.w	8002f74 <Setup0_Process+0x348>
      {
        Data_Mul_MaxPacketSize = FALSE;
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <Setup0_Process+0x2a8>)
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	7011      	strb	r1, [r2, #0]
      {
        Data_Mul_MaxPacketSize = TRUE;
      }
    }   

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8002e50:	6832      	ldr	r2, [r6, #0]
 8002e52:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8002e56:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <Setup0_Process+0x2ac>)
 8002e5a:	4798      	blx	r3
 8002e5c:	e73b      	b.n	8002cd6 <Setup0_Process+0xaa>

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8002e5e:	2e0b      	cmp	r6, #11
 8002e60:	d18e      	bne.n	8002d80 <Setup0_Process+0x154>
    {
      Result = Standard_SetInterface();
 8002e62:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <Setup0_Process+0x2b0>)
 8002e64:	4798      	blx	r3
 8002e66:	e75d      	b.n	8002d24 <Setup0_Process+0xf8>
    __IO uint32_t wLength = pInformation->USBwLength;
     
    /* Restrict the data length to be the one host asks for */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 8002e68:	9a01      	ldr	r2, [sp, #4]
 8002e6a:	4e12      	ldr	r6, [pc, #72]	; (8002eb4 <Setup0_Process+0x288>)
 8002e6c:	821a      	strh	r2, [r3, #16]
 8002e6e:	e7ef      	b.n	8002e50 <Setup0_Process+0x224>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 8002e70:	6833      	ldr	r3, [r6, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f af71 	bne.w	8002d5c <Setup0_Process+0x130>
 8002e7a:	e70f      	b.n	8002c9c <Setup0_Process+0x70>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 8002e7c:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	db88      	blt.n	8002d96 <Setup0_Process+0x16a>
 8002e84:	78a3      	ldrb	r3, [r4, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d185      	bne.n	8002d96 <Setup0_Process+0x16a>
          || (pInformation->USBwIndex != 0)
 8002e8a:	88a3      	ldrh	r3, [r4, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d182      	bne.n	8002d96 <Setup0_Process+0x16a>
          || (pInformation->Current_Configuration != 0))
 8002e90:	7aa3      	ldrb	r3, [r4, #10]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f43f af48 	beq.w	8002d28 <Setup0_Process+0xfc>
 8002e98:	e77d      	b.n	8002d96 <Setup0_Process+0x16a>

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 8002e9a:	2e01      	cmp	r6, #1
 8002e9c:	f43f af40 	beq.w	8002d20 <Setup0_Process+0xf4>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8002ea0:	2e03      	cmp	r6, #3
 8002ea2:	f47f af6d 	bne.w	8002d80 <Setup0_Process+0x154>
    {
      Result = Standard_SetEndPointFeature();
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <Setup0_Process+0x2b4>)
 8002ea8:	4798      	blx	r3
 8002eaa:	e73b      	b.n	8002d24 <Setup0_Process+0xf8>
 8002eac:	20001488 	.word	0x20001488
 8002eb0:	08003381 	.word	0x08003381
 8002eb4:	20001460 	.word	0x20001460
 8002eb8:	2000148e 	.word	0x2000148e
 8002ebc:	08002ae9 	.word	0x08002ae9
 8002ec0:	0800293d 	.word	0x0800293d
 8002ec4:	20001490 	.word	0x20001490
 8002ec8:	080026f9 	.word	0x080026f9
 8002ecc:	08002749 	.word	0x08002749
 8002ed0:	08002721 	.word	0x08002721
 8002ed4:	200002cc 	.word	0x200002cc
 8002ed8:	080027e1 	.word	0x080027e1
 8002edc:	080028ed 	.word	0x080028ed
 8002ee0:	08002a35 	.word	0x08002a35
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP) \
 8002ee4:	78e3      	ldrb	r3, [r4, #3]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f47f af4a 	bne.w	8002d80 <Setup0_Process+0x154>
          && (pInformation->USBwIndex == 0))
 8002eec:	88a3      	ldrh	r3, [r4, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f47f af46 	bne.w	8002d80 <Setup0_Process+0x154>
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002ef4:	7a62      	ldrb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <Setup0_Process+0x380>)
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002ef8:	f042 0220 	orr.w	r2, r2, #32
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002efc:	681b      	ldr	r3, [r3, #0]
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
  SetBit(pInformation->Current_Feature, 5);
 8002efe:	7262      	strb	r2, [r4, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4798      	blx	r3
 8002f04:	682c      	ldr	r4, [r5, #0]
 8002f06:	e70f      	b.n	8002d28 <Setup0_Process+0xfc>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
    {
      Result = Standard_SetConfiguration();
 8002f08:	4b29      	ldr	r3, [pc, #164]	; (8002fb0 <Setup0_Process+0x384>)
 8002f0a:	4798      	blx	r3
 8002f0c:	e70a      	b.n	8002d24 <Setup0_Process+0xf8>
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      uint8_t wValue1 = pInformation->USBwValue1;
      if (wValue1 == DEVICE_DESCRIPTOR)
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8002f0e:	6833      	ldr	r3, [r6, #0]
 8002f10:	69db      	ldr	r3, [r3, #28]
      CopyRoutine = Standard_GetInterface;
    }

  }
  
  if (CopyRoutine)
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f47f af22 	bne.w	8002d5c <Setup0_Process+0x130>
 8002f18:	e6c0      	b.n	8002c9c <Setup0_Process+0x70>
 8002f1a:	682c      	ldr	r4, [r5, #0]


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
 8002f1c:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 8002f1e:	7223      	strb	r3, [r4, #8]
 8002f20:	e6d9      	b.n	8002cd6 <Setup0_Process+0xaa>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d031      	beq.n	8002f8a <Setup0_Process+0x35e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	f47f aeb7 	bne.w	8002c9a <Setup0_Process+0x6e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 8002f2c:	7963      	ldrb	r3, [r4, #5]
 8002f2e:	f003 020f 	and.w	r2, r3, #15

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002f32:	0090      	lsls	r0, r2, #2
 8002f34:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8002f38:	061e      	lsls	r6, r3, #24
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002f3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002f3e:	bf56      	itet	pl
 8002f40:	6800      	ldrpl	r0, [r0, #0]

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002f42:	6806      	ldrmi	r6, [r0, #0]
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8002f44:	f400 5640 	andpl.w	r6, r0, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002f48:	481a      	ldr	r0, [pc, #104]	; (8002fb4 <Setup0_Process+0x388>)

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 8002f4a:	bf48      	it	mi
 8002f4c:	f006 0630 	andmi.w	r6, r6, #48	; 0x30
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8002f50:	7800      	ldrb	r0, [r0, #0]
 8002f52:	4282      	cmp	r2, r0
 8002f54:	f4bf aea1 	bcs.w	8002c9a <Setup0_Process+0x6e>
 8002f58:	f013 0f70 	tst.w	r3, #112	; 0x70
 8002f5c:	bf14      	ite	ne
 8002f5e:	2300      	movne	r3, #0
 8002f60:	2301      	moveq	r3, #1
          && (Status != 0))
 8002f62:	2e00      	cmp	r6, #0
 8002f64:	bf0c      	ite	eq
 8002f66:	2600      	moveq	r6, #0
 8002f68:	f003 0601 	andne.w	r6, r3, #1
 8002f6c:	2e00      	cmp	r6, #0
 8002f6e:	f47f af38 	bne.w	8002de2 <Setup0_Process+0x1b6>
 8002f72:	e692      	b.n	8002c9a <Setup0_Process+0x6e>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
      {
        Data_Mul_MaxPacketSize = FALSE;
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 8002f74:	fb92 f0f1 	sdiv	r0, r2, r1
 8002f78:	fb01 2210 	mls	r2, r1, r0, r2
 8002f7c:	2a00      	cmp	r2, #0
 8002f7e:	f47f af67 	bne.w	8002e50 <Setup0_Process+0x224>
      {
        Data_Mul_MaxPacketSize = TRUE;
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <Setup0_Process+0x38c>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	7011      	strb	r1, [r2, #0]
 8002f88:	e762      	b.n	8002e50 <Setup0_Process+0x224>
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 8002f8a:	4e0c      	ldr	r6, [pc, #48]	; (8002fbc <Setup0_Process+0x390>)
 8002f8c:	7960      	ldrb	r0, [r4, #5]
 8002f8e:	6833      	ldr	r3, [r6, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	4798      	blx	r3
 8002f94:	b930      	cbnz	r0, 8002fa4 <Setup0_Process+0x378>
          && (pInformation->Current_Configuration != 0))
 8002f96:	682c      	ldr	r4, [r5, #0]
 8002f98:	7aa3      	ldrb	r3, [r4, #10]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f47f af21 	bne.w	8002de2 <Setup0_Process+0x1b6>
 8002fa0:	7861      	ldrb	r1, [r4, #1]
 8002fa2:	e67b      	b.n	8002c9c <Setup0_Process+0x70>
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	7859      	ldrb	r1, [r3, #1]
 8002fa8:	e678      	b.n	8002c9c <Setup0_Process+0x70>
 8002faa:	bf00      	nop
 8002fac:	20001484 	.word	0x20001484
 8002fb0:	080028b1 	.word	0x080028b1
 8002fb4:	200000e4 	.word	0x200000e4
 8002fb8:	200002cc 	.word	0x200002cc
 8002fbc:	20001460 	.word	0x20001460

08002fc0 <SetDeviceAddress>:
* Input          : - Val: device address.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(uint8_t Val)
{
 8002fc0:	b470      	push	{r4, r5, r6}
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <SetDeviceAddress+0x40>)
 8002fc4:	781e      	ldrb	r6, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002fc6:	b196      	cbz	r6, 8002fee <SetDeviceAddress+0x2e>
 8002fc8:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
 8002fcc:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8002fd0:	2300      	movs	r3, #0
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002fd2:	6825      	ldr	r5, [r4, #0]
 8002fd4:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8002fd8:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002fdc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002fe0:	402a      	ands	r2, r5
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002fe2:	3301      	adds	r3, #1
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002fe4:	430a      	orrs	r2, r1
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002fe6:	429e      	cmp	r6, r3
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
 8002fe8:	f844 2b04 	str.w	r2, [r4], #4
{
  uint32_t i;
  uint32_t nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8002fec:	d8f1      	bhi.n	8002fd2 <SetDeviceAddress+0x12>
  {
    _SetEPAddress((uint8_t)i, (uint8_t)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */ 
 8002fee:	f645 434c 	movw	r3, #23628	; 0x5c4c
 8002ff2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8002ff6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ffa:	6018      	str	r0, [r3, #0]
}
 8002ffc:	bc70      	pop	{r4, r5, r6}
 8002ffe:	4770      	bx	lr
 8003000:	200000e4 	.word	0x200000e4

08003004 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
uint8_t In0_Process(void)
{
 8003004:	b510      	push	{r4, lr}
  uint32_t ControlState = pInformation->ControlState;
 8003006:	4c14      	ldr	r4, [pc, #80]	; (8003058 <In0_Process+0x54>)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800300c:	2a02      	cmp	r2, #2
 800300e:	bf18      	it	ne
 8003010:	2a04      	cmpne	r2, #4
 8003012:	d010      	beq.n	8003036 <In0_Process+0x32>
    DataStageIn();
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
 8003014:	2a06      	cmp	r2, #6
 8003016:	d004      	beq.n	8003022 <In0_Process+0x1e>
 8003018:	2208      	movs	r2, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 800301a:	721a      	strb	r2, [r3, #8]

  return Post0_Process();
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <In0_Process+0x58>)
 800301e:	4798      	blx	r3
}
 8003020:	bd10      	pop	{r4, pc}
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003022:	785a      	ldrb	r2, [r3, #1]
 8003024:	2a05      	cmp	r2, #5
 8003026:	d00b      	beq.n	8003040 <In0_Process+0x3c>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
      pUser_Standard_Requests->User_SetDeviceAddress();
    }
    (*pProperty->Process_Status_IN)();
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <In0_Process+0x5c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4798      	blx	r3
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	2208      	movs	r2, #8
 8003034:	e7f1      	b.n	800301a <In0_Process+0x16>
{
  uint32_t ControlState = pInformation->ControlState;

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    DataStageIn();
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <In0_Process+0x60>)
 8003038:	4798      	blx	r3
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	7a1a      	ldrb	r2, [r3, #8]
 800303e:	e7ec      	b.n	800301a <In0_Process+0x16>
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8003040:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	d1f0      	bne.n	8003028 <In0_Process+0x24>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 8003046:	78d8      	ldrb	r0, [r3, #3]
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <In0_Process+0x64>)
 800304a:	4798      	blx	r3
      pUser_Standard_Requests->User_SetDeviceAddress();
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <In0_Process+0x68>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4798      	blx	r3
 8003054:	e7e8      	b.n	8003028 <In0_Process+0x24>
 8003056:	bf00      	nop
 8003058:	20001488 	.word	0x20001488
 800305c:	08002ae9 	.word	0x08002ae9
 8003060:	20001460 	.word	0x20001460
 8003064:	080027e1 	.word	0x080027e1
 8003068:	08002fc1 	.word	0x08002fc1
 800306c:	20001484 	.word	0x20001484

08003070 <NOP_Process>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop

08003074 <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 8003074:	b510      	push	{r4, lr}
  pInformation = &Device_Info;
 8003076:	f241 4268 	movw	r2, #5224	; 0x1468
 800307a:	f241 4488 	movw	r4, #5256	; 0x1488
 800307e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003082:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003086:	6022      	str	r2, [r4, #0]
  pInformation->ControlState = 2;
 8003088:	2402      	movs	r4, #2
 800308a:	7214      	strb	r4, [r2, #8]
  pProperty = &Device_Property;
 800308c:	f241 4060 	movw	r0, #5216	; 0x1460
 8003090:	f240 0360 	movw	r3, #96	; 0x60
  pUser_Standard_Requests = &User_Standard_Requests;
 8003094:	f241 4184 	movw	r1, #5252	; 0x1484
 8003098:	f240 0290 	movw	r2, #144	; 0x90
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 800309c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
  pUser_Standard_Requests = &User_Standard_Requests;
 80030a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80030a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
 80030ac:	6003      	str	r3, [r0, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 80030ae:	600a      	str	r2, [r1, #0]
  /* Initialize devices one by one */
  pProperty->Init();
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4798      	blx	r3
 80030b4:	bd10      	pop	{r4, pc}
 80030b6:	bf00      	nop

080030b8 <UserToPMABufferCopy>:
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80030b8:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80030bc:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80030c0:	3201      	adds	r2, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
 80030c2:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80030c4:	1053      	asrs	r3, r2, #1
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80030c6:	b410      	push	{r4}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80030c8:	d00d      	beq.n	80030e6 <UserToPMABufferCopy+0x2e>
 80030ca:	1d0a      	adds	r2, r1, #4
*                  - wPMABufAddr: address into PMA.
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 80030cc:	3002      	adds	r0, #2
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80030ce:	f810 4c01 	ldrb.w	r4, [r0, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80030d2:	f810 1c02 	ldrb.w	r1, [r0, #-2]
 80030d6:	3002      	adds	r0, #2
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80030d8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
    *pdwVal++ = temp2;
 80030dc:	f822 1c04 	strh.w	r1, [r2, #-4]
 80030e0:	3204      	adds	r2, #4
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 80030e2:	3b01      	subs	r3, #1
 80030e4:	d1f3      	bne.n	80030ce <UserToPMABufferCopy+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80030e6:	bc10      	pop	{r4}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <PMAToUserBufferCopy>:
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80030ec:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 80030f0:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80030f4:	3201      	adds	r2, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
 80030f6:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80030f8:	1053      	asrs	r3, r2, #1
 80030fa:	d008      	beq.n	800310e <PMAToUserBufferCopy+0x22>
*                  - wPMABufAddr = address into PMA.
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
 80030fc:	3002      	adds	r0, #2
 80030fe:	1f0a      	subs	r2, r1, #4
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003100:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8003104:	f820 1c02 	strh.w	r1, [r0, #-2]
 8003108:	3002      	adds	r0, #2
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
 800310a:	3b01      	subs	r3, #1
 800310c:	d1f8      	bne.n	8003100 <PMAToUserBufferCopy+0x14>
 800310e:	4770      	bx	lr

08003110 <SetBTABLE>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetBTABLE(uint16_t wRegValue)
{
  _SetBTABLE(wRegValue);
 8003110:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003114:	f645 4250 	movw	r2, #23632	; 0x5c50
 8003118:	4003      	ands	r3, r0
 800311a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <SetEPType>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPType(uint8_t bEpNum, uint16_t wType)
{
  _SetEPType(bEpNum, wType);
 8003124:	0080      	lsls	r0, r0, #2
 8003126:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800312a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800312e:	6810      	ldr	r0, [r2, #0]
 8003130:	f648 138f 	movw	r3, #35215	; 0x898f
 8003134:	4003      	ands	r3, r0
 8003136:	4319      	orrs	r1, r3
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	4770      	bx	lr

0800313c <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 800313c:	0080      	lsls	r0, r0, #2
 800313e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003142:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003146:	b410      	push	{r4}
  _SetEPTxStatus(bEpNum, wState);
 8003148:	f001 0010 	and.w	r0, r1, #16
 800314c:	6814      	ldr	r4, [r2, #0]
 800314e:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 8003152:	b280      	uxth	r0, r0
 8003154:	4023      	ands	r3, r4
 8003156:	b968      	cbnz	r0, 8003174 <SetEPTxStatus+0x38>
 8003158:	b29b      	uxth	r3, r3
 800315a:	f001 0120 	and.w	r1, r1, #32
 800315e:	b289      	uxth	r1, r1
 8003160:	b109      	cbz	r1, 8003166 <SetEPTxStatus+0x2a>
 8003162:	f083 0320 	eor.w	r3, r3, #32
 8003166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bc10      	pop	{r4}
 8003172:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8003174:	f083 0310 	eor.w	r3, r3, #16
 8003178:	e7ef      	b.n	800315a <SetEPTxStatus+0x1e>
 800317a:	bf00      	nop

0800317c <SetEPRxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 800317c:	0080      	lsls	r0, r0, #2
 800317e:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 8003182:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
*                  wState: new state.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
 8003186:	b410      	push	{r4}
  _SetEPRxStatus(bEpNum, wState);
 8003188:	f401 5080 	and.w	r0, r1, #4096	; 0x1000
 800318c:	6814      	ldr	r4, [r2, #0]
 800318e:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 8003192:	b280      	uxth	r0, r0
 8003194:	4023      	ands	r3, r4
 8003196:	b968      	cbnz	r0, 80031b4 <SetEPRxStatus+0x38>
 8003198:	b29b      	uxth	r3, r3
 800319a:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 800319e:	b289      	uxth	r1, r1
 80031a0:	b109      	cbz	r1, 80031a6 <SetEPRxStatus+0x2a>
 80031a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bc10      	pop	{r4}
 80031b2:	4770      	bx	lr
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxStatus(uint8_t bEpNum, uint16_t wState)
{
  _SetEPRxStatus(bEpNum, wState);
 80031b4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031b8:	e7ef      	b.n	800319a <SetEPRxStatus+0x1e>
 80031ba:	bf00      	nop

080031bc <SetEPTxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxValid(uint8_t bEpNum)
{
  _SetEPTxStatus(bEpNum, EP_TX_VALID);
 80031bc:	0080      	lsls	r0, r0, #2
 80031be:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80031c2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80031c6:	6811      	ldr	r1, [r2, #0]
 80031c8:	f648 73bf 	movw	r3, #36799	; 0x8fbf
 80031cc:	400b      	ands	r3, r1
 80031ce:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop

080031e0 <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(uint8_t bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 80031e0:	0080      	lsls	r0, r0, #2
 80031e2:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 80031e6:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80031ea:	6811      	ldr	r1, [r2, #0]
 80031ec:	f64b 738f 	movw	r3, #49039	; 0xbf8f
 80031f0:	400b      	ands	r3, r1
 80031f2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop

08003204 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(uint8_t bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8003204:	0080      	lsls	r0, r0, #2
 8003206:	f100 4280 	add.w	r2, r0, #1073741824	; 0x40000000
 800320a:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 800320e:	6811      	ldr	r1, [r2, #0]
 8003210:	f640 630f 	movw	r3, #3599	; 0xe0f
 8003214:	400b      	ands	r3, r1
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(uint8_t bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8003224:	0080      	lsls	r0, r0, #2
 8003226:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800322a:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	0451      	lsls	r1, r2, #17
 8003232:	d508      	bpl.n	8003246 <ClearDTOG_RX+0x22>
 8003234:	6819      	ldr	r1, [r3, #0]
 8003236:	f640 720f 	movw	r2, #3855	; 0xf0f
 800323a:	400a      	ands	r2, r1
 800323c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	4770      	bx	lr

08003248 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(uint8_t bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8003248:	0080      	lsls	r0, r0, #2
 800324a:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 800324e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	0650      	lsls	r0, r2, #25
 8003256:	d508      	bpl.n	800326a <ClearDTOG_TX+0x22>
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	f640 720f 	movw	r2, #3855	; 0xf0f
 800325e:	400a      	ands	r2, r1
 8003260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003264:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	4770      	bx	lr

0800326c <SetEPTxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800326c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003270:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f64f 73fe 	movw	r3, #65534	; 0xfffe
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800327a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPTxAddr(bEpNum, wAddr);
 800327c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003280:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8003284:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8003288:	0052      	lsls	r2, r2, #1
 800328a:	400b      	ands	r3, r1
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4770      	bx	lr

08003290 <SetEPRxAddr>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 8003290:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003294:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800329e:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxAddr(uint8_t bEpNum, uint16_t wAddr)
{
  _SetEPRxAddr(bEpNum, wAddr);
 80032a0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80032a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032a8:	18c3      	adds	r3, r0, r3
 80032aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	400a      	ands	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop

080032b8 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 80032b8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80032bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80032c0:	681b      	ldr	r3, [r3, #0]
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80032c2:	b29b      	uxth	r3, r3
* Output         : None.
* Return         : Rx buffer address. 
*******************************************************************************/
uint16_t GetEPTxAddr(uint8_t bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 80032c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80032c8:	f100 5300 	add.w	r3, r0, #536870912	; 0x20000000
 80032cc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80032d0:	005b      	lsls	r3, r3, #1
}
 80032d2:	8818      	ldrh	r0, [r3, #0]
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80032d8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80032dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f243 0304 	movw	r3, #12292	; 0x3004
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 80032e6:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
uint16_t GetEPRxAddr(uint8_t bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 80032e8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80032ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032f0:	18c3      	adds	r3, r0, r3
 80032f2:	005b      	lsls	r3, r3, #1
}
 80032f4:	8818      	ldrh	r0, [r3, #0]
 80032f6:	4770      	bx	lr

080032f8 <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 80032f8:	f645 4350 	movw	r3, #23632	; 0x5c50
 80032fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f243 0302 	movw	r3, #12290	; 0x3002
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003306:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8003308:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800330c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003310:	18c3      	adds	r3, r0, r3
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	4770      	bx	lr

08003318 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8003318:	f645 4350 	movw	r3, #23632	; 0x5c50
 800331c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 8003326:	b292      	uxth	r2, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(uint8_t bEpNum, uint16_t wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8003328:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800332c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003330:	18c3      	adds	r3, r0, r3
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	293e      	cmp	r1, #62	; 0x3e
 8003336:	d909      	bls.n	800334c <SetEPRxCount+0x34>
 8003338:	094a      	lsrs	r2, r1, #5
 800333a:	06c9      	lsls	r1, r1, #27
 800333c:	d101      	bne.n	8003342 <SetEPRxCount+0x2a>
 800333e:	3a01      	subs	r2, #1
 8003340:	b292      	uxth	r2, r2
 8003342:	0292      	lsls	r2, r2, #10
 8003344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	4770      	bx	lr
 800334c:	084a      	lsrs	r2, r1, #1
 800334e:	07c8      	lsls	r0, r1, #31
 8003350:	bf48      	it	mi
 8003352:	3201      	addmi	r2, #1
 8003354:	0292      	lsls	r2, r2, #10
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <GetEPRxCount>:
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800335c:	f645 4350 	movw	r3, #23632	; 0x5c50
 8003360:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f243 0306 	movw	r3, #12294	; 0x3006
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
  return(wRet);
}
 800336a:	b292      	uxth	r2, r2
* Output         : None.
* Return         : Rx count value.
*******************************************************************************/
uint16_t GetEPRxCount(uint8_t bEpNum)
{
  return(_GetEPRxCount(bEpNum));
 800336c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8003370:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003374:	18c3      	adds	r3, r0, r3
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	6818      	ldr	r0, [r3, #0]
}
 800337a:	0580      	lsls	r0, r0, #22
 800337c:	0d80      	lsrs	r0, r0, #22
 800337e:	4770      	bx	lr

08003380 <ByteSwap>:
uint16_t ByteSwap(uint16_t wSwW)
{
  uint8_t bTemp;
  uint16_t wRet;
  bTemp = (uint8_t)(wSwW & 0xff);
  wRet =  (wSwW >> 8) | ((uint16_t)bTemp << 8);
 8003380:	b2c3      	uxtb	r3, r0
 8003382:	0a00      	lsrs	r0, r0, #8
  return(wRet);
}
 8003384:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <USB_SIL_Init>:
* Input          : None.
* Output         : None.
* Return         : Status.
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
 800338c:	b410      	push	{r4}
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800338e:	f241 438c 	movw	r3, #5260	; 0x148c
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 8003392:	f645 4444 	movw	r4, #23620	; 0x5c44
  wInterrupt_Mask = IMR_MSK;
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 8003396:	f645 4240 	movw	r2, #23616	; 0x5c40
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
  wInterrupt_Mask = IMR_MSK;
 800339a:	f44f 413f 	mov.w	r1, #48896	; 0xbf00
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 800339e:	2000      	movs	r0, #0
 80033a0:	f2c4 0400 	movt	r4, #16384	; 0x4000
  wInterrupt_Mask = IMR_MSK;
 80033a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80033a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
*******************************************************************************/
uint32_t USB_SIL_Init(void)
{
  /* USB interrupts initialization */
  /* clear pending interrupts */
  _SetISTR(0);
 80033ac:	6020      	str	r0, [r4, #0]
  wInterrupt_Mask = IMR_MSK;
 80033ae:	8019      	strh	r1, [r3, #0]
  /* set interrupts mask */
  _SetCNTR(wInterrupt_Mask);
 80033b0:	6011      	str	r1, [r2, #0]
  return 0;
}
 80033b2:	bc10      	pop	{r4}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop

080033b8 <USB_SIL_Read>:
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80033ba:	f243 335d 	movw	r3, #13149	; 0x335d
 80033be:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 80033c2:	4628      	mov	r0, r5
 80033c4:	f6c0 0300 	movt	r3, #2048	; 0x800
*                     received data buffer.
* Output         : None.
* Return         : Number of received data (in Bytes).
*******************************************************************************/
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
 80033c8:	460e      	mov	r6, r1
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80033ca:	4798      	blx	r3
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80033cc:	f243 23d9 	movw	r3, #13017	; 0x32d9
uint32_t USB_SIL_Read(uint8_t bEpAddr, uint8_t* pBufferPointer)
{
  uint32_t DataLength = 0;

  /* Get the number of received data on the selected Endpoint */
  DataLength = GetEPRxCount(bEpAddr & 0x7F);
 80033d0:	4604      	mov	r4, r0
  
  /* Use the memory interface function to write to the selected endpoint */
  PMAToUserBufferCopy(pBufferPointer, GetEPRxAddr(bEpAddr & 0x7F), DataLength);
 80033d2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80033d6:	4628      	mov	r0, r5
 80033d8:	4798      	blx	r3
 80033da:	f243 03ed 	movw	r3, #12525	; 0x30ed
 80033de:	4601      	mov	r1, r0
 80033e0:	4622      	mov	r2, r4
 80033e2:	4630      	mov	r0, r6
 80033e4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80033e8:	4798      	blx	r3

  /* Return the number of received data */
  return DataLength;
}
 80033ea:	4620      	mov	r0, r4
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
 80033ee:	bf00      	nop

080033f0 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 80033f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80035a4 <CTR_LP+0x1b4>
 80033f8:	b083      	sub	sp, #12
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 80033fa:	f645 4b44 	movw	fp, #23620	; 0x5c44
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 80033fe:	2300      	movs	r3, #0
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003400:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80035a8 <CTR_LP+0x1b8>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003404:	4d62      	ldr	r5, [pc, #392]	; (8003590 <CTR_LP+0x1a0>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
 8003406:	f8ad 3006 	strh.w	r3, [sp, #6]
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 800340a:	f2c4 0b00 	movt	fp, #16384	; 0x4000
 800340e:	46d0      	mov	r8, sl
 8003410:	f8db 3000 	ldr.w	r3, [fp]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003414:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
*******************************************************************************/
void CTR_LP(void)
{
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8003418:	b29a      	uxth	r2, r3
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	f8aa 2000 	strh.w	r2, [sl]
 8003420:	f140 80ab 	bpl.w	800357a <CTR_LP+0x18a>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003424:	f8b8 2000 	ldrh.w	r2, [r8]
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 8003428:	f2c4 0400 	movt	r4, #16384	; 0x4000
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 800342c:	f002 020f 	and.w	r2, r2, #15
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003430:	0090      	lsls	r0, r2, #2
 8003432:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
	    SaveTState = SaveRState & EPTX_STAT;
 8003436:	4e57      	ldr	r6, [pc, #348]	; (8003594 <CTR_LP+0x1a4>)
	    SaveRState &=  EPRX_STAT;	

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003438:	f64b 71bf 	movw	r1, #49087	; 0xbfbf
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800343c:	4f54      	ldr	r7, [pc, #336]	; (8003590 <CTR_LP+0x1a0>)
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
    if (EPindex == 0)
 800343e:	4613      	mov	r3, r2
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8003440:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
  __IO uint16_t wEPVal = 0;
  /* stay in loop while pending interrupts */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & ISTR_EP_ID);
 8003444:	f889 2000 	strb.w	r2, [r9]
    if (EPindex == 0)
 8003448:	2a00      	cmp	r2, #0
 800344a:	d133      	bne.n	80034b4 <CTR_LP+0xc4>
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      
	    SaveRState = _GetENDPOINT(ENDP0);
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	802b      	strh	r3, [r5, #0]
	    SaveTState = SaveRState & EPTX_STAT;
 8003452:	882b      	ldrh	r3, [r5, #0]
 8003454:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003458:	8033      	strh	r3, [r6, #0]
	    SaveRState &=  EPRX_STAT;	
 800345a:	882b      	ldrh	r3, [r5, #0]
 800345c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003460:	802b      	strh	r3, [r5, #0]

	    _SetEPRxTxStatus(ENDP0,EP_RX_NAK,EP_TX_NAK);
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	4019      	ands	r1, r3
 8003466:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 800346a:	f081 0120 	eor.w	r1, r1, #32
 800346e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003472:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8003476:	6021      	str	r1, [r4, #0]

      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8003478:	f8b8 3000 	ldrh.w	r3, [r8]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d049      	beq.n	800351a <CTR_LP+0x12a>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal &EP_SETUP) != 0)
 800348e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d171      	bne.n	8003580 <CTR_LP+0x190>

		      _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 800349c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dab4      	bge.n	8003410 <CTR_LP+0x20>
        {
          _ClearEP_CTR_RX(ENDP0);
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034ac:	4013      	ands	r3, r2
 80034ae:	6023      	str	r3, [r4, #0]
          Out0_Process();
 80034b0:	4b39      	ldr	r3, [pc, #228]	; (8003598 <CTR_LP+0x1a8>)
 80034b2:	e038      	b.n	8003526 <CTR_LP+0x136>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 80034b4:	6802      	ldr	r2, [r0, #0]
 80034b6:	b292      	uxth	r2, r2
 80034b8:	f8ad 2006 	strh.w	r2, [sp, #6]
      if ((wEPVal & EP_CTR_RX) != 0)
 80034bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80034c0:	b212      	sxth	r2, r2
 80034c2:	2a00      	cmp	r2, #0
 80034c4:	db1b      	blt.n	80034fe <CTR_LP+0x10e>
        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 80034c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d09d      	beq.n	8003410 <CTR_LP+0x20>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80034d4:	f899 1000 	ldrb.w	r1, [r9]
 80034d8:	f648 730f 	movw	r3, #36623	; 0x8f0f
 80034dc:	008a      	lsls	r2, r1, #2
 80034de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80034e2:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80034e6:	6810      	ldr	r0, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80034e8:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 80034ea:	4003      	ands	r3, r0
 80034ec:	6013      	str	r3, [r2, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 80034ee:	f240 0220 	movw	r2, #32
 80034f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80034f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80034fa:	4798      	blx	r3
 80034fc:	e788      	b.n	8003410 <CTR_LP+0x20>
      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
      if ((wEPVal & EP_CTR_RX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 80034fe:	6801      	ldr	r1, [r0, #0]
 8003500:	f640 728f 	movw	r2, #3983	; 0xf8f
 8003504:	400a      	ands	r2, r1
 8003506:	6002      	str	r2, [r0, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8003508:	f240 023c 	movw	r2, #60	; 0x3c
 800350c:	3b01      	subs	r3, #1
 800350e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	4798      	blx	r3
 8003518:	e7d5      	b.n	80034c6 <CTR_LP+0xd6>
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */

        _ClearEP_CTR_TX(ENDP0);
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8003520:	4013      	ands	r3, r2
 8003522:	6023      	str	r3, [r4, #0]
        In0_Process();
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <CTR_LP+0x1ac>)
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
        {
          _ClearEP_CTR_RX(ENDP0);
          Out0_Process();
 8003526:	4798      	blx	r3
          /* before terminate set Tx & Rx status */
     
		     _SetEPRxTxStatus(ENDP0,SaveRState,SaveTState);
 8003528:	6821      	ldr	r1, [r4, #0]
 800352a:	883a      	ldrh	r2, [r7, #0]
 800352c:	f64b 73bf 	movw	r3, #49087	; 0xbfbf
 8003530:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003534:	b292      	uxth	r2, r2
 8003536:	400b      	ands	r3, r1
 8003538:	b10a      	cbz	r2, 800353e <CTR_LP+0x14e>
 800353a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800353e:	883a      	ldrh	r2, [r7, #0]
 8003540:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003544:	b292      	uxth	r2, r2
 8003546:	b10a      	cbz	r2, 800354c <CTR_LP+0x15c>
 8003548:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800354c:	8832      	ldrh	r2, [r6, #0]
 800354e:	f002 0210 	and.w	r2, r2, #16
 8003552:	b292      	uxth	r2, r2
 8003554:	b10a      	cbz	r2, 800355a <CTR_LP+0x16a>
 8003556:	f083 0310 	eor.w	r3, r3, #16
 800355a:	8832      	ldrh	r2, [r6, #0]
 800355c:	f002 0220 	and.w	r2, r2, #32
 8003560:	b292      	uxth	r2, r2
 8003562:	b10a      	cbz	r2, 8003568 <CTR_LP+0x178>
 8003564:	f083 0320 	eor.w	r3, r3, #32
 8003568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356c:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8003570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003574:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003578:	6013      	str	r3, [r2, #0]
      } /* if((wEPVal & EP_CTR_TX) != 0) */

    }/* if(EPindex == 0) else */

  }/* while(...) */
}
 800357a:	b003      	add	sp, #12
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        wEPVal = _GetENDPOINT(ENDP0);
        
        if ((wEPVal &EP_SETUP) != 0)
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8003580:	6822      	ldr	r2, [r4, #0]
 8003582:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003586:	4013      	ands	r3, r2
 8003588:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <CTR_LP+0x1b0>)
 800358c:	e7cb      	b.n	8003526 <CTR_LP+0x136>
 800358e:	bf00      	nop
 8003590:	2000148e 	.word	0x2000148e
 8003594:	20001490 	.word	0x20001490
 8003598:	08002b31 	.word	0x08002b31
 800359c:	08003005 	.word	0x08003005
 80035a0:	08002c2d 	.word	0x08002c2d
 80035a4:	20000c30 	.word	0x20000c30
 80035a8:	20001464 	.word	0x20001464
 80035ac:	00000a0a 	.word	0x00000a0a
 80035b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80035b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80035b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80035bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80035c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80035c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80035c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80035cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80035d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80035d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80035d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80035dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80035e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80035e4:	0a2a2a2a 	.word	0x0a2a2a2a
 80035e8:	00000000 	.word	0x00000000
 80035ec:	20202020 	.word	0x20202020
 80035f0:	20202020 	.word	0x20202020
 80035f4:	20202020 	.word	0x20202020
 80035f8:	20202020 	.word	0x20202020
 80035fc:	20202020 	.word	0x20202020
 8003600:	454d2020 	.word	0x454d2020
 8003604:	2020554e 	.word	0x2020554e
 8003608:	20202020 	.word	0x20202020
 800360c:	20202020 	.word	0x20202020
 8003610:	20202020 	.word	0x20202020
 8003614:	20202020 	.word	0x20202020
 8003618:	20202020 	.word	0x20202020
 800361c:	20202020 	.word	0x20202020
 8003620:	0a202020 	.word	0x0a202020
 8003624:	00000000 	.word	0x00000000
 8003628:	2e31202a 	.word	0x2e31202a
 800362c:	44454c20 	.word	0x44454c20
 8003630:	20202b20 	.word	0x20202b20
 8003634:	20202020 	.word	0x20202020
 8003638:	20202020 	.word	0x20202020
 800363c:	20202020 	.word	0x20202020
 8003640:	20202020 	.word	0x20202020
 8003644:	20202020 	.word	0x20202020
 8003648:	20202020 	.word	0x20202020
 800364c:	20202020 	.word	0x20202020
 8003650:	20202020 	.word	0x20202020
 8003654:	20202020 	.word	0x20202020
 8003658:	20202020 	.word	0x20202020
 800365c:	0a2a2020 	.word	0x0a2a2020
 8003660:	00000000 	.word	0x00000000
 8003664:	2e32202a 	.word	0x2e32202a
 8003668:	44454c20 	.word	0x44454c20
 800366c:	20202d20 	.word	0x20202d20
 8003670:	20202020 	.word	0x20202020
 8003674:	20202020 	.word	0x20202020
 8003678:	20202020 	.word	0x20202020
 800367c:	20202020 	.word	0x20202020
 8003680:	20202020 	.word	0x20202020
 8003684:	20202020 	.word	0x20202020
 8003688:	20202020 	.word	0x20202020
 800368c:	20202020 	.word	0x20202020
 8003690:	20202020 	.word	0x20202020
 8003694:	20202020 	.word	0x20202020
 8003698:	0a2a2020 	.word	0x0a2a2020
 800369c:	00000000 	.word	0x00000000
 80036a0:	2e33202a 	.word	0x2e33202a
 80036a4:	4d575020 	.word	0x4d575020
 80036a8:	20202020 	.word	0x20202020
 80036ac:	20202020 	.word	0x20202020
 80036b0:	20202020 	.word	0x20202020
 80036b4:	20202020 	.word	0x20202020
 80036b8:	20202020 	.word	0x20202020
 80036bc:	20202020 	.word	0x20202020
 80036c0:	20202020 	.word	0x20202020
 80036c4:	20202020 	.word	0x20202020
 80036c8:	20202020 	.word	0x20202020
 80036cc:	20202020 	.word	0x20202020
 80036d0:	20202020 	.word	0x20202020
 80036d4:	0a2a2020 	.word	0x0a2a2020
 80036d8:	00000000 	.word	0x00000000
 80036dc:	2e34202a 	.word	0x2e34202a
 80036e0:	54484420 	.word	0x54484420
 80036e4:	20203131 	.word	0x20203131
 80036e8:	20202020 	.word	0x20202020
 80036ec:	20202020 	.word	0x20202020
 80036f0:	20202020 	.word	0x20202020
 80036f4:	20202020 	.word	0x20202020
 80036f8:	20202020 	.word	0x20202020
 80036fc:	20202020 	.word	0x20202020
 8003700:	20202020 	.word	0x20202020
 8003704:	20202020 	.word	0x20202020
 8003708:	20202020 	.word	0x20202020
 800370c:	20202020 	.word	0x20202020
 8003710:	0a2a2020 	.word	0x0a2a2020
 8003714:	00000000 	.word	0x00000000
 8003718:	2e35202a 	.word	0x2e35202a
 800371c:	20202020 	.word	0x20202020
 8003720:	20202020 	.word	0x20202020
 8003724:	20202020 	.word	0x20202020
 8003728:	20202020 	.word	0x20202020
 800372c:	20202020 	.word	0x20202020
 8003730:	20202020 	.word	0x20202020
 8003734:	20202020 	.word	0x20202020
 8003738:	20202020 	.word	0x20202020
 800373c:	20202020 	.word	0x20202020
 8003740:	20202020 	.word	0x20202020
 8003744:	20202020 	.word	0x20202020
 8003748:	20202020 	.word	0x20202020
 800374c:	0a2a2020 	.word	0x0a2a2020
 8003750:	00000000 	.word	0x00000000
 8003754:	2e36202a 	.word	0x2e36202a
 8003758:	20202020 	.word	0x20202020
 800375c:	20202020 	.word	0x20202020
 8003760:	20202020 	.word	0x20202020
 8003764:	20202020 	.word	0x20202020
 8003768:	20202020 	.word	0x20202020
 800376c:	20202020 	.word	0x20202020
 8003770:	20202020 	.word	0x20202020
 8003774:	20202020 	.word	0x20202020
 8003778:	20202020 	.word	0x20202020
 800377c:	20202020 	.word	0x20202020
 8003780:	20202020 	.word	0x20202020
 8003784:	20202020 	.word	0x20202020
 8003788:	0a2a2020 	.word	0x0a2a2020
 800378c:	00000000 	.word	0x00000000
 8003790:	2e37202a 	.word	0x2e37202a
 8003794:	20202020 	.word	0x20202020
 8003798:	20202020 	.word	0x20202020
 800379c:	20202020 	.word	0x20202020
 80037a0:	20202020 	.word	0x20202020
 80037a4:	20202020 	.word	0x20202020
 80037a8:	20202020 	.word	0x20202020
 80037ac:	20202020 	.word	0x20202020
 80037b0:	20202020 	.word	0x20202020
 80037b4:	20202020 	.word	0x20202020
 80037b8:	20202020 	.word	0x20202020
 80037bc:	20202020 	.word	0x20202020
 80037c0:	20202020 	.word	0x20202020
 80037c4:	0a2a2020 	.word	0x0a2a2020
 80037c8:	00000000 	.word	0x00000000
 80037cc:	2e38202a 	.word	0x2e38202a
 80037d0:	20202020 	.word	0x20202020
 80037d4:	20202020 	.word	0x20202020
 80037d8:	20202020 	.word	0x20202020
 80037dc:	20202020 	.word	0x20202020
 80037e0:	20202020 	.word	0x20202020
 80037e4:	20202020 	.word	0x20202020
 80037e8:	20202020 	.word	0x20202020
 80037ec:	20202020 	.word	0x20202020
 80037f0:	20202020 	.word	0x20202020
 80037f4:	20202020 	.word	0x20202020
 80037f8:	20202020 	.word	0x20202020
 80037fc:	20202020 	.word	0x20202020
 8003800:	0a2a2020 	.word	0x0a2a2020
 8003804:	00000000 	.word	0x00000000
 8003808:	2e39202a 	.word	0x2e39202a
 800380c:	20202020 	.word	0x20202020
 8003810:	20202020 	.word	0x20202020
 8003814:	20202020 	.word	0x20202020
 8003818:	20202020 	.word	0x20202020
 800381c:	20202020 	.word	0x20202020
 8003820:	20202020 	.word	0x20202020
 8003824:	20202020 	.word	0x20202020
 8003828:	20202020 	.word	0x20202020
 800382c:	20202020 	.word	0x20202020
 8003830:	20202020 	.word	0x20202020
 8003834:	20202020 	.word	0x20202020
 8003838:	20202020 	.word	0x20202020
 800383c:	0a2a2020 	.word	0x0a2a2020
 8003840:	00000000 	.word	0x00000000
 8003844:	2e6d202a 	.word	0x2e6d202a
 8003848:	654d2020 	.word	0x654d2020
 800384c:	2020756e 	.word	0x2020756e
 8003850:	20202020 	.word	0x20202020
 8003854:	20202020 	.word	0x20202020
 8003858:	20202020 	.word	0x20202020
 800385c:	20202020 	.word	0x20202020
 8003860:	20202020 	.word	0x20202020
 8003864:	20202020 	.word	0x20202020
 8003868:	20202020 	.word	0x20202020
 800386c:	20202020 	.word	0x20202020
 8003870:	20202020 	.word	0x20202020
 8003874:	20202020 	.word	0x20202020
 8003878:	0a2a2020 	.word	0x0a2a2020
 800387c:	00000000 	.word	0x00000000
 8003880:	00203e3e 	.word	0x00203e3e
 8003884:	2044454c 	.word	0x2044454c
 8003888:	616c6544 	.word	0x616c6544
 800388c:	64252079 	.word	0x64252079
 8003890:	20736d20 	.word	0x20736d20
 8003894:	0000000a 	.word	0x0000000a
 8003898:	204d5750 	.word	0x204d5750
 800389c:	79747544 	.word	0x79747544
 80038a0:	20642520 	.word	0x20642520
 80038a4:	0000000a 	.word	0x0000000a
 80038a8:	203a2048 	.word	0x203a2048
 80038ac:	202c6425 	.word	0x202c6425
 80038b0:	203a2054 	.word	0x203a2054
 80038b4:	0a206425 	.word	0x0a206425
 80038b8:	00000000 	.word	0x00000000
 80038bc:	276e6143 	.word	0x276e6143
 80038c0:	69662074 	.word	0x69662074
 80038c4:	4d20646e 	.word	0x4d20646e
 80038c8:	30365550 	.word	0x30365550
 80038cc:	0a203035 	.word	0x0a203035
 80038d0:	00000000 	.word	0x00000000
 80038d4:	20727245 	.word	0x20727245
 80038d8:	74697277 	.word	0x74697277
 80038dc:	504d2065 	.word	0x504d2065
 80038e0:	35303655 	.word	0x35303655
 80038e4:	41525f30 	.word	0x41525f30
 80038e8:	5257505f 	.word	0x5257505f
 80038ec:	4d474d5f 	.word	0x4d474d5f
 80038f0:	20315f54 	.word	0x20315f54
 80038f4:	6425203a 	.word	0x6425203a
 80038f8:	0000000a 	.word	0x0000000a

080038fc <Virtual_Com_Port_StringVendor>:
 80038fc:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 800390c:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 800391c:	00630069 00000073                       i.c.s...

08003924 <Virtual_Com_Port_DeviceDescriptor>:
 8003924:	02000112 40000002 57400483 02010200     .......@..@W....
 8003934:	00000103                                ....

08003938 <Virtual_Com_Port_StringLangID>:
 8003938:	04090304                                ....

0800393c <Virtual_Com_Port_StringProduct>:
 800393c:	00530332 004d0054 00320033 00560020     2.S.T.M.3.2. .V.
 800394c:	00720069 00750074 006c0061 00430020     i.r.t.u.a.l. .C.
 800395c:	004d004f 00500020 0072006f 00200074     O.M. .P.o.r.t. .
 800396c:	00000020                                 ...

08003970 <Virtual_Com_Port_ConfigDescriptor>:
 8003970:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8003980:	24050001 05011000 01000124 02022404     ...$....$....$..
 8003990:	00062405 82050701 ff000803 00010409     .$..............
 80039a0:	00000a02 03050700 00004002 02810507     .........@......
 80039b0:	00000040                                @...
